
POT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08007af8  08007af8  00017af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007f6c  08007f6c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f6c  08007f6c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001e8  0800815c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  0800815c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6e0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002384  00000000  00000000  0002d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00030928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022759  00000000  00000000  00031498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f68a  00000000  00000000  00053bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf0f3  00000000  00000000  0006327b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013236e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000444c  00000000  00000000  001323c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ae0 	.word	0x08007ae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08007ae0 	.word	0x08007ae0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bc0:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <MX_ADC1_Init+0xc0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c1e:	4811      	ldr	r0, [pc, #68]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000c20:	f001 f830 	bl	8001c84 <HAL_ADC_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c2a:	f000 fc1f 	bl	800146c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_ADC1_Init+0xc4>)
 8000c30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c32:	2306      	movs	r3, #6
 8000c34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c3a:	237f      	movs	r3, #127	; 0x7f
 8000c3c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_ADC1_Init+0xbc>)
 8000c4c:	f001 fa94 	bl	8002178 <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c56:	f000 fc09 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000204 	.word	0x20000204
 8000c68:	50040000 	.word	0x50040000
 8000c6c:	25b00200 	.word	0x25b00200

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b09e      	sub	sp, #120	; 0x78
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2254      	movs	r2, #84	; 0x54
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 f839 	bl	8004d08 <memset>
  if(adcHandle->Instance==ADC1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <HAL_ADC_MspInit+0xc0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d143      	bne.n	8000d28 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ca4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ca6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000caa:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fd08 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000cda:	f000 fbc7 	bl	800146c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_ADC_MspInit+0xc4>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_ADC_MspInit+0xc4>)
 8000ce4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_ADC_MspInit+0xc4>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_ADC_MspInit+0xc4>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_ADC_MspInit+0xc4>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_ADC_MspInit+0xc4>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d12:	230b      	movs	r3, #11
 8000d14:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f002 f8bc 	bl	8002ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3778      	adds	r7, #120	; 0x78
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	50040000 	.word	0x50040000
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_GPIO_Init+0x7c>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <MX_GPIO_Init+0x7c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_GPIO_Init+0x7c>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_GPIO_Init+0x7c>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_GPIO_Init+0x7c>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_GPIO_Init+0x7c>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f002 f882 	bl	8002ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2017      	movs	r0, #23
 8000da2:	f002 f846 	bl	8002e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000da6:	2017      	movs	r0, #23
 8000da8:	f002 f85f 	bl	8002e6a <HAL_NVIC_EnableIRQ>

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <MX_I2C1_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <MX_I2C1_Init+0x7c>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df2:	480e      	ldr	r0, [pc, #56]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000df4:	f002 f9f9 	bl	80031ea <HAL_I2C_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dfe:	f000 fb35 	bl	800146c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000e06:	f002 fd71 	bl	80038ec <HAL_I2CEx_ConfigAnalogFilter>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f000 fb2c 	bl	800146c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000e18:	f002 fdb3 	bl	8003982 <HAL_I2CEx_ConfigDigitalFilter>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 fb23 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000268 	.word	0x20000268
 8000e30:	40005400 	.word	0x40005400
 8000e34:	10909cec 	.word	0x10909cec

08000e38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09e      	sub	sp, #120	; 0x78
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2254      	movs	r2, #84	; 0x54
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 ff55 	bl	8004d08 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <HAL_I2C_MspInit+0xa4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d135      	bne.n	8000ed4 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e68:	2340      	movs	r3, #64	; 0x40
 8000e6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fc35 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e80:	f000 faf4 	bl	800146c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_I2C_MspInit+0xa8>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <HAL_I2C_MspInit+0xa8>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_I2C_MspInit+0xa8>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e9c:	23c0      	movs	r3, #192	; 0xc0
 8000e9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea0:	2312      	movs	r3, #18
 8000ea2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eac:	2304      	movs	r3, #4
 8000eae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <HAL_I2C_MspInit+0xac>)
 8000eb8:	f001 fff2 	bl	8002ea0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_I2C_MspInit+0xa8>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_I2C_MspInit+0xa8>)
 8000ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_I2C_MspInit+0xa8>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3778      	adds	r7, #120	; 0x78
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000efe:	2308      	movs	r3, #8
 8000f00:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000f02:	2028      	movs	r0, #40	; 0x28
 8000f04:	f000 fc84 	bl	8001810 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	2130      	movs	r1, #48	; 0x30
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f829 	bl	8000f68 <lcd_write>
	HAL_Delay(5);
 8000f16:	2005      	movs	r0, #5
 8000f18:	f000 fc7a 	bl	8001810 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	2130      	movs	r1, #48	; 0x30
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f81f 	bl	8000f68 <lcd_write>
	HAL_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fc70 	bl	8001810 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	2130      	movs	r1, #48	; 0x30
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f815 	bl	8000f68 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f80e 	bl	8000f68 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	210c      	movs	r1, #12
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f807 	bl	8000f68 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f89f 	bl	800109e <lcd_clear>

}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	460b      	mov	r3, r1
 8000f74:	71bb      	strb	r3, [r7, #6]
 8000f76:	4613      	mov	r3, r2
 8000f78:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	797b      	ldrb	r3, [r7, #5]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000f90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f94:	f023 030f 	bic.w	r3, r3, #15
 8000f98:	b25a      	sxtb	r2, r3
 8000f9a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	f107 020c 	add.w	r2, r7, #12
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2304      	movs	r3, #4
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <lcd_write+0x88>)
 8000fdc:	f002 f994 	bl	8003308 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000fe0:	2005      	movs	r0, #5
 8000fe2:	f000 fc15 	bl	8001810 <HAL_Delay>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000268 	.word	0x20000268

08000ff4 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	2300      	movs	r3, #0
 8001002:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800100e:	2308      	movs	r3, #8
 8001010:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f843 	bl	800109e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ffa1 	bl	8000f68 <lcd_write>
	while(lcd->f_line[i])
 8001026:	e00f      	b.n	8001048 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7818      	ldrb	r0, [r3, #0]
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	7859      	ldrb	r1, [r3, #1]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	f7ff ff93 	bl	8000f68 <lcd_write>
		i++;
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	3301      	adds	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	21c0      	movs	r1, #192	; 0xc0
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff81 	bl	8000f68 <lcd_write>
	while(lcd->s_line[i])
 8001066:	e00f      	b.n	8001088 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7818      	ldrb	r0, [r3, #0]
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	7c99      	ldrb	r1, [r3, #18]
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	f7ff ff73 	bl	8000f68 <lcd_write>
		i++;
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	3301      	adds	r3, #1
 8001086:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	7c9b      	ldrb	r3, [r3, #18]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e9      	bne.n	8001068 <lcd_display+0x74>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80010b4:	2308      	movs	r3, #8
 80010b6:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff51 	bl	8000f68 <lcd_write>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <menu>:
uint16_t readValue;
struct lcd_disp disp;


void menu()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

	  	  HAL_ADC_Start(&hadc1);
 80010d6:	4899      	ldr	r0, [pc, #612]	; (800133c <menu+0x26c>)
 80010d8:	f000 ff1c 	bl	8001f14 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 1000);
 80010dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010e0:	4896      	ldr	r0, [pc, #600]	; (800133c <menu+0x26c>)
 80010e2:	f000 ffad 	bl	8002040 <HAL_ADC_PollForConversion>
	      uint16_t readValue = HAL_ADC_GetValue(&hadc1);
 80010e6:	4895      	ldr	r0, [pc, #596]	; (800133c <menu+0x26c>)
 80010e8:	f001 f839 	bl	800215e <HAL_ADC_GetValue>
 80010ec:	4603      	mov	r3, r0
 80010ee:	80fb      	strh	r3, [r7, #6]
	      HAL_ADC_Stop(&hadc1);
 80010f0:	4892      	ldr	r0, [pc, #584]	; (800133c <menu+0x26c>)
 80010f2:	f000 ff72 	bl	8001fda <HAL_ADC_Stop>

	      // Change menu position
	      if (abs(readValue - prevReadValue) > 50)
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4a91      	ldr	r2, [pc, #580]	; (8001340 <menu+0x270>)
 80010fa:	8812      	ldrh	r2, [r2, #0]
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bfb8      	it	lt
 8001102:	425b      	neglt	r3, r3
 8001104:	2b32      	cmp	r3, #50	; 0x32
 8001106:	dd0b      	ble.n	8001120 <menu+0x50>
	      {
	          menuPosition = (readValue > 50) ? 1 : 0;
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	2b32      	cmp	r3, #50	; 0x32
 800110c:	bf8c      	ite	hi
 800110e:	2301      	movhi	r3, #1
 8001110:	2300      	movls	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <menu+0x274>)
 8001118:	701a      	strb	r2, [r3, #0]
	          prevReadValue = readValue;
 800111a:	4a89      	ldr	r2, [pc, #548]	; (8001340 <menu+0x270>)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	8013      	strh	r3, [r2, #0]
	      }

	      if (menuPosition == 0)
 8001120:	4b88      	ldr	r3, [pc, #544]	; (8001344 <menu+0x274>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f040 8083 	bne.w	8001230 <menu+0x160>
	      {
	          // Display menu for Shoty
	          sprintf((char *)disp.f_line, "1. Shoty%s", (menuPosition == 0) ? arrowSymbol : "");
 800112a:	4b86      	ldr	r3, [pc, #536]	; (8001344 <menu+0x274>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <menu+0x68>
 8001132:	4b85      	ldr	r3, [pc, #532]	; (8001348 <menu+0x278>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	e000      	b.n	800113a <menu+0x6a>
 8001138:	4b84      	ldr	r3, [pc, #528]	; (800134c <menu+0x27c>)
 800113a:	461a      	mov	r2, r3
 800113c:	4984      	ldr	r1, [pc, #528]	; (8001350 <menu+0x280>)
 800113e:	4885      	ldr	r0, [pc, #532]	; (8001354 <menu+0x284>)
 8001140:	f004 fa54 	bl	80055ec <siprintf>
	          sprintf((char *)disp.s_line, "2. Drinki");
 8001144:	4984      	ldr	r1, [pc, #528]	; (8001358 <menu+0x288>)
 8001146:	4885      	ldr	r0, [pc, #532]	; (800135c <menu+0x28c>)
 8001148:	f004 fa50 	bl	80055ec <siprintf>
	          HAL_Delay(500);
 800114c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001150:	f000 fb5e 	bl	8001810 <HAL_Delay>
	          lcd_display(&disp);
 8001154:	4882      	ldr	r0, [pc, #520]	; (8001360 <menu+0x290>)
 8001156:	f7ff ff4d 	bl	8000ff4 <lcd_display>

	          // Check button press for Shoty
	          if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 800115a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f002 f807 	bl	8003174 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	f040 80e3 	bne.w	8001334 <menu+0x264>
	          {
	              HAL_Delay(100);
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f000 fb4e 	bl	8001810 <HAL_Delay>

	              // Wait for button release
	              while (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 8001174:	bf00      	nop
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f001 fff9 	bl	8003174 <HAL_GPIO_ReadPin>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d0f6      	beq.n	8001176 <menu+0xa6>
	              }

	              // Change to the Shoty quantity selection screen
	              while (1)
	              {
	                  sprintf((char *)disp.f_line, "ilosc ml: %d", selectedML);
 8001188:	4b76      	ldr	r3, [pc, #472]	; (8001364 <menu+0x294>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4976      	ldr	r1, [pc, #472]	; (8001368 <menu+0x298>)
 8001190:	4870      	ldr	r0, [pc, #448]	; (8001354 <menu+0x284>)
 8001192:	f004 fa2b 	bl	80055ec <siprintf>
	                  sprintf((char *)disp.s_line, "Potwierdz PA_8");
 8001196:	4975      	ldr	r1, [pc, #468]	; (800136c <menu+0x29c>)
 8001198:	4870      	ldr	r0, [pc, #448]	; (800135c <menu+0x28c>)
 800119a:	f004 fa27 	bl	80055ec <siprintf>

	               //   HAL_Delay(500);
	                  lcd_display(&disp);
 800119e:	4870      	ldr	r0, [pc, #448]	; (8001360 <menu+0x290>)
 80011a0:	f7ff ff28 	bl	8000ff4 <lcd_display>

	                  // Check button press for confirmation
	                  if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 80011a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f001 ffe2 	bl	8003174 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d113      	bne.n	80011de <menu+0x10e>
	                  {
	                      HAL_Delay(100);
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f000 fb2a 	bl	8001810 <HAL_Delay>

	                      // Wait for button release
	                      while (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 80011bc:	bf00      	nop
 80011be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f001 ffd5 	bl	8003174 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d0f6      	beq.n	80011be <menu+0xee>

	                      // Process the selected quantity for Shoty (selectedML variable)
	                      // ...

	                      // Reset the selected quantity
	                      selectedML = 0;
 80011d0:	4b64      	ldr	r3, [pc, #400]	; (8001364 <menu+0x294>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	801a      	strh	r2, [r3, #0]

	                      // Return to the main menu
	                      menuPosition = 0;
 80011d6:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <menu+0x274>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	                      break;
 80011dc:	e0aa      	b.n	8001334 <menu+0x264>
	                  }

	                  // Update selected quantity based on the potentiometer
	                  HAL_ADC_Start(&hadc1);
 80011de:	4857      	ldr	r0, [pc, #348]	; (800133c <menu+0x26c>)
 80011e0:	f000 fe98 	bl	8001f14 <HAL_ADC_Start>
	                  HAL_ADC_PollForConversion(&hadc1, 1000);
 80011e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e8:	4854      	ldr	r0, [pc, #336]	; (800133c <menu+0x26c>)
 80011ea:	f000 ff29 	bl	8002040 <HAL_ADC_PollForConversion>
	                  readValue = HAL_ADC_GetValue(&hadc1);
 80011ee:	4853      	ldr	r0, [pc, #332]	; (800133c <menu+0x26c>)
 80011f0:	f000 ffb5 	bl	800215e <HAL_ADC_GetValue>
 80011f4:	4603      	mov	r3, r0
 80011f6:	80fb      	strh	r3, [r7, #6]
	                  HAL_ADC_Stop(&hadc1);
 80011f8:	4850      	ldr	r0, [pc, #320]	; (800133c <menu+0x26c>)
 80011fa:	f000 feee 	bl	8001fda <HAL_ADC_Stop>

	                  selectedML = (uint16_t)(readValue * potentiometerScalingShoty);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <menu+0x2a0>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001216:	ee17 3a90 	vmov	r3, s15
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b51      	ldr	r3, [pc, #324]	; (8001364 <menu+0x294>)
 800121e:	801a      	strh	r2, [r3, #0]

	                  // Limit the selected quantity to the range (0 to 50 ml)
	                  if (selectedML > 50)
 8001220:	4b50      	ldr	r3, [pc, #320]	; (8001364 <menu+0x294>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	2b32      	cmp	r3, #50	; 0x32
 8001226:	d9af      	bls.n	8001188 <menu+0xb8>
	                  {
	                      selectedML = 50;
 8001228:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <menu+0x294>)
 800122a:	2232      	movs	r2, #50	; 0x32
 800122c:	801a      	strh	r2, [r3, #0]
	                  sprintf((char *)disp.f_line, "ilosc ml: %d", selectedML);
 800122e:	e7ab      	b.n	8001188 <menu+0xb8>
	                  }
	              }
	          }
	      }
	      else if (menuPosition == 1)
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <menu+0x274>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d17d      	bne.n	8001334 <menu+0x264>
	      {
	          // Display menu for Drinki
	          sprintf((char *)disp.f_line, "1. Shoty");
 8001238:	494e      	ldr	r1, [pc, #312]	; (8001374 <menu+0x2a4>)
 800123a:	4846      	ldr	r0, [pc, #280]	; (8001354 <menu+0x284>)
 800123c:	f004 f9d6 	bl	80055ec <siprintf>
	          sprintf((char *)disp.s_line, "2. Drinki%s", (menuPosition == 1) ? arrowSymbol : "");
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <menu+0x274>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <menu+0x17e>
 8001248:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <menu+0x278>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	e000      	b.n	8001250 <menu+0x180>
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <menu+0x27c>)
 8001250:	461a      	mov	r2, r3
 8001252:	4949      	ldr	r1, [pc, #292]	; (8001378 <menu+0x2a8>)
 8001254:	4841      	ldr	r0, [pc, #260]	; (800135c <menu+0x28c>)
 8001256:	f004 f9c9 	bl	80055ec <siprintf>
	         // HAL_Delay(500);
	          lcd_display(&disp);
 800125a:	4841      	ldr	r0, [pc, #260]	; (8001360 <menu+0x290>)
 800125c:	f7ff feca 	bl	8000ff4 <lcd_display>

	          // Check button press for Drinki
	          if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 8001260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f001 ff84 	bl	8003174 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d160      	bne.n	8001334 <menu+0x264>
	          {
	              HAL_Delay(100);
 8001272:	2064      	movs	r0, #100	; 0x64
 8001274:	f000 facc 	bl	8001810 <HAL_Delay>

	              // Wait for button release
	              while (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 8001278:	bf00      	nop
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 ff77 	bl	8003174 <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d0f6      	beq.n	800127a <menu+0x1aa>
	              }

	              // Change to the Drinki quantity selection screen
	              while (1)
	              {
	                  sprintf((char *)disp.f_line, "ilosc ml: %d", selectedML);
 800128c:	4b35      	ldr	r3, [pc, #212]	; (8001364 <menu+0x294>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4935      	ldr	r1, [pc, #212]	; (8001368 <menu+0x298>)
 8001294:	482f      	ldr	r0, [pc, #188]	; (8001354 <menu+0x284>)
 8001296:	f004 f9a9 	bl	80055ec <siprintf>
	                  sprintf((char *)disp.s_line, "Potwierdz PA_8");
 800129a:	4934      	ldr	r1, [pc, #208]	; (800136c <menu+0x29c>)
 800129c:	482f      	ldr	r0, [pc, #188]	; (800135c <menu+0x28c>)
 800129e:	f004 f9a5 	bl	80055ec <siprintf>

	              //    HAL_Delay(500);
	                  lcd_display(&disp);
 80012a2:	482f      	ldr	r0, [pc, #188]	; (8001360 <menu+0x290>)
 80012a4:	f7ff fea6 	bl	8000ff4 <lcd_display>

	                  // Check button press for confirmation
	                  if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 80012a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f001 ff60 	bl	8003174 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d113      	bne.n	80012e2 <menu+0x212>
	                  {
	                      HAL_Delay(100);
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f000 faa8 	bl	8001810 <HAL_Delay>

	                      // Wait for button release
	                      while (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET)
 80012c0:	bf00      	nop
 80012c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f001 ff53 	bl	8003174 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d0f6      	beq.n	80012c2 <menu+0x1f2>

	                      // Process the selected quantity for Drinki (selectedML variable)
	                      // ...

	                      // Reset the selected quantity
	                      selectedML = 0;
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <menu+0x294>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]

	                      // Return to the main menu
	                      menuPosition = 0;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <menu+0x274>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	                      break;
 80012e0:	e028      	b.n	8001334 <menu+0x264>
	                  }

	                  // Update selected quantity based on the potentiometer
	                  HAL_ADC_Start(&hadc1);
 80012e2:	4816      	ldr	r0, [pc, #88]	; (800133c <menu+0x26c>)
 80012e4:	f000 fe16 	bl	8001f14 <HAL_ADC_Start>
	                  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <menu+0x26c>)
 80012ee:	f000 fea7 	bl	8002040 <HAL_ADC_PollForConversion>
	                  readValue = HAL_ADC_GetValue(&hadc1);
 80012f2:	4812      	ldr	r0, [pc, #72]	; (800133c <menu+0x26c>)
 80012f4:	f000 ff33 	bl	800215e <HAL_ADC_GetValue>
 80012f8:	4603      	mov	r3, r0
 80012fa:	80fb      	strh	r3, [r7, #6]
	                  HAL_ADC_Stop(&hadc1);
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <menu+0x26c>)
 80012fe:	f000 fe6c 	bl	8001fda <HAL_ADC_Stop>

	                  selectedML = (uint16_t)(readValue * potentiometerScalingDrinki);
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <menu+0x2ac>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131a:	ee17 3a90 	vmov	r3, s15
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <menu+0x294>)
 8001322:	801a      	strh	r2, [r3, #0]

	                  // Limit the selected quantity to the range (0 to 150 ml)
	                  if (selectedML > 150)
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <menu+0x294>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2b96      	cmp	r3, #150	; 0x96
 800132a:	d9af      	bls.n	800128c <menu+0x1bc>
	                  {
	                      selectedML = 150;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <menu+0x294>)
 800132e:	2296      	movs	r2, #150	; 0x96
 8001330:	801a      	strh	r2, [r3, #0]
	                  sprintf((char *)disp.f_line, "ilosc ml: %d", selectedML);
 8001332:	e7ab      	b.n	800128c <menu+0x1bc>
	          }
	      }



}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000204 	.word	0x20000204
 8001340:	200002be 	.word	0x200002be
 8001344:	200002bc 	.word	0x200002bc
 8001348:	20000008 	.word	0x20000008
 800134c:	08007afc 	.word	0x08007afc
 8001350:	08007b00 	.word	0x08007b00
 8001354:	200002c5 	.word	0x200002c5
 8001358:	08007b0c 	.word	0x08007b0c
 800135c:	200002d6 	.word	0x200002d6
 8001360:	200002c4 	.word	0x200002c4
 8001364:	200002c0 	.word	0x200002c0
 8001368:	08007b18 	.word	0x08007b18
 800136c:	08007b28 	.word	0x08007b28
 8001370:	20000000 	.word	0x20000000
 8001374:	08007b38 	.word	0x08007b38
 8001378:	08007b44 	.word	0x08007b44
 800137c:	20000004 	.word	0x20000004

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f000 f9ce 	bl	8001726 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f81d 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f7ff fcd3 	bl	8000d38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001392:	f7ff fc09 	bl	8000ba8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001396:	f7ff fd0f 	bl	8000db8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  	  disp.addr = (0x27 << 1);
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <main+0x40>)
 800139c:	224e      	movs	r2, #78	; 0x4e
 800139e:	701a      	strb	r2, [r3, #0]
      disp.bl = true;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <main+0x40>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
      lcd_init(&disp);
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <main+0x40>)
 80013aa:	f7ff fd9d 	bl	8000ee8 <lcd_init>



      HAL_ADC_Start(&hadc1);
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <main+0x44>)
 80013b0:	f000 fdb0 	bl	8001f14 <HAL_ADC_Start>
      int ml = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]

*/



menu();
 80013b8:	f7ff fe8a 	bl	80010d0 <menu>
 80013bc:	e7fc      	b.n	80013b8 <main+0x38>
 80013be:	bf00      	nop
 80013c0:	200002c4 	.word	0x200002c4
 80013c4:	20000204 	.word	0x20000204

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b096      	sub	sp, #88	; 0x58
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2244      	movs	r2, #68	; 0x44
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fc96 	bl	8004d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ee:	f002 fb23 	bl	8003a38 <HAL_PWREx_ControlVoltageScaling>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013f8:	f000 f838 	bl	800146c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013fc:	2310      	movs	r3, #16
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001400:	2301      	movs	r3, #1
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001408:	2360      	movs	r3, #96	; 0x60
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140c:	2302      	movs	r3, #2
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001410:	2301      	movs	r3, #1
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001418:	2328      	movs	r3, #40	; 0x28
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800141c:	2307      	movs	r3, #7
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fb59 	bl	8003ae4 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001438:	f000 f818 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2303      	movs	r3, #3
 8001442:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	2104      	movs	r1, #4
 8001454:	4618      	mov	r0, r3
 8001456:	f002 ff59 	bl	800430c <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001460:	f000 f804 	bl	800146c <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3758      	adds	r7, #88	; 0x58
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_MspInit+0x44>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6613      	str	r3, [r2, #96]	; 0x60
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <HAL_MspInit+0x44>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f000 f960 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001518:	f44f 7080 	mov.w	r0, #256	; 0x100
 800151c:	f001 fe42 	bl	80031a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_kill>:

int _kill(int pid, int sig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800153e:	f003 fbb9 	bl	8004cb4 <__errno>
 8001542:	4603      	mov	r3, r0
 8001544:	2216      	movs	r2, #22
 8001546:	601a      	str	r2, [r3, #0]
  return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_exit>:

void _exit (int status)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ffe7 	bl	8001534 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001566:	e7fe      	b.n	8001566 <_exit+0x12>

08001568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e00a      	b.n	8001590 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800157a:	f3af 8000 	nop.w
 800157e:	4601      	mov	r1, r0
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	b2ca      	uxtb	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbf0      	blt.n	800157a <_read+0x12>
  }

  return len;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e009      	b.n	80015c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf1      	blt.n	80015b4 <_write+0x12>
  }
  return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_close>:

int _close(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001602:	605a      	str	r2, [r3, #4]
  return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_isatty>:

int _isatty(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f003 fb1e 	bl	8004cb4 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20010000 	.word	0x20010000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	200002e8 	.word	0x200002e8
 80016ac:	20000300 	.word	0x20000300

080016b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800170c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff ffea 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <LoopForever+0x6>)
  ldr r1, =_edata
 80016de:	490d      	ldr	r1, [pc, #52]	; (8001714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <LoopForever+0xe>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f4:	4c0a      	ldr	r4, [pc, #40]	; (8001720 <LoopForever+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 fadd 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001706:	f7ff fe3b 	bl	8001380 <main>

0800170a <LoopForever>:

LoopForever:
    b LoopForever
 800170a:	e7fe      	b.n	800170a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001718:	08007f74 	.word	0x08007f74
  ldr r2, =_sbss
 800171c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001720:	20000300 	.word	0x20000300

08001724 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC1_IRQHandler>

08001726 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f001 fb73 	bl	8002e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001736:	200f      	movs	r0, #15
 8001738:	f000 f80e 	bl	8001758 <HAL_InitTick>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	e001      	b.n	800174c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001748:	f7ff fe96 	bl	8001478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800174c:	79fb      	ldrb	r3, [r7, #7]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_InitTick+0x6c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_InitTick+0x70>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_InitTick+0x6c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fb7f 	bl	8002e86 <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d809      	bhi.n	80017a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f001 fb49 	bl	8002e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_InitTick+0x74>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e004      	b.n	80017b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e001      	b.n	80017b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000014 	.word	0x20000014
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	20000010 	.word	0x20000010

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000014 	.word	0x20000014
 80017f4:	200002ec 	.word	0x200002ec

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	200002ec 	.word	0x200002ec

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000014 	.word	0x20000014

08001858 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3360      	adds	r3, #96	; 0x60
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <LL_ADC_SetOffset+0x44>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	4313      	orrs	r3, r2
 80018f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018f8:	bf00      	nop
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	03fff000 	.word	0x03fff000

08001908 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3360      	adds	r3, #96	; 0x60
 8001916:	461a      	mov	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3360      	adds	r3, #96	; 0x60
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	431a      	orrs	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3330      	adds	r3, #48	; 0x30
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	211f      	movs	r1, #31
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	0e9b      	lsrs	r3, r3, #26
 80019c8:	f003 011f 	and.w	r1, r3, #31
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	431a      	orrs	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3314      	adds	r3, #20
 80019f8:	461a      	mov	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	0e5b      	lsrs	r3, r3, #25
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	0d1b      	lsrs	r3, r3, #20
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2107      	movs	r1, #7
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0d1b      	lsrs	r3, r3, #20
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0318 	and.w	r3, r3, #24
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a64:	40d9      	lsrs	r1, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	400b      	ands	r3, r1
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	0007ffff 	.word	0x0007ffff

08001a88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6093      	str	r3, [r2, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b10:	d101      	bne.n	8001b16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b60:	f043 0202 	orr.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <LL_ADC_IsEnabled+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_ADC_IsEnabled+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d101      	bne.n	8001bb2 <LL_ADC_IsDisableOngoing+0x18>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <LL_ADC_IsDisableOngoing+0x1a>
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd4:	f043 0204 	orr.w	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bfc:	f043 0210 	orr.w	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d101      	bne.n	8001c28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4a:	f043 0220 	orr.w	r2, r3, #32
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e12c      	b.n	8001ef8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7fe ffdf 	bl	8000c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fef1 	bl	8001aac <LL_ADC_IsDeepPowerDownEnabled>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fed7 	bl	8001a88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff0c 	bl	8001afc <LL_ADC_IsInternalRegulatorEnabled>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fef0 	bl	8001ad4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf4:	4b82      	ldr	r3, [pc, #520]	; (8001f00 <HAL_ADC_Init+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	4a82      	ldr	r2, [pc, #520]	; (8001f04 <HAL_ADC_Init+0x280>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	3301      	adds	r3, #1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d08:	e002      	b.n	8001d10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f9      	bne.n	8001d0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff feee 	bl	8001afc <LL_ADC_IsInternalRegulatorEnabled>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10d      	bne.n	8001d42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0210 	orr.w	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff62 	bl	8001c10 <LL_ADC_REG_IsConversionOngoing>
 8001d4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 80c5 	bne.w	8001ee6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 80c1 	bne.w	8001ee6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d6c:	f043 0202 	orr.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fefb 	bl	8001b74 <LL_ADC_IsEnabled>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d84:	4860      	ldr	r0, [pc, #384]	; (8001f08 <HAL_ADC_Init+0x284>)
 8001d86:	f7ff fef5 	bl	8001b74 <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4619      	mov	r1, r3
 8001d96:	485d      	ldr	r0, [pc, #372]	; (8001f0c <HAL_ADC_Init+0x288>)
 8001d98:	f7ff fd5e 	bl	8001858 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e5b      	ldrb	r3, [r3, #25]
 8001da0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001dac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001db2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	045b      	lsls	r3, r3, #17
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <HAL_ADC_Init+0x28c>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff feff 	bl	8001c10 <LL_ADC_REG_IsConversionOngoing>
 8001e12:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff20 	bl	8001c5e <LL_ADC_INJ_IsConversionOngoing>
 8001e1e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d13d      	bne.n	8001ea2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d13a      	bne.n	8001ea2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e30:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e38:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e48:	f023 0302 	bic.w	r3, r3, #2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d118      	bne.n	8001e92 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e6a:	f023 0304 	bic.w	r3, r3, #4
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e76:	4311      	orrs	r1, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e82:	430a      	orrs	r2, r1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	e007      	b.n	8001ea2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f023 010f 	bic.w	r1, r3, #15
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec2:	e007      	b.n	8001ed4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 020f 	bic.w	r2, r2, #15
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f023 0303 	bic.w	r3, r3, #3
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ee4:	e007      	b.n	8001ef6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	053e2d63 	.word	0x053e2d63
 8001f08:	50040000 	.word	0x50040000
 8001f0c:	50040300 	.word	0x50040300
 8001f10:	fff0c007 	.word	0xfff0c007

08001f14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fe75 	bl	8001c10 <LL_ADC_REG_IsConversionOngoing>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d14f      	bne.n	8001fcc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Start+0x26>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e04b      	b.n	8001fd2 <HAL_ADC_Start+0xbe>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fdb4 	bl	8002ab0 <ADC_Enable>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d137      	bne.n	8001fc2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f023 0206 	bic.w	r2, r3, #6
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	221c      	movs	r2, #28
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe00 	bl	8001bc0 <LL_ADC_REG_StartConversion>
 8001fc0:	e006      	b.n	8001fd0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fca:	e001      	b.n	8001fd0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_Stop+0x16>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e023      	b.n	8002038 <HAL_ADC_Stop+0x5e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ff8:	2103      	movs	r1, #3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fc9c 	bl	8002938 <ADC_ConversionStop>
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d111      	bne.n	800202e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fdd6 	bl	8002bbc <ADC_Disable>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	2b08      	cmp	r3, #8
 8002050:	d102      	bne.n	8002058 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002052:	2308      	movs	r3, #8
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e010      	b.n	800207a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0220 	orr.w	r2, r3, #32
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06f      	b.n	8002156 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002076:	2304      	movs	r3, #4
 8002078:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800207a:	f7ff fbbd 	bl	80017f8 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002080:	e021      	b.n	80020c6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d01d      	beq.n	80020c6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800208a:	f7ff fbb5 	bl	80017f8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <HAL_ADC_PollForConversion+0x60>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d112      	bne.n	80020c6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f043 0204 	orr.w	r2, r3, #4
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e047      	b.n	8002156 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0d6      	beq.n	8002082 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fc40 	bl	800196a <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01c      	beq.n	800212a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e5b      	ldrb	r3, [r3, #25]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d118      	bne.n	800212a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d111      	bne.n	800212a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d104      	bne.n	8002142 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2208      	movs	r2, #8
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e008      	b.n	8002154 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	220c      	movs	r2, #12
 8002152:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0b6      	sub	sp, #216	; 0xd8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x22>
 8002196:	2302      	movs	r3, #2
 8002198:	e3b9      	b.n	800290e <HAL_ADC_ConfigChannel+0x796>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fd32 	bl	8001c10 <LL_ADC_REG_IsConversionOngoing>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 839e 	bne.w	80028f0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d824      	bhi.n	8002206 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	3b02      	subs	r3, #2
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d81b      	bhi.n	80021fe <HAL_ADC_ConfigChannel+0x86>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <HAL_ADC_ConfigChannel+0x54>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021e5 	.word	0x080021e5
 80021d4:	080021ed 	.word	0x080021ed
 80021d8:	080021f5 	.word	0x080021f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	220c      	movs	r2, #12
 80021e0:	605a      	str	r2, [r3, #4]
          break;
 80021e2:	e011      	b.n	8002208 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2212      	movs	r2, #18
 80021e8:	605a      	str	r2, [r3, #4]
          break;
 80021ea:	e00d      	b.n	8002208 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2218      	movs	r2, #24
 80021f0:	605a      	str	r2, [r3, #4]
          break;
 80021f2:	e009      	b.n	8002208 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fa:	605a      	str	r2, [r3, #4]
          break;
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2206      	movs	r2, #6
 8002202:	605a      	str	r2, [r3, #4]
          break;
 8002204:	e000      	b.n	8002208 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002206:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	f7ff fbbb 	bl	8001990 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fcf6 	bl	8001c10 <LL_ADC_REG_IsConversionOngoing>
 8002224:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fd16 	bl	8001c5e <LL_ADC_INJ_IsConversionOngoing>
 8002232:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002236:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 81a6 	bne.w	800258c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 81a1 	bne.w	800258c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	461a      	mov	r2, r3
 8002258:	f7ff fbc6 	bl	80019e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00a      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6919      	ldr	r1, [r3, #16]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800228e:	f7ff fb17 	bl	80018c0 <LL_ADC_SetOffset>
 8002292:	e17b      	b.n	800258c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fb34 	bl	8001908 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x148>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fb29 	bl	8001908 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	e01e      	b.n	80022fe <HAL_ADC_ConfigChannel+0x186>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fb1e 	bl	8001908 <LL_ADC_GetOffsetChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e004      	b.n	80022fc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80022f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x19e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	e018      	b.n	8002348 <HAL_ADC_ConfigChannel+0x1d0>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800232a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800232e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e004      	b.n	8002348 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800233e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff faed 	bl	8001934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fad1 	bl	8001908 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x20e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fac6 	bl	8001908 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	e01e      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x24c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fabb 	bl	8001908 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e004      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80023b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x264>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	e018      	b.n	800240e <HAL_ADC_ConfigChannel+0x296>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e004      	b.n	800240e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800240e:	429a      	cmp	r2, r3
 8002410:	d106      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	2101      	movs	r1, #1
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fa8a 	bl	8001934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2102      	movs	r1, #2
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fa6e 	bl	8001908 <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <HAL_ADC_ConfigChannel+0x2d4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fa63 	bl	8001908 <LL_ADC_GetOffsetChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	f003 021f 	and.w	r2, r3, #31
 800244a:	e01e      	b.n	800248a <HAL_ADC_ConfigChannel+0x312>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2102      	movs	r1, #2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fa58 	bl	8001908 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800246a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800246e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e004      	b.n	8002488 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800247e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x32a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0e9b      	lsrs	r3, r3, #26
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	e016      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x358>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e004      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80024c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2102      	movs	r1, #2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fa29 	bl	8001934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2103      	movs	r1, #3
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa0d 	bl	8001908 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_ADC_ConfigChannel+0x396>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2103      	movs	r1, #3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fa02 	bl	8001908 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	e017      	b.n	800253e <HAL_ADC_ConfigChannel+0x3c6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2103      	movs	r1, #3
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff f9f7 	bl	8001908 <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002528:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800252a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x3de>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	e011      	b.n	800257a <HAL_ADC_ConfigChannel+0x402>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002566:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e003      	b.n	800257a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800257a:	429a      	cmp	r2, r3
 800257c:	d106      	bne.n	800258c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	2103      	movs	r1, #3
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f9d4 	bl	8001934 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff faef 	bl	8001b74 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 813f 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f7ff fa48 	bl	8001a40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a8e      	ldr	r2, [pc, #568]	; (80027f0 <HAL_ADC_ConfigChannel+0x678>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	f040 8130 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x46c>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2b09      	cmp	r3, #9
 80025da:	bf94      	ite	ls
 80025dc:	2301      	movls	r3, #1
 80025de:	2300      	movhi	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e019      	b.n	8002618 <HAL_ADC_ConfigChannel+0x4a0>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e003      	b.n	8002608 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2b09      	cmp	r3, #9
 8002610:	bf94      	ite	ls
 8002612:	2301      	movls	r3, #1
 8002614:	2300      	movhi	r3, #0
 8002616:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002618:	2b00      	cmp	r3, #0
 800261a:	d079      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x4c0>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002636:	e015      	b.n	8002664 <HAL_ADC_ConfigChannel+0x4ec>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002648:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800264a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x50c>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	e017      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x53c>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80026a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	ea42 0103 	orr.w	r1, r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_ADC_ConfigChannel+0x562>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	051b      	lsls	r3, r3, #20
 80026d8:	e018      	b.n	800270c <HAL_ADC_ConfigChannel+0x594>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e003      	b.n	80026fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80026f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270c:	430b      	orrs	r3, r1
 800270e:	e080      	b.n	8002812 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_ADC_ConfigChannel+0x5b4>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	069b      	lsls	r3, r3, #26
 8002726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800272a:	e015      	b.n	8002758 <HAL_ADC_ConfigChannel+0x5e0>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e003      	b.n	8002750 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	069b      	lsls	r3, r3, #26
 8002754:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x600>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	3301      	adds	r3, #1
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	e017      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x630>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	61fb      	str	r3, [r7, #28]
  return result;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	ea42 0103 	orr.w	r1, r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x65c>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	3301      	adds	r3, #1
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	3b1e      	subs	r3, #30
 80027cc:	051b      	lsls	r3, r3, #20
 80027ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d2:	e01d      	b.n	8002810 <HAL_ADC_ConfigChannel+0x698>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	613b      	str	r3, [r7, #16]
  return result;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e005      	b.n	80027fc <HAL_ADC_ConfigChannel+0x684>
 80027f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002810:	430b      	orrs	r3, r1
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	6892      	ldr	r2, [r2, #8]
 8002816:	4619      	mov	r1, r3
 8002818:	f7ff f8e6 	bl	80019e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_ADC_ConfigChannel+0x7a0>)
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d06c      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002828:	483c      	ldr	r0, [pc, #240]	; (800291c <HAL_ADC_ConfigChannel+0x7a4>)
 800282a:	f7ff f83b 	bl	80018a4 <LL_ADC_GetCommonPathInternalCh>
 800282e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_ADC_ConfigChannel+0x7a8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d127      	bne.n	800288c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800283c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d121      	bne.n	800288c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a35      	ldr	r2, [pc, #212]	; (8002924 <HAL_ADC_ConfigChannel+0x7ac>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d157      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800285a:	4619      	mov	r1, r3
 800285c:	482f      	ldr	r0, [pc, #188]	; (800291c <HAL_ADC_ConfigChannel+0x7a4>)
 800285e:	f7ff f80e 	bl	800187e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_ADC_ConfigChannel+0x7b0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_ADC_ConfigChannel+0x7b4>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	099b      	lsrs	r3, r3, #6
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800287c:	e002      	b.n	8002884 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3b01      	subs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288a:	e03a      	b.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a27      	ldr	r2, [pc, #156]	; (8002930 <HAL_ADC_ConfigChannel+0x7b8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d113      	bne.n	80028be <HAL_ADC_ConfigChannel+0x746>
 8002896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800289a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_ADC_ConfigChannel+0x7ac>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d12a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b4:	4619      	mov	r1, r3
 80028b6:	4819      	ldr	r0, [pc, #100]	; (800291c <HAL_ADC_ConfigChannel+0x7a4>)
 80028b8:	f7fe ffe1 	bl	800187e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028bc:	e021      	b.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_ADC_ConfigChannel+0x7bc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d11c      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d116      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a12      	ldr	r2, [pc, #72]	; (8002924 <HAL_ADC_ConfigChannel+0x7ac>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d111      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	; (800291c <HAL_ADC_ConfigChannel+0x7a4>)
 80028ea:	f7fe ffc8 	bl	800187e <LL_ADC_SetCommonPathInternalCh>
 80028ee:	e008      	b.n	8002902 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800290a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800290e:	4618      	mov	r0, r3
 8002910:	37d8      	adds	r7, #216	; 0xd8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	80080000 	.word	0x80080000
 800291c:	50040300 	.word	0x50040300
 8002920:	c7520000 	.word	0xc7520000
 8002924:	50040000 	.word	0x50040000
 8002928:	2000000c 	.word	0x2000000c
 800292c:	053e2d63 	.word	0x053e2d63
 8002930:	cb840000 	.word	0xcb840000
 8002934:	80000001 	.word	0x80000001

08002938 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f95e 	bl	8001c10 <LL_ADC_REG_IsConversionOngoing>
 8002954:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f97f 	bl	8001c5e <LL_ADC_INJ_IsConversionOngoing>
 8002960:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8098 	beq.w	8002aa0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d02a      	beq.n	80029d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e5b      	ldrb	r3, [r3, #25]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d126      	bne.n	80029d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7e1b      	ldrb	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d122      	bne.n	80029d4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800298e:	2301      	movs	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002992:	e014      	b.n	80029be <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4a45      	ldr	r2, [pc, #276]	; (8002aac <ADC_ConversionStop+0x174>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d90d      	bls.n	80029b8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0210 	orr.w	r2, r3, #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e074      	b.n	8002aa2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b40      	cmp	r3, #64	; 0x40
 80029ca:	d1e3      	bne.n	8002994 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d014      	beq.n	8002a04 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f916 	bl	8001c10 <LL_ADC_REG_IsConversionOngoing>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f8d3 	bl	8001b9a <LL_ADC_IsDisableOngoing>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f8f2 	bl	8001be8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d014      	beq.n	8002a34 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f925 	bl	8001c5e <LL_ADC_INJ_IsConversionOngoing>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f8bb 	bl	8001b9a <LL_ADC_IsDisableOngoing>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f901 	bl	8001c36 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d005      	beq.n	8002a46 <ADC_ConversionStop+0x10e>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d105      	bne.n	8002a4c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a40:	230c      	movs	r3, #12
 8002a42:	617b      	str	r3, [r7, #20]
        break;
 8002a44:	e005      	b.n	8002a52 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a46:	2308      	movs	r3, #8
 8002a48:	617b      	str	r3, [r7, #20]
        break;
 8002a4a:	e002      	b.n	8002a52 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
        break;
 8002a50:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a52:	f7fe fed1 	bl	80017f8 <HAL_GetTick>
 8002a56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a58:	e01b      	b.n	8002a92 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a5a:	f7fe fecd 	bl	80017f8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d914      	bls.n	8002a92 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f043 0210 	orr.w	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e007      	b.n	8002aa2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1dc      	bne.n	8002a5a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	a33fffff 	.word	0xa33fffff

08002ab0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f857 	bl	8001b74 <LL_ADC_IsEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d169      	bne.n	8002ba0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <ADC_Enable+0xfc>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e055      	b.n	8002ba2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f812 	bl	8001b24 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b00:	482b      	ldr	r0, [pc, #172]	; (8002bb0 <ADC_Enable+0x100>)
 8002b02:	f7fe fecf 	bl	80018a4 <LL_ADC_GetCommonPathInternalCh>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <ADC_Enable+0x104>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <ADC_Enable+0x108>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b2a:	e002      	b.n	8002b32 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fe5e 	bl	80017f8 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3e:	e028      	b.n	8002b92 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f815 	bl	8001b74 <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe ffe5 	bl	8001b24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5a:	f7fe fe4d 	bl	80017f8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d914      	bls.n	8002b92 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d00d      	beq.n	8002b92 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e007      	b.n	8002ba2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d1cf      	bne.n	8002b40 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	8000003f 	.word	0x8000003f
 8002bb0:	50040300 	.word	0x50040300
 8002bb4:	2000000c 	.word	0x2000000c
 8002bb8:	053e2d63 	.word	0x053e2d63

08002bbc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ffe6 	bl	8001b9a <LL_ADC_IsDisableOngoing>
 8002bce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe ffcd 	bl	8001b74 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d047      	beq.n	8002c70 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d144      	bne.n	8002c70 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030d 	and.w	r3, r3, #13
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d10c      	bne.n	8002c0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ffa7 	bl	8001b4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2203      	movs	r2, #3
 8002c04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c06:	f7fe fdf7 	bl	80017f8 <HAL_GetTick>
 8002c0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c0c:	e029      	b.n	8002c62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e023      	b.n	8002c72 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c2a:	f7fe fde5 	bl	80017f8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d914      	bls.n	8002c62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1dc      	bne.n	8002c2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <__NVIC_GetPriorityGrouping+0x18>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db0b      	blt.n	8002d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	4907      	ldr	r1, [pc, #28]	; (8002d18 <__NVIC_EnableIRQ+0x38>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2001      	movs	r0, #1
 8002d02:	fa00 f202 	lsl.w	r2, r0, r2
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db0a      	blt.n	8002d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	490c      	ldr	r1, [pc, #48]	; (8002d68 <__NVIC_SetPriority+0x4c>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d44:	e00a      	b.n	8002d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <__NVIC_SetPriority+0x50>)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3b04      	subs	r3, #4
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	440b      	add	r3, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f1c3 0307 	rsb	r3, r3, #7
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	bf28      	it	cs
 8002d8e:	2304      	movcs	r3, #4
 8002d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d902      	bls.n	8002da0 <NVIC_EncodePriority+0x30>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3b03      	subs	r3, #3
 8002d9e:	e000      	b.n	8002da2 <NVIC_EncodePriority+0x32>
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	401a      	ands	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	43d9      	mvns	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	4313      	orrs	r3, r2
         );
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d301      	bcc.n	8002dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00f      	b.n	8002e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <SysTick_Config+0x40>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df6:	210f      	movs	r1, #15
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f7ff ff8e 	bl	8002d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SysTick_Config+0x40>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SysTick_Config+0x40>)
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000e010 	.word	0xe000e010

08002e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff29 	bl	8002c7c <__NVIC_SetPriorityGrouping>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e44:	f7ff ff3e 	bl	8002cc4 <__NVIC_GetPriorityGrouping>
 8002e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f7ff ff8e 	bl	8002d70 <NVIC_EncodePriority>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff5d 	bl	8002d1c <__NVIC_SetPriority>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff31 	bl	8002ce0 <__NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffa2 	bl	8002dd8 <SysTick_Config>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eae:	e148      	b.n	8003142 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 813a 	beq.w	800313c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d005      	beq.n	8002ee0 <HAL_GPIO_Init+0x40>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d130      	bne.n	8002f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f16:	2201      	movs	r2, #1
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0201 	and.w	r2, r3, #1
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d017      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d123      	bne.n	8002fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	6939      	ldr	r1, [r7, #16]
 8002fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8094 	beq.w	800313c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003014:	4b52      	ldr	r3, [pc, #328]	; (8003160 <HAL_GPIO_Init+0x2c0>)
 8003016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003018:	4a51      	ldr	r2, [pc, #324]	; (8003160 <HAL_GPIO_Init+0x2c0>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6613      	str	r3, [r2, #96]	; 0x60
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_GPIO_Init+0x2c0>)
 8003022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800302c:	4a4d      	ldr	r2, [pc, #308]	; (8003164 <HAL_GPIO_Init+0x2c4>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003056:	d00d      	beq.n	8003074 <HAL_GPIO_Init+0x1d4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a43      	ldr	r2, [pc, #268]	; (8003168 <HAL_GPIO_Init+0x2c8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <HAL_GPIO_Init+0x1d0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a42      	ldr	r2, [pc, #264]	; (800316c <HAL_GPIO_Init+0x2cc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d101      	bne.n	800306c <HAL_GPIO_Init+0x1cc>
 8003068:	2302      	movs	r3, #2
 800306a:	e004      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 800306c:	2307      	movs	r3, #7
 800306e:	e002      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 8003074:	2300      	movs	r3, #0
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f002 0203 	and.w	r2, r2, #3
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	4093      	lsls	r3, r2
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003086:	4937      	ldr	r1, [pc, #220]	; (8003164 <HAL_GPIO_Init+0x2c4>)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b8:	4a2d      	ldr	r2, [pc, #180]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030be:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e2:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800310c:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003136:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_GPIO_Init+0x2d0>)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3301      	adds	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f aeaf 	bne.w	8002eb0 <HAL_GPIO_Init+0x10>
  }
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40021000 	.word	0x40021000
 8003164:	40010000 	.word	0x40010000
 8003168:	48000400 	.word	0x48000400
 800316c:	48000800 	.word	0x48000800
 8003170:	40010400 	.word	0x40010400

08003174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e001      	b.n	8003196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f806 	bl	80031d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40010400 	.word	0x40010400

080031d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e081      	b.n	8003300 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd fe11 	bl	8000e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2224      	movs	r2, #36	; 0x24
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800324a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	e006      	b.n	8003272 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003270:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d104      	bne.n	8003284 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003282:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003296:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69d9      	ldr	r1, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	460b      	mov	r3, r1
 8003316:	817b      	strh	r3, [r7, #10]
 8003318:	4613      	mov	r3, r2
 800331a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	f040 80da 	bne.w	80034de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x30>
 8003334:	2302      	movs	r3, #2
 8003336:	e0d3      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003340:	f7fe fa5a 	bl	80017f8 <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2319      	movs	r3, #25
 800334c:	2201      	movs	r2, #1
 800334e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8f0 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0be      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2221      	movs	r2, #33	; 0x21
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2210      	movs	r2, #16
 800336e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	893a      	ldrh	r2, [r7, #8]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	2bff      	cmp	r3, #255	; 0xff
 8003392:	d90e      	bls.n	80033b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	22ff      	movs	r2, #255	; 0xff
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fa6c 	bl	8003888 <I2C_TransferConfig>
 80033b0:	e06c      	b.n	800348c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	8979      	ldrh	r1, [r7, #10]
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fa5b 	bl	8003888 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033d2:	e05b      	b.n	800348c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	6a39      	ldr	r1, [r7, #32]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f8ed 	bl	80035b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e07b      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d034      	beq.n	800348c <HAL_I2C_Master_Transmit+0x184>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d130      	bne.n	800348c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f87f 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04d      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2bff      	cmp	r3, #255	; 0xff
 800344c:	d90e      	bls.n	800346c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	b2da      	uxtb	r2, r3
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	2300      	movs	r3, #0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fa0f 	bl	8003888 <I2C_TransferConfig>
 800346a:	e00f      	b.n	800348c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	b2da      	uxtb	r2, r3
 800347c:	8979      	ldrh	r1, [r7, #10]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f9fe 	bl	8003888 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d19e      	bne.n	80033d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6a39      	ldr	r1, [r7, #32]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8cc 	bl	8003638 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01a      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2220      	movs	r2, #32
 80034b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_I2C_Master_Transmit+0x1e4>)
 80034be:	400b      	ands	r3, r1
 80034c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	80002000 	.word	0x80002000
 80034ec:	fe00e800 	.word	0xfe00e800

080034f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d103      	bne.n	800350e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d007      	beq.n	800352c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	619a      	str	r2, [r3, #24]
  }
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	e022      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d01e      	beq.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe f951 	bl	80017f8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d113      	bne.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e00f      	b.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d0cd      	beq.n	800354a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c4:	e02c      	b.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f870 	bl	80036b0 <I2C_IsErrorOccurred>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e02a      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d01e      	beq.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe f909 	bl	80017f8 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d1cb      	bne.n	80035c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003644:	e028      	b.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f830 	bl	80036b0 <I2C_IsErrorOccurred>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e026      	b.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fe f8cd 	bl	80017f8 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d113      	bne.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e007      	b.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d1cf      	bne.n	8003646 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d075      	beq.n	80037c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2210      	movs	r2, #16
 80036e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e4:	e056      	b.n	8003794 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d052      	beq.n	8003794 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fe f883 	bl	80017f8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <I2C_IsErrorOccurred+0x54>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d147      	bne.n	8003794 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003716:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003726:	d12e      	bne.n	8003786 <I2C_IsErrorOccurred+0xd6>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372e:	d02a      	beq.n	8003786 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b20      	cmp	r3, #32
 8003734:	d027      	beq.n	8003786 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003744:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003746:	f7fe f857 	bl	80017f8 <HAL_GetTick>
 800374a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800374c:	e01b      	b.n	8003786 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800374e:	f7fe f853 	bl	80017f8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b19      	cmp	r3, #25
 800375a:	d914      	bls.n	8003786 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b20      	cmp	r3, #32
 8003792:	d1dc      	bne.n	800374e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d003      	beq.n	80037aa <I2C_IsErrorOccurred+0xfa>
 80037a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d09d      	beq.n	80036e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2220      	movs	r2, #32
 80037b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800380c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01c      	beq.n	8003878 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff fe56 	bl	80034f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <I2C_IsErrorOccurred+0x1d4>)
 8003850:	400b      	ands	r3, r1
 8003852:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800387c:	4618      	mov	r0, r3
 800387e:	3728      	adds	r7, #40	; 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	fe00e800 	.word	0xfe00e800

08003888 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	817b      	strh	r3, [r7, #10]
 8003896:	4613      	mov	r3, r2
 8003898:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389a:	897b      	ldrh	r3, [r7, #10]
 800389c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a0:	7a7b      	ldrb	r3, [r7, #9]
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	0d5b      	lsrs	r3, r3, #21
 80038c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <I2C_TransferConfig+0x60>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	43db      	mvns	r3, r3
 80038cc:	ea02 0103 	and.w	r1, r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	03ff63ff 	.word	0x03ff63ff

080038ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d138      	bne.n	8003974 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800390c:	2302      	movs	r3, #2
 800390e:	e032      	b.n	8003976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800393e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6819      	ldr	r1, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b20      	cmp	r3, #32
 8003996:	d139      	bne.n	8003a0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e033      	b.n	8003a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2224      	movs	r2, #36	; 0x24
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40007000 	.word	0x40007000

08003a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a46:	d130      	bne.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a48:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a54:	d038      	beq.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a56:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2232      	movs	r2, #50	; 0x32
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0c9b      	lsrs	r3, r3, #18
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7c:	e002      	b.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a90:	d102      	bne.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f2      	bne.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa4:	d110      	bne.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e00f      	b.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	d007      	beq.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac0:	4a05      	ldr	r2, [pc, #20]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	431bde83 	.word	0x431bde83

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f000 bc02 	b.w	80042fc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af8:	4b96      	ldr	r3, [pc, #600]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b02:	4b94      	ldr	r3, [pc, #592]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80e4 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4c>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	f040 808b 	bne.w	8003c3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	f040 8087 	bne.w	8003c3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b30:	4b88      	ldr	r3, [pc, #544]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_OscConfig+0x64>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e3d9      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	4b81      	ldr	r3, [pc, #516]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_RCC_OscConfig+0x7e>
 8003b58:	4b7e      	ldr	r3, [pc, #504]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b60:	e005      	b.n	8003b6e <HAL_RCC_OscConfig+0x8a>
 8003b62:	4b7c      	ldr	r3, [pc, #496]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d223      	bcs.n	8003bba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fd54 	bl	8004624 <RCC_SetFlashLatencyFromMSIRange>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e3ba      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b86:	4b73      	ldr	r3, [pc, #460]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a72      	ldr	r2, [pc, #456]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	f043 0308 	orr.w	r3, r3, #8
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b70      	ldr	r3, [pc, #448]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	496d      	ldr	r1, [pc, #436]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ba4:	4b6b      	ldr	r3, [pc, #428]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	4968      	ldr	r1, [pc, #416]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
 8003bb8:	e025      	b.n	8003c06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bba:	4b66      	ldr	r3, [pc, #408]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	f043 0308 	orr.w	r3, r3, #8
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4960      	ldr	r1, [pc, #384]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bd8:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	495b      	ldr	r1, [pc, #364]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fd14 	bl	8004624 <RCC_SetFlashLatencyFromMSIRange>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e37a      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c06:	f000 fc81 	bl	800450c <HAL_RCC_GetSysClockFreq>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	4950      	ldr	r1, [pc, #320]	; (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c18:	5ccb      	ldrb	r3, [r1, r3]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	4a4e      	ldr	r2, [pc, #312]	; (8003d5c <HAL_RCC_OscConfig+0x278>)
 8003c24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fd94 	bl	8001758 <HAL_InitTick>
 8003c30:	4603      	mov	r3, r0
 8003c32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d052      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	e35e      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d032      	beq.n	8003cac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c46:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a42      	ldr	r2, [pc, #264]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c52:	f7fd fdd1 	bl	80017f8 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c5a:	f7fd fdcd 	bl	80017f8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e347      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6c:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a35      	ldr	r2, [pc, #212]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	f043 0308 	orr.w	r3, r3, #8
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4930      	ldr	r1, [pc, #192]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	492b      	ldr	r1, [pc, #172]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
 8003caa:	e01a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fd9e 	bl	80017f8 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc0:	f7fd fd9a 	bl	80017f8 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e314      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x1dc>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d073      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_OscConfig+0x21c>
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d10e      	bne.n	8003d18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d10b      	bne.n	8003d18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d063      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d15f      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e2f1      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d106      	bne.n	8003d30 <HAL_RCC_OscConfig+0x24c>
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e025      	b.n	8003d7c <HAL_RCC_OscConfig+0x298>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d38:	d114      	bne.n	8003d64 <HAL_RCC_OscConfig+0x280>
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a02      	ldr	r2, [pc, #8]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e013      	b.n	8003d7c <HAL_RCC_OscConfig+0x298>
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08007b50 	.word	0x08007b50
 8003d5c:	2000000c 	.word	0x2000000c
 8003d60:	20000010 	.word	0x20000010
 8003d64:	4ba0      	ldr	r3, [pc, #640]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a9f      	ldr	r2, [pc, #636]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b9d      	ldr	r3, [pc, #628]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a9c      	ldr	r2, [pc, #624]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd fd38 	bl	80017f8 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fd fd34 	bl	80017f8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e2ae      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9e:	4b92      	ldr	r3, [pc, #584]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x2a8>
 8003daa:	e014      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd fd24 	bl	80017f8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fd fd20 	bl	80017f8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e29a      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc6:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2d0>
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d060      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_OscConfig+0x310>
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d119      	bne.n	8003e22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d116      	bne.n	8003e22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df4:	4b7c      	ldr	r3, [pc, #496]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_OscConfig+0x328>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e277      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	4973      	ldr	r1, [pc, #460]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e20:	e040      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d023      	beq.n	8003e72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2a:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6e      	ldr	r2, [pc, #440]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fd fcdf 	bl	80017f8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7fd fcdb 	bl	80017f8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e255      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	495f      	ldr	r1, [pc, #380]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
 8003e70:	e018      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b5d      	ldr	r3, [pc, #372]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5c      	ldr	r2, [pc, #368]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fcbb 	bl	80017f8 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd fcb7 	bl	80017f8 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e231      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e98:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	4a4a      	ldr	r2, [pc, #296]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fc96 	bl	80017f8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fd fc92 	bl	80017f8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e20c      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee2:	4b41      	ldr	r3, [pc, #260]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ef      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x3ec>
 8003ef0:	e01b      	b.n	8003f2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef2:	4b3d      	ldr	r3, [pc, #244]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd fc79 	bl	80017f8 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fc75 	bl	80017f8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1ef      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1c:	4b32      	ldr	r3, [pc, #200]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ef      	bne.n	8003f0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a6 	beq.w	8004084 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f52:	6593      	str	r3, [r2, #88]	; 0x58
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f60:	2301      	movs	r3, #1
 8003f62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f64:	4b21      	ldr	r3, [pc, #132]	; (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d118      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f70:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7c:	f7fd fc3c 	bl	80017f8 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f84:	f7fd fc38 	bl	80017f8 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1b2      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4d8>
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fba:	e029      	b.n	8004010 <HAL_RCC_OscConfig+0x52c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d115      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x50c>
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	4a03      	ldr	r2, [pc, #12]	; (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe4:	e014      	b.n	8004010 <HAL_RCC_OscConfig+0x52c>
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	4b9a      	ldr	r3, [pc, #616]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	4a99      	ldr	r2, [pc, #612]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004000:	4b96      	ldr	r3, [pc, #600]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	4a95      	ldr	r2, [pc, #596]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d016      	beq.n	8004046 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fd fbee 	bl	80017f8 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fd fbea 	bl	80017f8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e162      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004036:	4b89      	ldr	r3, [pc, #548]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ed      	beq.n	8004020 <HAL_RCC_OscConfig+0x53c>
 8004044:	e015      	b.n	8004072 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fd fbd7 	bl	80017f8 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fd fbd3 	bl	80017f8 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e14b      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004064:	4b7d      	ldr	r3, [pc, #500]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ed      	bne.n	800404e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004072:	7ffb      	ldrb	r3, [r7, #31]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b78      	ldr	r3, [pc, #480]	; (800425c <HAL_RCC_OscConfig+0x778>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	4a77      	ldr	r2, [pc, #476]	; (800425c <HAL_RCC_OscConfig+0x778>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004082:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d03c      	beq.n	800410a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01c      	beq.n	80040d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004098:	4b70      	ldr	r3, [pc, #448]	; (800425c <HAL_RCC_OscConfig+0x778>)
 800409a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800409e:	4a6f      	ldr	r2, [pc, #444]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fd fba6 	bl	80017f8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b0:	f7fd fba2 	bl	80017f8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e11c      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c2:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80040c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ef      	beq.n	80040b0 <HAL_RCC_OscConfig+0x5cc>
 80040d0:	e01b      	b.n	800410a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040d2:	4b62      	ldr	r3, [pc, #392]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80040d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d8:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fd fb89 	bl	80017f8 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ea:	f7fd fb85 	bl	80017f8 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e0ff      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040fc:	4b57      	ldr	r3, [pc, #348]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80040fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ef      	bne.n	80040ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80f3 	beq.w	80042fa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	2b02      	cmp	r3, #2
 800411a:	f040 80c9 	bne.w	80042b0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	429a      	cmp	r2, r3
 8004130:	d12c      	bne.n	800418c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	3b01      	subs	r3, #1
 800413e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d123      	bne.n	800418c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d11b      	bne.n	800418c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d113      	bne.n	800418c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	3b01      	subs	r3, #1
 8004172:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d109      	bne.n	800418c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d06b      	beq.n	8004264 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b0c      	cmp	r3, #12
 8004190:	d062      	beq.n	8004258 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004192:	4b32      	ldr	r3, [pc, #200]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e0ac      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041a2:	4b2e      	ldr	r3, [pc, #184]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2d      	ldr	r2, [pc, #180]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80041a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041ae:	f7fd fb23 	bl	80017f8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fd fb1f 	bl	80017f8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e099      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c8:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d4:	4b21      	ldr	r3, [pc, #132]	; (800425c <HAL_RCC_OscConfig+0x778>)
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041da:	4013      	ands	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041e4:	3a01      	subs	r2, #1
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	4311      	orrs	r1, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ee:	0212      	lsls	r2, r2, #8
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041f6:	0852      	lsrs	r2, r2, #1
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0552      	lsls	r2, r2, #21
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004202:	0852      	lsrs	r2, r2, #1
 8004204:	3a01      	subs	r2, #1
 8004206:	0652      	lsls	r2, r2, #25
 8004208:	4311      	orrs	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800420e:	06d2      	lsls	r2, r2, #27
 8004210:	430a      	orrs	r2, r1
 8004212:	4912      	ldr	r1, [pc, #72]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004214:	4313      	orrs	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_OscConfig+0x778>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0f      	ldr	r2, [pc, #60]	; (800425c <HAL_RCC_OscConfig+0x778>)
 800421e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004224:	4b0d      	ldr	r3, [pc, #52]	; (800425c <HAL_RCC_OscConfig+0x778>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <HAL_RCC_OscConfig+0x778>)
 800422a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004230:	f7fd fae2 	bl	80017f8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd fade 	bl	80017f8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e058      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_RCC_OscConfig+0x778>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004256:	e050      	b.n	80042fa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e04f      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
 800425c:	40021000 	.word	0x40021000
 8004260:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d144      	bne.n	80042fa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 8004276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 8004282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004286:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004288:	f7fd fab6 	bl	80017f8 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7fd fab2 	bl	80017f8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e02c      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x7ac>
 80042ae:	e024      	b.n	80042fa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d01f      	beq.n	80042f6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 80042bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fd fa99 	bl	80017f8 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fd fa95 	bl	80017f8 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e00f      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4905      	ldr	r1, [pc, #20]	; (8004304 <HAL_RCC_OscConfig+0x820>)
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCC_OscConfig+0x824>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60cb      	str	r3, [r1, #12]
 80042f4:	e001      	b.n	80042fa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	feeefffc 	.word	0xfeeefffc

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0e7      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b75      	ldr	r3, [pc, #468]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d910      	bls.n	8004350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 0207 	bic.w	r2, r3, #7
 8004336:	4970      	ldr	r1, [pc, #448]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b6e      	ldr	r3, [pc, #440]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cf      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004368:	429a      	cmp	r2, r3
 800436a:	d908      	bls.n	800437e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436c:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4960      	ldr	r1, [pc, #384]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d04c      	beq.n	8004424 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004392:	4b5a      	ldr	r3, [pc, #360]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d121      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e0a6      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043aa:	4b54      	ldr	r3, [pc, #336]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d115      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e09a      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c2:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e08e      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e086      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043e2:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f023 0203 	bic.w	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4943      	ldr	r1, [pc, #268]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f4:	f7fd fa00 	bl	80017f8 <HAL_GetTick>
 80043f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fd f9fc 	bl	80017f8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e06e      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004412:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 020c 	and.w	r2, r3, #12
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	429a      	cmp	r2, r3
 8004422:	d1eb      	bne.n	80043fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	4b31      	ldr	r3, [pc, #196]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	429a      	cmp	r2, r3
 800443e:	d208      	bcs.n	8004452 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004440:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	492b      	ldr	r1, [pc, #172]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004452:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d210      	bcs.n	8004482 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 0207 	bic.w	r2, r3, #7
 8004468:	4923      	ldr	r1, [pc, #140]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d001      	beq.n	8004482 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e036      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4918      	ldr	r1, [pc, #96]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4910      	ldr	r1, [pc, #64]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044c0:	f000 f824 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	490b      	ldr	r1, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1f4>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80044de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1fc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd f937 	bl	8001758 <HAL_InitTick>
 80044ea:	4603      	mov	r3, r0
 80044ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80044ee:	7afb      	ldrb	r3, [r7, #11]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40021000 	.word	0x40021000
 8004500:	08007b50 	.word	0x08007b50
 8004504:	2000000c 	.word	0x2000000c
 8004508:	20000010 	.word	0x20000010

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	b089      	sub	sp, #36	; 0x24
 8004510:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451a:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004524:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x34>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d121      	bne.n	800457e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d11e      	bne.n	800457e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004540:	4b34      	ldr	r3, [pc, #208]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	e005      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800455c:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004568:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_RCC_GetSysClockFreq+0x10c>)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004570:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d102      	bne.n	800458a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_RCC_GetSysClockFreq+0x110>)
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e004      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d101      	bne.n	8004594 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004590:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_RCC_GetSysClockFreq+0x114>)
 8004592:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d134      	bne.n	8004604 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800459a:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d003      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0xac>
 80045b0:	e005      	b.n	80045be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCC_GetSysClockFreq+0x110>)
 80045b4:	617b      	str	r3, [r7, #20]
      break;
 80045b6:	e005      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_RCC_GetSysClockFreq+0x114>)
 80045ba:	617b      	str	r3, [r7, #20]
      break;
 80045bc:	e002      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	617b      	str	r3, [r7, #20]
      break;
 80045c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c4:	4b13      	ldr	r3, [pc, #76]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	3301      	adds	r3, #1
 80045d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	fb03 f202 	mul.w	r2, r3, r2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	0e5b      	lsrs	r3, r3, #25
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	3301      	adds	r3, #1
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004604:	69bb      	ldr	r3, [r7, #24]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	08007b60 	.word	0x08007b60
 800461c:	00f42400 	.word	0x00f42400
 8004620:	007a1200 	.word	0x007a1200

08004624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004630:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800463c:	f7ff f9ee 	bl	8003a1c <HAL_PWREx_GetVoltageRange>
 8004640:	6178      	str	r0, [r7, #20]
 8004642:	e014      	b.n	800466e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	4a24      	ldr	r2, [pc, #144]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6593      	str	r3, [r2, #88]	; 0x58
 8004650:	4b22      	ldr	r3, [pc, #136]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800465c:	f7ff f9de 	bl	8003a1c <HAL_PWREx_GetVoltageRange>
 8004660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004674:	d10b      	bne.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d919      	bls.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2ba0      	cmp	r3, #160	; 0xa0
 8004680:	d902      	bls.n	8004688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004682:	2302      	movs	r3, #2
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e013      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004688:	2301      	movs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e010      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d902      	bls.n	800469a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004694:	2303      	movs	r3, #3
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	e00a      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d102      	bne.n	80046a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046a0:	2302      	movs	r3, #2
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	e004      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d101      	bne.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046ac:	2301      	movs	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 0207 	bic.w	r2, r3, #7
 80046b8:	4909      	ldr	r1, [pc, #36]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40022000 	.word	0x40022000

080046e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046ec:	2300      	movs	r3, #0
 80046ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046f0:	2300      	movs	r3, #0
 80046f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d031      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004708:	d01a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800470a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800470e:	d814      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004714:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004718:	d10f      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800471a:	4b5d      	ldr	r3, [pc, #372]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4a5c      	ldr	r2, [pc, #368]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004726:	e00c      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f9ce 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004738:	e003      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	74fb      	strb	r3, [r7, #19]
      break;
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004748:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	494e      	ldr	r1, [pc, #312]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800475e:	e001      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 809e 	beq.w	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004776:	4b46      	ldr	r3, [pc, #280]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00d      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478c:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	4a3f      	ldr	r2, [pc, #252]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004796:	6593      	str	r3, [r2, #88]	; 0x58
 8004798:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a4:	2301      	movs	r3, #1
 80047a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a8:	4b3a      	ldr	r3, [pc, #232]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a39      	ldr	r2, [pc, #228]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047b4:	f7fd f820 	bl	80017f8 <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ba:	e009      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047bc:	f7fd f81c 	bl	80017f8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d902      	bls.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	74fb      	strb	r3, [r7, #19]
        break;
 80047ce:	e005      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047d0:	4b30      	ldr	r3, [pc, #192]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ef      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d15a      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047e2:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01e      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d019      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004808:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800480a:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800482a:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d016      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fc ffdc 	bl	80017f8 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004842:	e00b      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fc ffd8 	bl	80017f8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d902      	bls.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	74fb      	strb	r3, [r7, #19]
            break;
 800485a:	e006      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ec      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004886:	e009      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	74bb      	strb	r3, [r7, #18]
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489c:	7c7b      	ldrb	r3, [r7, #17]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a2:	4b8a      	ldr	r3, [pc, #552]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	4a89      	ldr	r2, [pc, #548]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ba:	4b84      	ldr	r3, [pc, #528]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 0203 	bic.w	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	4980      	ldr	r1, [pc, #512]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048dc:	4b7b      	ldr	r3, [pc, #492]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 020c 	bic.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	4978      	ldr	r1, [pc, #480]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048fe:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	496f      	ldr	r1, [pc, #444]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004920:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	4967      	ldr	r1, [pc, #412]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004942:	4b62      	ldr	r3, [pc, #392]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	495e      	ldr	r1, [pc, #376]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004964:	4b59      	ldr	r3, [pc, #356]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	4956      	ldr	r1, [pc, #344]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004986:	4b51      	ldr	r3, [pc, #324]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	494d      	ldr	r1, [pc, #308]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d028      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a8:	4b48      	ldr	r3, [pc, #288]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	4945      	ldr	r1, [pc, #276]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c6:	d106      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a3f      	ldr	r2, [pc, #252]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d2:	60d3      	str	r3, [r2, #12]
 80049d4:	e011      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049de:	d10c      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f872 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d028      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a06:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	492d      	ldr	r1, [pc, #180]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a24:	d106      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4a28      	ldr	r2, [pc, #160]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a30:	60d3      	str	r3, [r2, #12]
 8004a32:	e011      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2101      	movs	r1, #1
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f843 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01c      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	4916      	ldr	r1, [pc, #88]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f820 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	4904      	ldr	r1, [pc, #16]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000

08004ad0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ade:	4b74      	ldr	r3, [pc, #464]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aea:	4b71      	ldr	r3, [pc, #452]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0203 	and.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d10d      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
       ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b02:	4b6b      	ldr	r3, [pc, #428]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
       ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d047      	beq.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	e044      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d018      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0x86>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d825      	bhi.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d002      	beq.n	8004b32 <RCCEx_PLLSAI1_Config+0x62>
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d009      	beq.n	8004b44 <RCCEx_PLLSAI1_Config+0x74>
 8004b30:	e020      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b32:	4b5f      	ldr	r3, [pc, #380]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d11d      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b42:	e01a      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b44:	4b5a      	ldr	r3, [pc, #360]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d116      	bne.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e013      	b.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b56:	4b56      	ldr	r3, [pc, #344]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10f      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b62:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b72:	e006      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e004      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b8a:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	4943      	ldr	r1, [pc, #268]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d17c      	bne.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bac:	4b40      	ldr	r3, [pc, #256]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3f      	ldr	r2, [pc, #252]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fc fe1e 	bl	80017f8 <HAL_GetTick>
 8004bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bbe:	e009      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc0:	f7fc fe1a 	bl	80017f8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd2:	e005      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ef      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d15f      	bne.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d110      	bne.n	8004c0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bec:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004bf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68d2      	ldr	r2, [r2, #12]
 8004c02:	06d2      	lsls	r2, r2, #27
 8004c04:	430a      	orrs	r2, r1
 8004c06:	492a      	ldr	r1, [pc, #168]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	610b      	str	r3, [r1, #16]
 8004c0c:	e027      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d112      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c14:	4b26      	ldr	r3, [pc, #152]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6892      	ldr	r2, [r2, #8]
 8004c24:	0211      	lsls	r1, r2, #8
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6912      	ldr	r2, [r2, #16]
 8004c2a:	0852      	lsrs	r2, r2, #1
 8004c2c:	3a01      	subs	r2, #1
 8004c2e:	0552      	lsls	r2, r2, #21
 8004c30:	430a      	orrs	r2, r1
 8004c32:	491f      	ldr	r1, [pc, #124]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	610b      	str	r3, [r1, #16]
 8004c38:	e011      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6892      	ldr	r2, [r2, #8]
 8004c4a:	0211      	lsls	r1, r2, #8
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6952      	ldr	r2, [r2, #20]
 8004c50:	0852      	lsrs	r2, r2, #1
 8004c52:	3a01      	subs	r2, #1
 8004c54:	0652      	lsls	r2, r2, #25
 8004c56:	430a      	orrs	r2, r1
 8004c58:	4915      	ldr	r1, [pc, #84]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6a:	f7fc fdc5 	bl	80017f8 <HAL_GetTick>
 8004c6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c70:	e009      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c72:	f7fc fdc1 	bl	80017f8 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d902      	bls.n	8004c86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	73fb      	strb	r3, [r7, #15]
          break;
 8004c84:	e005      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ef      	beq.n	8004c72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <__errno>:
 8004cb4:	4b01      	ldr	r3, [pc, #4]	; (8004cbc <__errno+0x8>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000018 	.word	0x20000018

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4d0d      	ldr	r5, [pc, #52]	; (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	; (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2600      	movs	r6, #0
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4d0b      	ldr	r5, [pc, #44]	; (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	; (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f002 ff04 	bl	8007ae0 <_init>
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2600      	movs	r6, #0
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08007f6c 	.word	0x08007f6c
 8004cfc:	08007f6c 	.word	0x08007f6c
 8004d00:	08007f6c 	.word	0x08007f6c
 8004d04:	08007f70 	.word	0x08007f70

08004d08 <memset>:
 8004d08:	4402      	add	r2, r0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <memset+0xa>
 8004d10:	4770      	bx	lr
 8004d12:	f803 1b01 	strb.w	r1, [r3], #1
 8004d16:	e7f9      	b.n	8004d0c <memset+0x4>

08004d18 <__cvt>:
 8004d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	ec55 4b10 	vmov	r4, r5, d0
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	460e      	mov	r6, r1
 8004d24:	4619      	mov	r1, r3
 8004d26:	462b      	mov	r3, r5
 8004d28:	bfbb      	ittet	lt
 8004d2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d2e:	461d      	movlt	r5, r3
 8004d30:	2300      	movge	r3, #0
 8004d32:	232d      	movlt	r3, #45	; 0x2d
 8004d34:	700b      	strb	r3, [r1, #0]
 8004d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d3c:	4691      	mov	r9, r2
 8004d3e:	f023 0820 	bic.w	r8, r3, #32
 8004d42:	bfbc      	itt	lt
 8004d44:	4622      	movlt	r2, r4
 8004d46:	4614      	movlt	r4, r2
 8004d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d4c:	d005      	beq.n	8004d5a <__cvt+0x42>
 8004d4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d52:	d100      	bne.n	8004d56 <__cvt+0x3e>
 8004d54:	3601      	adds	r6, #1
 8004d56:	2102      	movs	r1, #2
 8004d58:	e000      	b.n	8004d5c <__cvt+0x44>
 8004d5a:	2103      	movs	r1, #3
 8004d5c:	ab03      	add	r3, sp, #12
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	ab02      	add	r3, sp, #8
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	ec45 4b10 	vmov	d0, r4, r5
 8004d68:	4653      	mov	r3, sl
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	f000 fcec 	bl	8005748 <_dtoa_r>
 8004d70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d74:	4607      	mov	r7, r0
 8004d76:	d102      	bne.n	8004d7e <__cvt+0x66>
 8004d78:	f019 0f01 	tst.w	r9, #1
 8004d7c:	d022      	beq.n	8004dc4 <__cvt+0xac>
 8004d7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d82:	eb07 0906 	add.w	r9, r7, r6
 8004d86:	d110      	bne.n	8004daa <__cvt+0x92>
 8004d88:	783b      	ldrb	r3, [r7, #0]
 8004d8a:	2b30      	cmp	r3, #48	; 0x30
 8004d8c:	d10a      	bne.n	8004da4 <__cvt+0x8c>
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2300      	movs	r3, #0
 8004d92:	4620      	mov	r0, r4
 8004d94:	4629      	mov	r1, r5
 8004d96:	f7fb fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d9a:	b918      	cbnz	r0, 8004da4 <__cvt+0x8c>
 8004d9c:	f1c6 0601 	rsb	r6, r6, #1
 8004da0:	f8ca 6000 	str.w	r6, [sl]
 8004da4:	f8da 3000 	ldr.w	r3, [sl]
 8004da8:	4499      	add	r9, r3
 8004daa:	2200      	movs	r2, #0
 8004dac:	2300      	movs	r3, #0
 8004dae:	4620      	mov	r0, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8004db6:	b108      	cbz	r0, 8004dbc <__cvt+0xa4>
 8004db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dbc:	2230      	movs	r2, #48	; 0x30
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	454b      	cmp	r3, r9
 8004dc2:	d307      	bcc.n	8004dd4 <__cvt+0xbc>
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dc8:	1bdb      	subs	r3, r3, r7
 8004dca:	4638      	mov	r0, r7
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	b004      	add	sp, #16
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	1c59      	adds	r1, r3, #1
 8004dd6:	9103      	str	r1, [sp, #12]
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e7f0      	b.n	8004dbe <__cvt+0xa6>

08004ddc <__exponent>:
 8004ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dde:	4603      	mov	r3, r0
 8004de0:	2900      	cmp	r1, #0
 8004de2:	bfb8      	it	lt
 8004de4:	4249      	neglt	r1, r1
 8004de6:	f803 2b02 	strb.w	r2, [r3], #2
 8004dea:	bfb4      	ite	lt
 8004dec:	222d      	movlt	r2, #45	; 0x2d
 8004dee:	222b      	movge	r2, #43	; 0x2b
 8004df0:	2909      	cmp	r1, #9
 8004df2:	7042      	strb	r2, [r0, #1]
 8004df4:	dd2a      	ble.n	8004e4c <__exponent+0x70>
 8004df6:	f10d 0407 	add.w	r4, sp, #7
 8004dfa:	46a4      	mov	ip, r4
 8004dfc:	270a      	movs	r7, #10
 8004dfe:	46a6      	mov	lr, r4
 8004e00:	460a      	mov	r2, r1
 8004e02:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e06:	fb07 1516 	mls	r5, r7, r6, r1
 8004e0a:	3530      	adds	r5, #48	; 0x30
 8004e0c:	2a63      	cmp	r2, #99	; 0x63
 8004e0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e16:	4631      	mov	r1, r6
 8004e18:	dcf1      	bgt.n	8004dfe <__exponent+0x22>
 8004e1a:	3130      	adds	r1, #48	; 0x30
 8004e1c:	f1ae 0502 	sub.w	r5, lr, #2
 8004e20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e24:	1c44      	adds	r4, r0, #1
 8004e26:	4629      	mov	r1, r5
 8004e28:	4561      	cmp	r1, ip
 8004e2a:	d30a      	bcc.n	8004e42 <__exponent+0x66>
 8004e2c:	f10d 0209 	add.w	r2, sp, #9
 8004e30:	eba2 020e 	sub.w	r2, r2, lr
 8004e34:	4565      	cmp	r5, ip
 8004e36:	bf88      	it	hi
 8004e38:	2200      	movhi	r2, #0
 8004e3a:	4413      	add	r3, r2
 8004e3c:	1a18      	subs	r0, r3, r0
 8004e3e:	b003      	add	sp, #12
 8004e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e4a:	e7ed      	b.n	8004e28 <__exponent+0x4c>
 8004e4c:	2330      	movs	r3, #48	; 0x30
 8004e4e:	3130      	adds	r1, #48	; 0x30
 8004e50:	7083      	strb	r3, [r0, #2]
 8004e52:	70c1      	strb	r1, [r0, #3]
 8004e54:	1d03      	adds	r3, r0, #4
 8004e56:	e7f1      	b.n	8004e3c <__exponent+0x60>

08004e58 <_printf_float>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	ed2d 8b02 	vpush	{d8}
 8004e60:	b08d      	sub	sp, #52	; 0x34
 8004e62:	460c      	mov	r4, r1
 8004e64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e68:	4616      	mov	r6, r2
 8004e6a:	461f      	mov	r7, r3
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	f001 fa59 	bl	8006324 <_localeconv_r>
 8004e72:	f8d0 a000 	ldr.w	sl, [r0]
 8004e76:	4650      	mov	r0, sl
 8004e78:	f7fb f9aa 	bl	80001d0 <strlen>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	9305      	str	r3, [sp, #20]
 8004e84:	f8d8 3000 	ldr.w	r3, [r8]
 8004e88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e8c:	3307      	adds	r3, #7
 8004e8e:	f023 0307 	bic.w	r3, r3, #7
 8004e92:	f103 0208 	add.w	r2, r3, #8
 8004e96:	f8c8 2000 	str.w	r2, [r8]
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ea2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004eaa:	9307      	str	r3, [sp, #28]
 8004eac:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eb0:	ee08 0a10 	vmov	s16, r0
 8004eb4:	4b9f      	ldr	r3, [pc, #636]	; (8005134 <_printf_float+0x2dc>)
 8004eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	f7fb fe35 	bl	8000b2c <__aeabi_dcmpun>
 8004ec2:	bb88      	cbnz	r0, 8004f28 <_printf_float+0xd0>
 8004ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec8:	4b9a      	ldr	r3, [pc, #616]	; (8005134 <_printf_float+0x2dc>)
 8004eca:	f04f 32ff 	mov.w	r2, #4294967295
 8004ece:	f7fb fe0f 	bl	8000af0 <__aeabi_dcmple>
 8004ed2:	bb48      	cbnz	r0, 8004f28 <_printf_float+0xd0>
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	4640      	mov	r0, r8
 8004eda:	4649      	mov	r1, r9
 8004edc:	f7fb fdfe 	bl	8000adc <__aeabi_dcmplt>
 8004ee0:	b110      	cbz	r0, 8004ee8 <_printf_float+0x90>
 8004ee2:	232d      	movs	r3, #45	; 0x2d
 8004ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee8:	4b93      	ldr	r3, [pc, #588]	; (8005138 <_printf_float+0x2e0>)
 8004eea:	4894      	ldr	r0, [pc, #592]	; (800513c <_printf_float+0x2e4>)
 8004eec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ef0:	bf94      	ite	ls
 8004ef2:	4698      	movls	r8, r3
 8004ef4:	4680      	movhi	r8, r0
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	6123      	str	r3, [r4, #16]
 8004efa:	9b05      	ldr	r3, [sp, #20]
 8004efc:	f023 0204 	bic.w	r2, r3, #4
 8004f00:	6022      	str	r2, [r4, #0]
 8004f02:	f04f 0900 	mov.w	r9, #0
 8004f06:	9700      	str	r7, [sp, #0]
 8004f08:	4633      	mov	r3, r6
 8004f0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 f9d8 	bl	80052c4 <_printf_common>
 8004f14:	3001      	adds	r0, #1
 8004f16:	f040 8090 	bne.w	800503a <_printf_float+0x1e2>
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	b00d      	add	sp, #52	; 0x34
 8004f20:	ecbd 8b02 	vpop	{d8}
 8004f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb fdfc 	bl	8000b2c <__aeabi_dcmpun>
 8004f34:	b140      	cbz	r0, 8004f48 <_printf_float+0xf0>
 8004f36:	464b      	mov	r3, r9
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfbc      	itt	lt
 8004f3c:	232d      	movlt	r3, #45	; 0x2d
 8004f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f42:	487f      	ldr	r0, [pc, #508]	; (8005140 <_printf_float+0x2e8>)
 8004f44:	4b7f      	ldr	r3, [pc, #508]	; (8005144 <_printf_float+0x2ec>)
 8004f46:	e7d1      	b.n	8004eec <_printf_float+0x94>
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f4e:	9206      	str	r2, [sp, #24]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	d13f      	bne.n	8004fd4 <_printf_float+0x17c>
 8004f54:	2306      	movs	r3, #6
 8004f56:	6063      	str	r3, [r4, #4]
 8004f58:	9b05      	ldr	r3, [sp, #20]
 8004f5a:	6861      	ldr	r1, [r4, #4]
 8004f5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f60:	2300      	movs	r3, #0
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	ab0a      	add	r3, sp, #40	; 0x28
 8004f66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f6a:	ab09      	add	r3, sp, #36	; 0x24
 8004f6c:	ec49 8b10 	vmov	d0, r8, r9
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	6022      	str	r2, [r4, #0]
 8004f74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f7ff fecd 	bl	8004d18 <__cvt>
 8004f7e:	9b06      	ldr	r3, [sp, #24]
 8004f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f82:	2b47      	cmp	r3, #71	; 0x47
 8004f84:	4680      	mov	r8, r0
 8004f86:	d108      	bne.n	8004f9a <_printf_float+0x142>
 8004f88:	1cc8      	adds	r0, r1, #3
 8004f8a:	db02      	blt.n	8004f92 <_printf_float+0x13a>
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	4299      	cmp	r1, r3
 8004f90:	dd41      	ble.n	8005016 <_printf_float+0x1be>
 8004f92:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f96:	fa5f fb8b 	uxtb.w	fp, fp
 8004f9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f9e:	d820      	bhi.n	8004fe2 <_printf_float+0x18a>
 8004fa0:	3901      	subs	r1, #1
 8004fa2:	465a      	mov	r2, fp
 8004fa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fa8:	9109      	str	r1, [sp, #36]	; 0x24
 8004faa:	f7ff ff17 	bl	8004ddc <__exponent>
 8004fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fb0:	1813      	adds	r3, r2, r0
 8004fb2:	2a01      	cmp	r2, #1
 8004fb4:	4681      	mov	r9, r0
 8004fb6:	6123      	str	r3, [r4, #16]
 8004fb8:	dc02      	bgt.n	8004fc0 <_printf_float+0x168>
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	07d2      	lsls	r2, r2, #31
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_float+0x16c>
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d09c      	beq.n	8004f06 <_printf_float+0xae>
 8004fcc:	232d      	movs	r3, #45	; 0x2d
 8004fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd2:	e798      	b.n	8004f06 <_printf_float+0xae>
 8004fd4:	9a06      	ldr	r2, [sp, #24]
 8004fd6:	2a47      	cmp	r2, #71	; 0x47
 8004fd8:	d1be      	bne.n	8004f58 <_printf_float+0x100>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1bc      	bne.n	8004f58 <_printf_float+0x100>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e7b9      	b.n	8004f56 <_printf_float+0xfe>
 8004fe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fe6:	d118      	bne.n	800501a <_printf_float+0x1c2>
 8004fe8:	2900      	cmp	r1, #0
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	dd0b      	ble.n	8005006 <_printf_float+0x1ae>
 8004fee:	6121      	str	r1, [r4, #16]
 8004ff0:	b913      	cbnz	r3, 8004ff8 <_printf_float+0x1a0>
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	07d0      	lsls	r0, r2, #31
 8004ff6:	d502      	bpl.n	8004ffe <_printf_float+0x1a6>
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	440b      	add	r3, r1
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005000:	f04f 0900 	mov.w	r9, #0
 8005004:	e7de      	b.n	8004fc4 <_printf_float+0x16c>
 8005006:	b913      	cbnz	r3, 800500e <_printf_float+0x1b6>
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	07d2      	lsls	r2, r2, #31
 800500c:	d501      	bpl.n	8005012 <_printf_float+0x1ba>
 800500e:	3302      	adds	r3, #2
 8005010:	e7f4      	b.n	8004ffc <_printf_float+0x1a4>
 8005012:	2301      	movs	r3, #1
 8005014:	e7f2      	b.n	8004ffc <_printf_float+0x1a4>
 8005016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800501a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800501c:	4299      	cmp	r1, r3
 800501e:	db05      	blt.n	800502c <_printf_float+0x1d4>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	6121      	str	r1, [r4, #16]
 8005024:	07d8      	lsls	r0, r3, #31
 8005026:	d5ea      	bpl.n	8004ffe <_printf_float+0x1a6>
 8005028:	1c4b      	adds	r3, r1, #1
 800502a:	e7e7      	b.n	8004ffc <_printf_float+0x1a4>
 800502c:	2900      	cmp	r1, #0
 800502e:	bfd4      	ite	le
 8005030:	f1c1 0202 	rsble	r2, r1, #2
 8005034:	2201      	movgt	r2, #1
 8005036:	4413      	add	r3, r2
 8005038:	e7e0      	b.n	8004ffc <_printf_float+0x1a4>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	055a      	lsls	r2, r3, #21
 800503e:	d407      	bmi.n	8005050 <_printf_float+0x1f8>
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	4642      	mov	r2, r8
 8005044:	4631      	mov	r1, r6
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	d12c      	bne.n	80050a8 <_printf_float+0x250>
 800504e:	e764      	b.n	8004f1a <_printf_float+0xc2>
 8005050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005054:	f240 80e0 	bls.w	8005218 <_printf_float+0x3c0>
 8005058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800505c:	2200      	movs	r2, #0
 800505e:	2300      	movs	r3, #0
 8005060:	f7fb fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8005064:	2800      	cmp	r0, #0
 8005066:	d034      	beq.n	80050d2 <_printf_float+0x27a>
 8005068:	4a37      	ldr	r2, [pc, #220]	; (8005148 <_printf_float+0x2f0>)
 800506a:	2301      	movs	r3, #1
 800506c:	4631      	mov	r1, r6
 800506e:	4628      	mov	r0, r5
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f43f af51 	beq.w	8004f1a <_printf_float+0xc2>
 8005078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800507c:	429a      	cmp	r2, r3
 800507e:	db02      	blt.n	8005086 <_printf_float+0x22e>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	07d8      	lsls	r0, r3, #31
 8005084:	d510      	bpl.n	80050a8 <_printf_float+0x250>
 8005086:	ee18 3a10 	vmov	r3, s16
 800508a:	4652      	mov	r2, sl
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f af41 	beq.w	8004f1a <_printf_float+0xc2>
 8005098:	f04f 0800 	mov.w	r8, #0
 800509c:	f104 091a 	add.w	r9, r4, #26
 80050a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a2:	3b01      	subs	r3, #1
 80050a4:	4543      	cmp	r3, r8
 80050a6:	dc09      	bgt.n	80050bc <_printf_float+0x264>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	079b      	lsls	r3, r3, #30
 80050ac:	f100 8105 	bmi.w	80052ba <_printf_float+0x462>
 80050b0:	68e0      	ldr	r0, [r4, #12]
 80050b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050b4:	4298      	cmp	r0, r3
 80050b6:	bfb8      	it	lt
 80050b8:	4618      	movlt	r0, r3
 80050ba:	e730      	b.n	8004f1e <_printf_float+0xc6>
 80050bc:	2301      	movs	r3, #1
 80050be:	464a      	mov	r2, r9
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b8      	blx	r7
 80050c6:	3001      	adds	r0, #1
 80050c8:	f43f af27 	beq.w	8004f1a <_printf_float+0xc2>
 80050cc:	f108 0801 	add.w	r8, r8, #1
 80050d0:	e7e6      	b.n	80050a0 <_printf_float+0x248>
 80050d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	dc39      	bgt.n	800514c <_printf_float+0x2f4>
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <_printf_float+0x2f0>)
 80050da:	2301      	movs	r3, #1
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af19 	beq.w	8004f1a <_printf_float+0xc2>
 80050e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ec:	4313      	orrs	r3, r2
 80050ee:	d102      	bne.n	80050f6 <_printf_float+0x29e>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	07d9      	lsls	r1, r3, #31
 80050f4:	d5d8      	bpl.n	80050a8 <_printf_float+0x250>
 80050f6:	ee18 3a10 	vmov	r3, s16
 80050fa:	4652      	mov	r2, sl
 80050fc:	4631      	mov	r1, r6
 80050fe:	4628      	mov	r0, r5
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	f43f af09 	beq.w	8004f1a <_printf_float+0xc2>
 8005108:	f04f 0900 	mov.w	r9, #0
 800510c:	f104 0a1a 	add.w	sl, r4, #26
 8005110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005112:	425b      	negs	r3, r3
 8005114:	454b      	cmp	r3, r9
 8005116:	dc01      	bgt.n	800511c <_printf_float+0x2c4>
 8005118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511a:	e792      	b.n	8005042 <_printf_float+0x1ea>
 800511c:	2301      	movs	r3, #1
 800511e:	4652      	mov	r2, sl
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	f43f aef7 	beq.w	8004f1a <_printf_float+0xc2>
 800512c:	f109 0901 	add.w	r9, r9, #1
 8005130:	e7ee      	b.n	8005110 <_printf_float+0x2b8>
 8005132:	bf00      	nop
 8005134:	7fefffff 	.word	0x7fefffff
 8005138:	08007b94 	.word	0x08007b94
 800513c:	08007b98 	.word	0x08007b98
 8005140:	08007ba0 	.word	0x08007ba0
 8005144:	08007b9c 	.word	0x08007b9c
 8005148:	08007ba4 	.word	0x08007ba4
 800514c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800514e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005150:	429a      	cmp	r2, r3
 8005152:	bfa8      	it	ge
 8005154:	461a      	movge	r2, r3
 8005156:	2a00      	cmp	r2, #0
 8005158:	4691      	mov	r9, r2
 800515a:	dc37      	bgt.n	80051cc <_printf_float+0x374>
 800515c:	f04f 0b00 	mov.w	fp, #0
 8005160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005164:	f104 021a 	add.w	r2, r4, #26
 8005168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800516a:	9305      	str	r3, [sp, #20]
 800516c:	eba3 0309 	sub.w	r3, r3, r9
 8005170:	455b      	cmp	r3, fp
 8005172:	dc33      	bgt.n	80051dc <_printf_float+0x384>
 8005174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005178:	429a      	cmp	r2, r3
 800517a:	db3b      	blt.n	80051f4 <_printf_float+0x39c>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	07da      	lsls	r2, r3, #31
 8005180:	d438      	bmi.n	80051f4 <_printf_float+0x39c>
 8005182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005184:	9a05      	ldr	r2, [sp, #20]
 8005186:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005188:	1a9a      	subs	r2, r3, r2
 800518a:	eba3 0901 	sub.w	r9, r3, r1
 800518e:	4591      	cmp	r9, r2
 8005190:	bfa8      	it	ge
 8005192:	4691      	movge	r9, r2
 8005194:	f1b9 0f00 	cmp.w	r9, #0
 8005198:	dc35      	bgt.n	8005206 <_printf_float+0x3ae>
 800519a:	f04f 0800 	mov.w	r8, #0
 800519e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051a2:	f104 0a1a 	add.w	sl, r4, #26
 80051a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	eba3 0309 	sub.w	r3, r3, r9
 80051b0:	4543      	cmp	r3, r8
 80051b2:	f77f af79 	ble.w	80050a8 <_printf_float+0x250>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4652      	mov	r2, sl
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f aeaa 	beq.w	8004f1a <_printf_float+0xc2>
 80051c6:	f108 0801 	add.w	r8, r8, #1
 80051ca:	e7ec      	b.n	80051a6 <_printf_float+0x34e>
 80051cc:	4613      	mov	r3, r2
 80051ce:	4631      	mov	r1, r6
 80051d0:	4642      	mov	r2, r8
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	d1c0      	bne.n	800515c <_printf_float+0x304>
 80051da:	e69e      	b.n	8004f1a <_printf_float+0xc2>
 80051dc:	2301      	movs	r3, #1
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	9205      	str	r2, [sp, #20]
 80051e4:	47b8      	blx	r7
 80051e6:	3001      	adds	r0, #1
 80051e8:	f43f ae97 	beq.w	8004f1a <_printf_float+0xc2>
 80051ec:	9a05      	ldr	r2, [sp, #20]
 80051ee:	f10b 0b01 	add.w	fp, fp, #1
 80051f2:	e7b9      	b.n	8005168 <_printf_float+0x310>
 80051f4:	ee18 3a10 	vmov	r3, s16
 80051f8:	4652      	mov	r2, sl
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	d1be      	bne.n	8005182 <_printf_float+0x32a>
 8005204:	e689      	b.n	8004f1a <_printf_float+0xc2>
 8005206:	9a05      	ldr	r2, [sp, #20]
 8005208:	464b      	mov	r3, r9
 800520a:	4442      	add	r2, r8
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	d1c1      	bne.n	800519a <_printf_float+0x342>
 8005216:	e680      	b.n	8004f1a <_printf_float+0xc2>
 8005218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800521a:	2a01      	cmp	r2, #1
 800521c:	dc01      	bgt.n	8005222 <_printf_float+0x3ca>
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d538      	bpl.n	8005294 <_printf_float+0x43c>
 8005222:	2301      	movs	r3, #1
 8005224:	4642      	mov	r2, r8
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	f43f ae74 	beq.w	8004f1a <_printf_float+0xc2>
 8005232:	ee18 3a10 	vmov	r3, s16
 8005236:	4652      	mov	r2, sl
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f ae6b 	beq.w	8004f1a <_printf_float+0xc2>
 8005244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005248:	2200      	movs	r2, #0
 800524a:	2300      	movs	r3, #0
 800524c:	f7fb fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005250:	b9d8      	cbnz	r0, 800528a <_printf_float+0x432>
 8005252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005254:	f108 0201 	add.w	r2, r8, #1
 8005258:	3b01      	subs	r3, #1
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	d10e      	bne.n	8005282 <_printf_float+0x42a>
 8005264:	e659      	b.n	8004f1a <_printf_float+0xc2>
 8005266:	2301      	movs	r3, #1
 8005268:	4652      	mov	r2, sl
 800526a:	4631      	mov	r1, r6
 800526c:	4628      	mov	r0, r5
 800526e:	47b8      	blx	r7
 8005270:	3001      	adds	r0, #1
 8005272:	f43f ae52 	beq.w	8004f1a <_printf_float+0xc2>
 8005276:	f108 0801 	add.w	r8, r8, #1
 800527a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800527c:	3b01      	subs	r3, #1
 800527e:	4543      	cmp	r3, r8
 8005280:	dcf1      	bgt.n	8005266 <_printf_float+0x40e>
 8005282:	464b      	mov	r3, r9
 8005284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005288:	e6dc      	b.n	8005044 <_printf_float+0x1ec>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	f104 0a1a 	add.w	sl, r4, #26
 8005292:	e7f2      	b.n	800527a <_printf_float+0x422>
 8005294:	2301      	movs	r3, #1
 8005296:	4642      	mov	r2, r8
 8005298:	e7df      	b.n	800525a <_printf_float+0x402>
 800529a:	2301      	movs	r3, #1
 800529c:	464a      	mov	r2, r9
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f ae38 	beq.w	8004f1a <_printf_float+0xc2>
 80052aa:	f108 0801 	add.w	r8, r8, #1
 80052ae:	68e3      	ldr	r3, [r4, #12]
 80052b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052b2:	1a5b      	subs	r3, r3, r1
 80052b4:	4543      	cmp	r3, r8
 80052b6:	dcf0      	bgt.n	800529a <_printf_float+0x442>
 80052b8:	e6fa      	b.n	80050b0 <_printf_float+0x258>
 80052ba:	f04f 0800 	mov.w	r8, #0
 80052be:	f104 0919 	add.w	r9, r4, #25
 80052c2:	e7f4      	b.n	80052ae <_printf_float+0x456>

080052c4 <_printf_common>:
 80052c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	4616      	mov	r6, r2
 80052ca:	4699      	mov	r9, r3
 80052cc:	688a      	ldr	r2, [r1, #8]
 80052ce:	690b      	ldr	r3, [r1, #16]
 80052d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bfb8      	it	lt
 80052d8:	4613      	movlt	r3, r2
 80052da:	6033      	str	r3, [r6, #0]
 80052dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e0:	4607      	mov	r7, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	b10a      	cbz	r2, 80052ea <_printf_common+0x26>
 80052e6:	3301      	adds	r3, #1
 80052e8:	6033      	str	r3, [r6, #0]
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	0699      	lsls	r1, r3, #26
 80052ee:	bf42      	ittt	mi
 80052f0:	6833      	ldrmi	r3, [r6, #0]
 80052f2:	3302      	addmi	r3, #2
 80052f4:	6033      	strmi	r3, [r6, #0]
 80052f6:	6825      	ldr	r5, [r4, #0]
 80052f8:	f015 0506 	ands.w	r5, r5, #6
 80052fc:	d106      	bne.n	800530c <_printf_common+0x48>
 80052fe:	f104 0a19 	add.w	sl, r4, #25
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	6832      	ldr	r2, [r6, #0]
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	42ab      	cmp	r3, r5
 800530a:	dc26      	bgt.n	800535a <_printf_common+0x96>
 800530c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005310:	1e13      	subs	r3, r2, #0
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	bf18      	it	ne
 8005316:	2301      	movne	r3, #1
 8005318:	0692      	lsls	r2, r2, #26
 800531a:	d42b      	bmi.n	8005374 <_printf_common+0xb0>
 800531c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005320:	4649      	mov	r1, r9
 8005322:	4638      	mov	r0, r7
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d01e      	beq.n	8005368 <_printf_common+0xa4>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	68e5      	ldr	r5, [r4, #12]
 800532e:	6832      	ldr	r2, [r6, #0]
 8005330:	f003 0306 	and.w	r3, r3, #6
 8005334:	2b04      	cmp	r3, #4
 8005336:	bf08      	it	eq
 8005338:	1aad      	subeq	r5, r5, r2
 800533a:	68a3      	ldr	r3, [r4, #8]
 800533c:	6922      	ldr	r2, [r4, #16]
 800533e:	bf0c      	ite	eq
 8005340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005344:	2500      	movne	r5, #0
 8005346:	4293      	cmp	r3, r2
 8005348:	bfc4      	itt	gt
 800534a:	1a9b      	subgt	r3, r3, r2
 800534c:	18ed      	addgt	r5, r5, r3
 800534e:	2600      	movs	r6, #0
 8005350:	341a      	adds	r4, #26
 8005352:	42b5      	cmp	r5, r6
 8005354:	d11a      	bne.n	800538c <_printf_common+0xc8>
 8005356:	2000      	movs	r0, #0
 8005358:	e008      	b.n	800536c <_printf_common+0xa8>
 800535a:	2301      	movs	r3, #1
 800535c:	4652      	mov	r2, sl
 800535e:	4649      	mov	r1, r9
 8005360:	4638      	mov	r0, r7
 8005362:	47c0      	blx	r8
 8005364:	3001      	adds	r0, #1
 8005366:	d103      	bne.n	8005370 <_printf_common+0xac>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	3501      	adds	r5, #1
 8005372:	e7c6      	b.n	8005302 <_printf_common+0x3e>
 8005374:	18e1      	adds	r1, r4, r3
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	2030      	movs	r0, #48	; 0x30
 800537a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800537e:	4422      	add	r2, r4
 8005380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005388:	3302      	adds	r3, #2
 800538a:	e7c7      	b.n	800531c <_printf_common+0x58>
 800538c:	2301      	movs	r3, #1
 800538e:	4622      	mov	r2, r4
 8005390:	4649      	mov	r1, r9
 8005392:	4638      	mov	r0, r7
 8005394:	47c0      	blx	r8
 8005396:	3001      	adds	r0, #1
 8005398:	d0e6      	beq.n	8005368 <_printf_common+0xa4>
 800539a:	3601      	adds	r6, #1
 800539c:	e7d9      	b.n	8005352 <_printf_common+0x8e>
	...

080053a0 <_printf_i>:
 80053a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a4:	7e0f      	ldrb	r7, [r1, #24]
 80053a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053a8:	2f78      	cmp	r7, #120	; 0x78
 80053aa:	4691      	mov	r9, r2
 80053ac:	4680      	mov	r8, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	469a      	mov	sl, r3
 80053b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053b6:	d807      	bhi.n	80053c8 <_printf_i+0x28>
 80053b8:	2f62      	cmp	r7, #98	; 0x62
 80053ba:	d80a      	bhi.n	80053d2 <_printf_i+0x32>
 80053bc:	2f00      	cmp	r7, #0
 80053be:	f000 80d8 	beq.w	8005572 <_printf_i+0x1d2>
 80053c2:	2f58      	cmp	r7, #88	; 0x58
 80053c4:	f000 80a3 	beq.w	800550e <_printf_i+0x16e>
 80053c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d0:	e03a      	b.n	8005448 <_printf_i+0xa8>
 80053d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053d6:	2b15      	cmp	r3, #21
 80053d8:	d8f6      	bhi.n	80053c8 <_printf_i+0x28>
 80053da:	a101      	add	r1, pc, #4	; (adr r1, 80053e0 <_printf_i+0x40>)
 80053dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e0:	08005439 	.word	0x08005439
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	080053c9 	.word	0x080053c9
 80053ec:	080053c9 	.word	0x080053c9
 80053f0:	080053c9 	.word	0x080053c9
 80053f4:	080053c9 	.word	0x080053c9
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	080053c9 	.word	0x080053c9
 8005400:	080053c9 	.word	0x080053c9
 8005404:	080053c9 	.word	0x080053c9
 8005408:	080053c9 	.word	0x080053c9
 800540c:	08005559 	.word	0x08005559
 8005410:	0800547d 	.word	0x0800547d
 8005414:	0800553b 	.word	0x0800553b
 8005418:	080053c9 	.word	0x080053c9
 800541c:	080053c9 	.word	0x080053c9
 8005420:	0800557b 	.word	0x0800557b
 8005424:	080053c9 	.word	0x080053c9
 8005428:	0800547d 	.word	0x0800547d
 800542c:	080053c9 	.word	0x080053c9
 8005430:	080053c9 	.word	0x080053c9
 8005434:	08005543 	.word	0x08005543
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	1d1a      	adds	r2, r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	602a      	str	r2, [r5, #0]
 8005440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005448:	2301      	movs	r3, #1
 800544a:	e0a3      	b.n	8005594 <_printf_i+0x1f4>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	6829      	ldr	r1, [r5, #0]
 8005450:	0606      	lsls	r6, r0, #24
 8005452:	f101 0304 	add.w	r3, r1, #4
 8005456:	d50a      	bpl.n	800546e <_printf_i+0xce>
 8005458:	680e      	ldr	r6, [r1, #0]
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	2e00      	cmp	r6, #0
 800545e:	da03      	bge.n	8005468 <_printf_i+0xc8>
 8005460:	232d      	movs	r3, #45	; 0x2d
 8005462:	4276      	negs	r6, r6
 8005464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005468:	485e      	ldr	r0, [pc, #376]	; (80055e4 <_printf_i+0x244>)
 800546a:	230a      	movs	r3, #10
 800546c:	e019      	b.n	80054a2 <_printf_i+0x102>
 800546e:	680e      	ldr	r6, [r1, #0]
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005476:	bf18      	it	ne
 8005478:	b236      	sxthne	r6, r6
 800547a:	e7ef      	b.n	800545c <_printf_i+0xbc>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	1d19      	adds	r1, r3, #4
 8005482:	6029      	str	r1, [r5, #0]
 8005484:	0601      	lsls	r1, r0, #24
 8005486:	d501      	bpl.n	800548c <_printf_i+0xec>
 8005488:	681e      	ldr	r6, [r3, #0]
 800548a:	e002      	b.n	8005492 <_printf_i+0xf2>
 800548c:	0646      	lsls	r6, r0, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0xe8>
 8005490:	881e      	ldrh	r6, [r3, #0]
 8005492:	4854      	ldr	r0, [pc, #336]	; (80055e4 <_printf_i+0x244>)
 8005494:	2f6f      	cmp	r7, #111	; 0x6f
 8005496:	bf0c      	ite	eq
 8005498:	2308      	moveq	r3, #8
 800549a:	230a      	movne	r3, #10
 800549c:	2100      	movs	r1, #0
 800549e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054a2:	6865      	ldr	r5, [r4, #4]
 80054a4:	60a5      	str	r5, [r4, #8]
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	bfa2      	ittt	ge
 80054aa:	6821      	ldrge	r1, [r4, #0]
 80054ac:	f021 0104 	bicge.w	r1, r1, #4
 80054b0:	6021      	strge	r1, [r4, #0]
 80054b2:	b90e      	cbnz	r6, 80054b8 <_printf_i+0x118>
 80054b4:	2d00      	cmp	r5, #0
 80054b6:	d04d      	beq.n	8005554 <_printf_i+0x1b4>
 80054b8:	4615      	mov	r5, r2
 80054ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80054be:	fb03 6711 	mls	r7, r3, r1, r6
 80054c2:	5dc7      	ldrb	r7, [r0, r7]
 80054c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054c8:	4637      	mov	r7, r6
 80054ca:	42bb      	cmp	r3, r7
 80054cc:	460e      	mov	r6, r1
 80054ce:	d9f4      	bls.n	80054ba <_printf_i+0x11a>
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d10b      	bne.n	80054ec <_printf_i+0x14c>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	07de      	lsls	r6, r3, #31
 80054d8:	d508      	bpl.n	80054ec <_printf_i+0x14c>
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	6861      	ldr	r1, [r4, #4]
 80054de:	4299      	cmp	r1, r3
 80054e0:	bfde      	ittt	le
 80054e2:	2330      	movle	r3, #48	; 0x30
 80054e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054ec:	1b52      	subs	r2, r2, r5
 80054ee:	6122      	str	r2, [r4, #16]
 80054f0:	f8cd a000 	str.w	sl, [sp]
 80054f4:	464b      	mov	r3, r9
 80054f6:	aa03      	add	r2, sp, #12
 80054f8:	4621      	mov	r1, r4
 80054fa:	4640      	mov	r0, r8
 80054fc:	f7ff fee2 	bl	80052c4 <_printf_common>
 8005500:	3001      	adds	r0, #1
 8005502:	d14c      	bne.n	800559e <_printf_i+0x1fe>
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	b004      	add	sp, #16
 800550a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550e:	4835      	ldr	r0, [pc, #212]	; (80055e4 <_printf_i+0x244>)
 8005510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005514:	6829      	ldr	r1, [r5, #0]
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	f851 6b04 	ldr.w	r6, [r1], #4
 800551c:	6029      	str	r1, [r5, #0]
 800551e:	061d      	lsls	r5, r3, #24
 8005520:	d514      	bpl.n	800554c <_printf_i+0x1ac>
 8005522:	07df      	lsls	r7, r3, #31
 8005524:	bf44      	itt	mi
 8005526:	f043 0320 	orrmi.w	r3, r3, #32
 800552a:	6023      	strmi	r3, [r4, #0]
 800552c:	b91e      	cbnz	r6, 8005536 <_printf_i+0x196>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f023 0320 	bic.w	r3, r3, #32
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	2310      	movs	r3, #16
 8005538:	e7b0      	b.n	800549c <_printf_i+0xfc>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	f043 0320 	orr.w	r3, r3, #32
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	2378      	movs	r3, #120	; 0x78
 8005544:	4828      	ldr	r0, [pc, #160]	; (80055e8 <_printf_i+0x248>)
 8005546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800554a:	e7e3      	b.n	8005514 <_printf_i+0x174>
 800554c:	0659      	lsls	r1, r3, #25
 800554e:	bf48      	it	mi
 8005550:	b2b6      	uxthmi	r6, r6
 8005552:	e7e6      	b.n	8005522 <_printf_i+0x182>
 8005554:	4615      	mov	r5, r2
 8005556:	e7bb      	b.n	80054d0 <_printf_i+0x130>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	6826      	ldr	r6, [r4, #0]
 800555c:	6961      	ldr	r1, [r4, #20]
 800555e:	1d18      	adds	r0, r3, #4
 8005560:	6028      	str	r0, [r5, #0]
 8005562:	0635      	lsls	r5, r6, #24
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	d501      	bpl.n	800556c <_printf_i+0x1cc>
 8005568:	6019      	str	r1, [r3, #0]
 800556a:	e002      	b.n	8005572 <_printf_i+0x1d2>
 800556c:	0670      	lsls	r0, r6, #25
 800556e:	d5fb      	bpl.n	8005568 <_printf_i+0x1c8>
 8005570:	8019      	strh	r1, [r3, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	4615      	mov	r5, r2
 8005578:	e7ba      	b.n	80054f0 <_printf_i+0x150>
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	1d1a      	adds	r2, r3, #4
 800557e:	602a      	str	r2, [r5, #0]
 8005580:	681d      	ldr	r5, [r3, #0]
 8005582:	6862      	ldr	r2, [r4, #4]
 8005584:	2100      	movs	r1, #0
 8005586:	4628      	mov	r0, r5
 8005588:	f7fa fe2a 	bl	80001e0 <memchr>
 800558c:	b108      	cbz	r0, 8005592 <_printf_i+0x1f2>
 800558e:	1b40      	subs	r0, r0, r5
 8005590:	6060      	str	r0, [r4, #4]
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	2300      	movs	r3, #0
 8005598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559c:	e7a8      	b.n	80054f0 <_printf_i+0x150>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4649      	mov	r1, r9
 80055a4:	4640      	mov	r0, r8
 80055a6:	47d0      	blx	sl
 80055a8:	3001      	adds	r0, #1
 80055aa:	d0ab      	beq.n	8005504 <_printf_i+0x164>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	079b      	lsls	r3, r3, #30
 80055b0:	d413      	bmi.n	80055da <_printf_i+0x23a>
 80055b2:	68e0      	ldr	r0, [r4, #12]
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	4298      	cmp	r0, r3
 80055b8:	bfb8      	it	lt
 80055ba:	4618      	movlt	r0, r3
 80055bc:	e7a4      	b.n	8005508 <_printf_i+0x168>
 80055be:	2301      	movs	r3, #1
 80055c0:	4632      	mov	r2, r6
 80055c2:	4649      	mov	r1, r9
 80055c4:	4640      	mov	r0, r8
 80055c6:	47d0      	blx	sl
 80055c8:	3001      	adds	r0, #1
 80055ca:	d09b      	beq.n	8005504 <_printf_i+0x164>
 80055cc:	3501      	adds	r5, #1
 80055ce:	68e3      	ldr	r3, [r4, #12]
 80055d0:	9903      	ldr	r1, [sp, #12]
 80055d2:	1a5b      	subs	r3, r3, r1
 80055d4:	42ab      	cmp	r3, r5
 80055d6:	dcf2      	bgt.n	80055be <_printf_i+0x21e>
 80055d8:	e7eb      	b.n	80055b2 <_printf_i+0x212>
 80055da:	2500      	movs	r5, #0
 80055dc:	f104 0619 	add.w	r6, r4, #25
 80055e0:	e7f5      	b.n	80055ce <_printf_i+0x22e>
 80055e2:	bf00      	nop
 80055e4:	08007ba6 	.word	0x08007ba6
 80055e8:	08007bb7 	.word	0x08007bb7

080055ec <siprintf>:
 80055ec:	b40e      	push	{r1, r2, r3}
 80055ee:	b500      	push	{lr}
 80055f0:	b09c      	sub	sp, #112	; 0x70
 80055f2:	ab1d      	add	r3, sp, #116	; 0x74
 80055f4:	9002      	str	r0, [sp, #8]
 80055f6:	9006      	str	r0, [sp, #24]
 80055f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055fc:	4809      	ldr	r0, [pc, #36]	; (8005624 <siprintf+0x38>)
 80055fe:	9107      	str	r1, [sp, #28]
 8005600:	9104      	str	r1, [sp, #16]
 8005602:	4909      	ldr	r1, [pc, #36]	; (8005628 <siprintf+0x3c>)
 8005604:	f853 2b04 	ldr.w	r2, [r3], #4
 8005608:	9105      	str	r1, [sp, #20]
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	a902      	add	r1, sp, #8
 8005610:	f001 fb78 	bl	8006d04 <_svfiprintf_r>
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	b01c      	add	sp, #112	; 0x70
 800561c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005620:	b003      	add	sp, #12
 8005622:	4770      	bx	lr
 8005624:	20000018 	.word	0x20000018
 8005628:	ffff0208 	.word	0xffff0208

0800562c <quorem>:
 800562c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005630:	6903      	ldr	r3, [r0, #16]
 8005632:	690c      	ldr	r4, [r1, #16]
 8005634:	42a3      	cmp	r3, r4
 8005636:	4607      	mov	r7, r0
 8005638:	f2c0 8081 	blt.w	800573e <quorem+0x112>
 800563c:	3c01      	subs	r4, #1
 800563e:	f101 0814 	add.w	r8, r1, #20
 8005642:	f100 0514 	add.w	r5, r0, #20
 8005646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005654:	3301      	adds	r3, #1
 8005656:	429a      	cmp	r2, r3
 8005658:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800565c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005660:	fbb2 f6f3 	udiv	r6, r2, r3
 8005664:	d331      	bcc.n	80056ca <quorem+0x9e>
 8005666:	f04f 0e00 	mov.w	lr, #0
 800566a:	4640      	mov	r0, r8
 800566c:	46ac      	mov	ip, r5
 800566e:	46f2      	mov	sl, lr
 8005670:	f850 2b04 	ldr.w	r2, [r0], #4
 8005674:	b293      	uxth	r3, r2
 8005676:	fb06 e303 	mla	r3, r6, r3, lr
 800567a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800567e:	b29b      	uxth	r3, r3
 8005680:	ebaa 0303 	sub.w	r3, sl, r3
 8005684:	f8dc a000 	ldr.w	sl, [ip]
 8005688:	0c12      	lsrs	r2, r2, #16
 800568a:	fa13 f38a 	uxtah	r3, r3, sl
 800568e:	fb06 e202 	mla	r2, r6, r2, lr
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	9b00      	ldr	r3, [sp, #0]
 8005696:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800569a:	b292      	uxth	r2, r2
 800569c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80056a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80056a8:	4581      	cmp	r9, r0
 80056aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ae:	f84c 3b04 	str.w	r3, [ip], #4
 80056b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056b6:	d2db      	bcs.n	8005670 <quorem+0x44>
 80056b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80056bc:	b92b      	cbnz	r3, 80056ca <quorem+0x9e>
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	3b04      	subs	r3, #4
 80056c2:	429d      	cmp	r5, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	d32e      	bcc.n	8005726 <quorem+0xfa>
 80056c8:	613c      	str	r4, [r7, #16]
 80056ca:	4638      	mov	r0, r7
 80056cc:	f001 f8c6 	bl	800685c <__mcmp>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	db24      	blt.n	800571e <quorem+0xf2>
 80056d4:	3601      	adds	r6, #1
 80056d6:	4628      	mov	r0, r5
 80056d8:	f04f 0c00 	mov.w	ip, #0
 80056dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80056e0:	f8d0 e000 	ldr.w	lr, [r0]
 80056e4:	b293      	uxth	r3, r2
 80056e6:	ebac 0303 	sub.w	r3, ip, r3
 80056ea:	0c12      	lsrs	r2, r2, #16
 80056ec:	fa13 f38e 	uxtah	r3, r3, lr
 80056f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056fe:	45c1      	cmp	r9, r8
 8005700:	f840 3b04 	str.w	r3, [r0], #4
 8005704:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005708:	d2e8      	bcs.n	80056dc <quorem+0xb0>
 800570a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800570e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005712:	b922      	cbnz	r2, 800571e <quorem+0xf2>
 8005714:	3b04      	subs	r3, #4
 8005716:	429d      	cmp	r5, r3
 8005718:	461a      	mov	r2, r3
 800571a:	d30a      	bcc.n	8005732 <quorem+0x106>
 800571c:	613c      	str	r4, [r7, #16]
 800571e:	4630      	mov	r0, r6
 8005720:	b003      	add	sp, #12
 8005722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	3b04      	subs	r3, #4
 800572a:	2a00      	cmp	r2, #0
 800572c:	d1cc      	bne.n	80056c8 <quorem+0x9c>
 800572e:	3c01      	subs	r4, #1
 8005730:	e7c7      	b.n	80056c2 <quorem+0x96>
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	3b04      	subs	r3, #4
 8005736:	2a00      	cmp	r2, #0
 8005738:	d1f0      	bne.n	800571c <quorem+0xf0>
 800573a:	3c01      	subs	r4, #1
 800573c:	e7eb      	b.n	8005716 <quorem+0xea>
 800573e:	2000      	movs	r0, #0
 8005740:	e7ee      	b.n	8005720 <quorem+0xf4>
 8005742:	0000      	movs	r0, r0
 8005744:	0000      	movs	r0, r0
	...

08005748 <_dtoa_r>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	ed2d 8b04 	vpush	{d8-d9}
 8005750:	ec57 6b10 	vmov	r6, r7, d0
 8005754:	b093      	sub	sp, #76	; 0x4c
 8005756:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005758:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800575c:	9106      	str	r1, [sp, #24]
 800575e:	ee10 aa10 	vmov	sl, s0
 8005762:	4604      	mov	r4, r0
 8005764:	9209      	str	r2, [sp, #36]	; 0x24
 8005766:	930c      	str	r3, [sp, #48]	; 0x30
 8005768:	46bb      	mov	fp, r7
 800576a:	b975      	cbnz	r5, 800578a <_dtoa_r+0x42>
 800576c:	2010      	movs	r0, #16
 800576e:	f000 fddd 	bl	800632c <malloc>
 8005772:	4602      	mov	r2, r0
 8005774:	6260      	str	r0, [r4, #36]	; 0x24
 8005776:	b920      	cbnz	r0, 8005782 <_dtoa_r+0x3a>
 8005778:	4ba7      	ldr	r3, [pc, #668]	; (8005a18 <_dtoa_r+0x2d0>)
 800577a:	21ea      	movs	r1, #234	; 0xea
 800577c:	48a7      	ldr	r0, [pc, #668]	; (8005a1c <_dtoa_r+0x2d4>)
 800577e:	f001 fbd1 	bl	8006f24 <__assert_func>
 8005782:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005786:	6005      	str	r5, [r0, #0]
 8005788:	60c5      	str	r5, [r0, #12]
 800578a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800578c:	6819      	ldr	r1, [r3, #0]
 800578e:	b151      	cbz	r1, 80057a6 <_dtoa_r+0x5e>
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	604a      	str	r2, [r1, #4]
 8005794:	2301      	movs	r3, #1
 8005796:	4093      	lsls	r3, r2
 8005798:	608b      	str	r3, [r1, #8]
 800579a:	4620      	mov	r0, r4
 800579c:	f000 fe1c 	bl	80063d8 <_Bfree>
 80057a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	1e3b      	subs	r3, r7, #0
 80057a8:	bfaa      	itet	ge
 80057aa:	2300      	movge	r3, #0
 80057ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80057b0:	f8c8 3000 	strge.w	r3, [r8]
 80057b4:	4b9a      	ldr	r3, [pc, #616]	; (8005a20 <_dtoa_r+0x2d8>)
 80057b6:	bfbc      	itt	lt
 80057b8:	2201      	movlt	r2, #1
 80057ba:	f8c8 2000 	strlt.w	r2, [r8]
 80057be:	ea33 030b 	bics.w	r3, r3, fp
 80057c2:	d11b      	bne.n	80057fc <_dtoa_r+0xb4>
 80057c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057d0:	4333      	orrs	r3, r6
 80057d2:	f000 8592 	beq.w	80062fa <_dtoa_r+0xbb2>
 80057d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057d8:	b963      	cbnz	r3, 80057f4 <_dtoa_r+0xac>
 80057da:	4b92      	ldr	r3, [pc, #584]	; (8005a24 <_dtoa_r+0x2dc>)
 80057dc:	e022      	b.n	8005824 <_dtoa_r+0xdc>
 80057de:	4b92      	ldr	r3, [pc, #584]	; (8005a28 <_dtoa_r+0x2e0>)
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	3308      	adds	r3, #8
 80057e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	9801      	ldr	r0, [sp, #4]
 80057ea:	b013      	add	sp, #76	; 0x4c
 80057ec:	ecbd 8b04 	vpop	{d8-d9}
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	4b8b      	ldr	r3, [pc, #556]	; (8005a24 <_dtoa_r+0x2dc>)
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	3303      	adds	r3, #3
 80057fa:	e7f3      	b.n	80057e4 <_dtoa_r+0x9c>
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	4650      	mov	r0, sl
 8005802:	4659      	mov	r1, fp
 8005804:	f7fb f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8005808:	ec4b ab19 	vmov	d9, sl, fp
 800580c:	4680      	mov	r8, r0
 800580e:	b158      	cbz	r0, 8005828 <_dtoa_r+0xe0>
 8005810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005812:	2301      	movs	r3, #1
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 856b 	beq.w	80062f4 <_dtoa_r+0xbac>
 800581e:	4883      	ldr	r0, [pc, #524]	; (8005a2c <_dtoa_r+0x2e4>)
 8005820:	6018      	str	r0, [r3, #0]
 8005822:	1e43      	subs	r3, r0, #1
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	e7df      	b.n	80057e8 <_dtoa_r+0xa0>
 8005828:	ec4b ab10 	vmov	d0, sl, fp
 800582c:	aa10      	add	r2, sp, #64	; 0x40
 800582e:	a911      	add	r1, sp, #68	; 0x44
 8005830:	4620      	mov	r0, r4
 8005832:	f001 f8b9 	bl	80069a8 <__d2b>
 8005836:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800583a:	ee08 0a10 	vmov	s16, r0
 800583e:	2d00      	cmp	r5, #0
 8005840:	f000 8084 	beq.w	800594c <_dtoa_r+0x204>
 8005844:	ee19 3a90 	vmov	r3, s19
 8005848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800584c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005850:	4656      	mov	r6, sl
 8005852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800585a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800585e:	4b74      	ldr	r3, [pc, #464]	; (8005a30 <_dtoa_r+0x2e8>)
 8005860:	2200      	movs	r2, #0
 8005862:	4630      	mov	r0, r6
 8005864:	4639      	mov	r1, r7
 8005866:	f7fa fd0f 	bl	8000288 <__aeabi_dsub>
 800586a:	a365      	add	r3, pc, #404	; (adr r3, 8005a00 <_dtoa_r+0x2b8>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fec2 	bl	80005f8 <__aeabi_dmul>
 8005874:	a364      	add	r3, pc, #400	; (adr r3, 8005a08 <_dtoa_r+0x2c0>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f7fa fd07 	bl	800028c <__adddf3>
 800587e:	4606      	mov	r6, r0
 8005880:	4628      	mov	r0, r5
 8005882:	460f      	mov	r7, r1
 8005884:	f7fa fe4e 	bl	8000524 <__aeabi_i2d>
 8005888:	a361      	add	r3, pc, #388	; (adr r3, 8005a10 <_dtoa_r+0x2c8>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa feb3 	bl	80005f8 <__aeabi_dmul>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4630      	mov	r0, r6
 8005898:	4639      	mov	r1, r7
 800589a:	f7fa fcf7 	bl	800028c <__adddf3>
 800589e:	4606      	mov	r6, r0
 80058a0:	460f      	mov	r7, r1
 80058a2:	f7fb f959 	bl	8000b58 <__aeabi_d2iz>
 80058a6:	2200      	movs	r2, #0
 80058a8:	9000      	str	r0, [sp, #0]
 80058aa:	2300      	movs	r3, #0
 80058ac:	4630      	mov	r0, r6
 80058ae:	4639      	mov	r1, r7
 80058b0:	f7fb f914 	bl	8000adc <__aeabi_dcmplt>
 80058b4:	b150      	cbz	r0, 80058cc <_dtoa_r+0x184>
 80058b6:	9800      	ldr	r0, [sp, #0]
 80058b8:	f7fa fe34 	bl	8000524 <__aeabi_i2d>
 80058bc:	4632      	mov	r2, r6
 80058be:	463b      	mov	r3, r7
 80058c0:	f7fb f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80058c4:	b910      	cbnz	r0, 80058cc <_dtoa_r+0x184>
 80058c6:	9b00      	ldr	r3, [sp, #0]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	9b00      	ldr	r3, [sp, #0]
 80058ce:	2b16      	cmp	r3, #22
 80058d0:	d85a      	bhi.n	8005988 <_dtoa_r+0x240>
 80058d2:	9a00      	ldr	r2, [sp, #0]
 80058d4:	4b57      	ldr	r3, [pc, #348]	; (8005a34 <_dtoa_r+0x2ec>)
 80058d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	ec51 0b19 	vmov	r0, r1, d9
 80058e2:	f7fb f8fb 	bl	8000adc <__aeabi_dcmplt>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d050      	beq.n	800598c <_dtoa_r+0x244>
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	2300      	movs	r3, #0
 80058f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058f6:	1b5d      	subs	r5, r3, r5
 80058f8:	1e6b      	subs	r3, r5, #1
 80058fa:	9305      	str	r3, [sp, #20]
 80058fc:	bf45      	ittet	mi
 80058fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005902:	9304      	strmi	r3, [sp, #16]
 8005904:	2300      	movpl	r3, #0
 8005906:	2300      	movmi	r3, #0
 8005908:	bf4c      	ite	mi
 800590a:	9305      	strmi	r3, [sp, #20]
 800590c:	9304      	strpl	r3, [sp, #16]
 800590e:	9b00      	ldr	r3, [sp, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	db3d      	blt.n	8005990 <_dtoa_r+0x248>
 8005914:	9b05      	ldr	r3, [sp, #20]
 8005916:	9a00      	ldr	r2, [sp, #0]
 8005918:	920a      	str	r2, [sp, #40]	; 0x28
 800591a:	4413      	add	r3, r2
 800591c:	9305      	str	r3, [sp, #20]
 800591e:	2300      	movs	r3, #0
 8005920:	9307      	str	r3, [sp, #28]
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	2b09      	cmp	r3, #9
 8005926:	f200 8089 	bhi.w	8005a3c <_dtoa_r+0x2f4>
 800592a:	2b05      	cmp	r3, #5
 800592c:	bfc4      	itt	gt
 800592e:	3b04      	subgt	r3, #4
 8005930:	9306      	strgt	r3, [sp, #24]
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	f1a3 0302 	sub.w	r3, r3, #2
 8005938:	bfcc      	ite	gt
 800593a:	2500      	movgt	r5, #0
 800593c:	2501      	movle	r5, #1
 800593e:	2b03      	cmp	r3, #3
 8005940:	f200 8087 	bhi.w	8005a52 <_dtoa_r+0x30a>
 8005944:	e8df f003 	tbb	[pc, r3]
 8005948:	59383a2d 	.word	0x59383a2d
 800594c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005950:	441d      	add	r5, r3
 8005952:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005956:	2b20      	cmp	r3, #32
 8005958:	bfc1      	itttt	gt
 800595a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800595e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005962:	fa0b f303 	lslgt.w	r3, fp, r3
 8005966:	fa26 f000 	lsrgt.w	r0, r6, r0
 800596a:	bfda      	itte	le
 800596c:	f1c3 0320 	rsble	r3, r3, #32
 8005970:	fa06 f003 	lslle.w	r0, r6, r3
 8005974:	4318      	orrgt	r0, r3
 8005976:	f7fa fdc5 	bl	8000504 <__aeabi_ui2d>
 800597a:	2301      	movs	r3, #1
 800597c:	4606      	mov	r6, r0
 800597e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005982:	3d01      	subs	r5, #1
 8005984:	930e      	str	r3, [sp, #56]	; 0x38
 8005986:	e76a      	b.n	800585e <_dtoa_r+0x116>
 8005988:	2301      	movs	r3, #1
 800598a:	e7b2      	b.n	80058f2 <_dtoa_r+0x1aa>
 800598c:	900b      	str	r0, [sp, #44]	; 0x2c
 800598e:	e7b1      	b.n	80058f4 <_dtoa_r+0x1ac>
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	9a00      	ldr	r2, [sp, #0]
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	4253      	negs	r3, r2
 800599a:	9307      	str	r3, [sp, #28]
 800599c:	2300      	movs	r3, #0
 800599e:	930a      	str	r3, [sp, #40]	; 0x28
 80059a0:	e7bf      	b.n	8005922 <_dtoa_r+0x1da>
 80059a2:	2300      	movs	r3, #0
 80059a4:	9308      	str	r3, [sp, #32]
 80059a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dc55      	bgt.n	8005a58 <_dtoa_r+0x310>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059b2:	461a      	mov	r2, r3
 80059b4:	9209      	str	r2, [sp, #36]	; 0x24
 80059b6:	e00c      	b.n	80059d2 <_dtoa_r+0x28a>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e7f3      	b.n	80059a4 <_dtoa_r+0x25c>
 80059bc:	2300      	movs	r3, #0
 80059be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059c0:	9308      	str	r3, [sp, #32]
 80059c2:	9b00      	ldr	r3, [sp, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	9302      	str	r3, [sp, #8]
 80059c8:	3301      	adds	r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	9303      	str	r3, [sp, #12]
 80059ce:	bfb8      	it	lt
 80059d0:	2301      	movlt	r3, #1
 80059d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059d4:	2200      	movs	r2, #0
 80059d6:	6042      	str	r2, [r0, #4]
 80059d8:	2204      	movs	r2, #4
 80059da:	f102 0614 	add.w	r6, r2, #20
 80059de:	429e      	cmp	r6, r3
 80059e0:	6841      	ldr	r1, [r0, #4]
 80059e2:	d93d      	bls.n	8005a60 <_dtoa_r+0x318>
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 fcb7 	bl	8006358 <_Balloc>
 80059ea:	9001      	str	r0, [sp, #4]
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d13b      	bne.n	8005a68 <_dtoa_r+0x320>
 80059f0:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <_dtoa_r+0x2f0>)
 80059f2:	4602      	mov	r2, r0
 80059f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059f8:	e6c0      	b.n	800577c <_dtoa_r+0x34>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7df      	b.n	80059be <_dtoa_r+0x276>
 80059fe:	bf00      	nop
 8005a00:	636f4361 	.word	0x636f4361
 8005a04:	3fd287a7 	.word	0x3fd287a7
 8005a08:	8b60c8b3 	.word	0x8b60c8b3
 8005a0c:	3fc68a28 	.word	0x3fc68a28
 8005a10:	509f79fb 	.word	0x509f79fb
 8005a14:	3fd34413 	.word	0x3fd34413
 8005a18:	08007bd5 	.word	0x08007bd5
 8005a1c:	08007bec 	.word	0x08007bec
 8005a20:	7ff00000 	.word	0x7ff00000
 8005a24:	08007bd1 	.word	0x08007bd1
 8005a28:	08007bc8 	.word	0x08007bc8
 8005a2c:	08007ba5 	.word	0x08007ba5
 8005a30:	3ff80000 	.word	0x3ff80000
 8005a34:	08007ce0 	.word	0x08007ce0
 8005a38:	08007c47 	.word	0x08007c47
 8005a3c:	2501      	movs	r5, #1
 8005a3e:	2300      	movs	r3, #0
 8005a40:	9306      	str	r3, [sp, #24]
 8005a42:	9508      	str	r5, [sp, #32]
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2312      	movs	r3, #18
 8005a50:	e7b0      	b.n	80059b4 <_dtoa_r+0x26c>
 8005a52:	2301      	movs	r3, #1
 8005a54:	9308      	str	r3, [sp, #32]
 8005a56:	e7f5      	b.n	8005a44 <_dtoa_r+0x2fc>
 8005a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a5e:	e7b8      	b.n	80059d2 <_dtoa_r+0x28a>
 8005a60:	3101      	adds	r1, #1
 8005a62:	6041      	str	r1, [r0, #4]
 8005a64:	0052      	lsls	r2, r2, #1
 8005a66:	e7b8      	b.n	80059da <_dtoa_r+0x292>
 8005a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a6a:	9a01      	ldr	r2, [sp, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	2b0e      	cmp	r3, #14
 8005a72:	f200 809d 	bhi.w	8005bb0 <_dtoa_r+0x468>
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	f000 809a 	beq.w	8005bb0 <_dtoa_r+0x468>
 8005a7c:	9b00      	ldr	r3, [sp, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dd32      	ble.n	8005ae8 <_dtoa_r+0x3a0>
 8005a82:	4ab7      	ldr	r2, [pc, #732]	; (8005d60 <_dtoa_r+0x618>)
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a90:	9b00      	ldr	r3, [sp, #0]
 8005a92:	05d8      	lsls	r0, r3, #23
 8005a94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005a98:	d516      	bpl.n	8005ac8 <_dtoa_r+0x380>
 8005a9a:	4bb2      	ldr	r3, [pc, #712]	; (8005d64 <_dtoa_r+0x61c>)
 8005a9c:	ec51 0b19 	vmov	r0, r1, d9
 8005aa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005aa4:	f7fa fed2 	bl	800084c <__aeabi_ddiv>
 8005aa8:	f007 070f 	and.w	r7, r7, #15
 8005aac:	4682      	mov	sl, r0
 8005aae:	468b      	mov	fp, r1
 8005ab0:	2503      	movs	r5, #3
 8005ab2:	4eac      	ldr	r6, [pc, #688]	; (8005d64 <_dtoa_r+0x61c>)
 8005ab4:	b957      	cbnz	r7, 8005acc <_dtoa_r+0x384>
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	464b      	mov	r3, r9
 8005aba:	4650      	mov	r0, sl
 8005abc:	4659      	mov	r1, fp
 8005abe:	f7fa fec5 	bl	800084c <__aeabi_ddiv>
 8005ac2:	4682      	mov	sl, r0
 8005ac4:	468b      	mov	fp, r1
 8005ac6:	e028      	b.n	8005b1a <_dtoa_r+0x3d2>
 8005ac8:	2502      	movs	r5, #2
 8005aca:	e7f2      	b.n	8005ab2 <_dtoa_r+0x36a>
 8005acc:	07f9      	lsls	r1, r7, #31
 8005ace:	d508      	bpl.n	8005ae2 <_dtoa_r+0x39a>
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ad8:	f7fa fd8e 	bl	80005f8 <__aeabi_dmul>
 8005adc:	3501      	adds	r5, #1
 8005ade:	4680      	mov	r8, r0
 8005ae0:	4689      	mov	r9, r1
 8005ae2:	107f      	asrs	r7, r7, #1
 8005ae4:	3608      	adds	r6, #8
 8005ae6:	e7e5      	b.n	8005ab4 <_dtoa_r+0x36c>
 8005ae8:	f000 809b 	beq.w	8005c22 <_dtoa_r+0x4da>
 8005aec:	9b00      	ldr	r3, [sp, #0]
 8005aee:	4f9d      	ldr	r7, [pc, #628]	; (8005d64 <_dtoa_r+0x61c>)
 8005af0:	425e      	negs	r6, r3
 8005af2:	4b9b      	ldr	r3, [pc, #620]	; (8005d60 <_dtoa_r+0x618>)
 8005af4:	f006 020f 	and.w	r2, r6, #15
 8005af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	ec51 0b19 	vmov	r0, r1, d9
 8005b04:	f7fa fd78 	bl	80005f8 <__aeabi_dmul>
 8005b08:	1136      	asrs	r6, r6, #4
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	468b      	mov	fp, r1
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2502      	movs	r5, #2
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	d17a      	bne.n	8005c0c <_dtoa_r+0x4c4>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1d3      	bne.n	8005ac2 <_dtoa_r+0x37a>
 8005b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8082 	beq.w	8005c26 <_dtoa_r+0x4de>
 8005b22:	4b91      	ldr	r3, [pc, #580]	; (8005d68 <_dtoa_r+0x620>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	4650      	mov	r0, sl
 8005b28:	4659      	mov	r1, fp
 8005b2a:	f7fa ffd7 	bl	8000adc <__aeabi_dcmplt>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d079      	beq.n	8005c26 <_dtoa_r+0x4de>
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d076      	beq.n	8005c26 <_dtoa_r+0x4de>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dd36      	ble.n	8005bac <_dtoa_r+0x464>
 8005b3e:	9b00      	ldr	r3, [sp, #0]
 8005b40:	4650      	mov	r0, sl
 8005b42:	4659      	mov	r1, fp
 8005b44:	1e5f      	subs	r7, r3, #1
 8005b46:	2200      	movs	r2, #0
 8005b48:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <_dtoa_r+0x624>)
 8005b4a:	f7fa fd55 	bl	80005f8 <__aeabi_dmul>
 8005b4e:	9e02      	ldr	r6, [sp, #8]
 8005b50:	4682      	mov	sl, r0
 8005b52:	468b      	mov	fp, r1
 8005b54:	3501      	adds	r5, #1
 8005b56:	4628      	mov	r0, r5
 8005b58:	f7fa fce4 	bl	8000524 <__aeabi_i2d>
 8005b5c:	4652      	mov	r2, sl
 8005b5e:	465b      	mov	r3, fp
 8005b60:	f7fa fd4a 	bl	80005f8 <__aeabi_dmul>
 8005b64:	4b82      	ldr	r3, [pc, #520]	; (8005d70 <_dtoa_r+0x628>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	f7fa fb90 	bl	800028c <__adddf3>
 8005b6c:	46d0      	mov	r8, sl
 8005b6e:	46d9      	mov	r9, fp
 8005b70:	4682      	mov	sl, r0
 8005b72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	d158      	bne.n	8005c2c <_dtoa_r+0x4e4>
 8005b7a:	4b7e      	ldr	r3, [pc, #504]	; (8005d74 <_dtoa_r+0x62c>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	f7fa fb81 	bl	8000288 <__aeabi_dsub>
 8005b86:	4652      	mov	r2, sl
 8005b88:	465b      	mov	r3, fp
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4689      	mov	r9, r1
 8005b8e:	f7fa ffc3 	bl	8000b18 <__aeabi_dcmpgt>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	f040 8295 	bne.w	80060c2 <_dtoa_r+0x97a>
 8005b98:	4652      	mov	r2, sl
 8005b9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f7fa ff9b 	bl	8000adc <__aeabi_dcmplt>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f040 8289 	bne.w	80060be <_dtoa_r+0x976>
 8005bac:	ec5b ab19 	vmov	sl, fp, d9
 8005bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f2c0 8148 	blt.w	8005e48 <_dtoa_r+0x700>
 8005bb8:	9a00      	ldr	r2, [sp, #0]
 8005bba:	2a0e      	cmp	r2, #14
 8005bbc:	f300 8144 	bgt.w	8005e48 <_dtoa_r+0x700>
 8005bc0:	4b67      	ldr	r3, [pc, #412]	; (8005d60 <_dtoa_r+0x618>)
 8005bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f280 80d5 	bge.w	8005d7c <_dtoa_r+0x634>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f300 80d1 	bgt.w	8005d7c <_dtoa_r+0x634>
 8005bda:	f040 826f 	bne.w	80060bc <_dtoa_r+0x974>
 8005bde:	4b65      	ldr	r3, [pc, #404]	; (8005d74 <_dtoa_r+0x62c>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f7fa fd07 	bl	80005f8 <__aeabi_dmul>
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	f7fa ff89 	bl	8000b04 <__aeabi_dcmpge>
 8005bf2:	9e03      	ldr	r6, [sp, #12]
 8005bf4:	4637      	mov	r7, r6
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	f040 8245 	bne.w	8006086 <_dtoa_r+0x93e>
 8005bfc:	9d01      	ldr	r5, [sp, #4]
 8005bfe:	2331      	movs	r3, #49	; 0x31
 8005c00:	f805 3b01 	strb.w	r3, [r5], #1
 8005c04:	9b00      	ldr	r3, [sp, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	e240      	b.n	800608e <_dtoa_r+0x946>
 8005c0c:	07f2      	lsls	r2, r6, #31
 8005c0e:	d505      	bpl.n	8005c1c <_dtoa_r+0x4d4>
 8005c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c14:	f7fa fcf0 	bl	80005f8 <__aeabi_dmul>
 8005c18:	3501      	adds	r5, #1
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	1076      	asrs	r6, r6, #1
 8005c1e:	3708      	adds	r7, #8
 8005c20:	e777      	b.n	8005b12 <_dtoa_r+0x3ca>
 8005c22:	2502      	movs	r5, #2
 8005c24:	e779      	b.n	8005b1a <_dtoa_r+0x3d2>
 8005c26:	9f00      	ldr	r7, [sp, #0]
 8005c28:	9e03      	ldr	r6, [sp, #12]
 8005c2a:	e794      	b.n	8005b56 <_dtoa_r+0x40e>
 8005c2c:	9901      	ldr	r1, [sp, #4]
 8005c2e:	4b4c      	ldr	r3, [pc, #304]	; (8005d60 <_dtoa_r+0x618>)
 8005c30:	4431      	add	r1, r6
 8005c32:	910d      	str	r1, [sp, #52]	; 0x34
 8005c34:	9908      	ldr	r1, [sp, #32]
 8005c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c3e:	2900      	cmp	r1, #0
 8005c40:	d043      	beq.n	8005cca <_dtoa_r+0x582>
 8005c42:	494d      	ldr	r1, [pc, #308]	; (8005d78 <_dtoa_r+0x630>)
 8005c44:	2000      	movs	r0, #0
 8005c46:	f7fa fe01 	bl	800084c <__aeabi_ddiv>
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	465b      	mov	r3, fp
 8005c4e:	f7fa fb1b 	bl	8000288 <__aeabi_dsub>
 8005c52:	9d01      	ldr	r5, [sp, #4]
 8005c54:	4682      	mov	sl, r0
 8005c56:	468b      	mov	fp, r1
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	f7fa ff7c 	bl	8000b58 <__aeabi_d2iz>
 8005c60:	4606      	mov	r6, r0
 8005c62:	f7fa fc5f 	bl	8000524 <__aeabi_i2d>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	f7fa fb0b 	bl	8000288 <__aeabi_dsub>
 8005c72:	3630      	adds	r6, #48	; 0x30
 8005c74:	f805 6b01 	strb.w	r6, [r5], #1
 8005c78:	4652      	mov	r2, sl
 8005c7a:	465b      	mov	r3, fp
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4689      	mov	r9, r1
 8005c80:	f7fa ff2c 	bl	8000adc <__aeabi_dcmplt>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d163      	bne.n	8005d50 <_dtoa_r+0x608>
 8005c88:	4642      	mov	r2, r8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	4936      	ldr	r1, [pc, #216]	; (8005d68 <_dtoa_r+0x620>)
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f7fa fafa 	bl	8000288 <__aeabi_dsub>
 8005c94:	4652      	mov	r2, sl
 8005c96:	465b      	mov	r3, fp
 8005c98:	f7fa ff20 	bl	8000adc <__aeabi_dcmplt>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f040 80b5 	bne.w	8005e0c <_dtoa_r+0x6c4>
 8005ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca4:	429d      	cmp	r5, r3
 8005ca6:	d081      	beq.n	8005bac <_dtoa_r+0x464>
 8005ca8:	4b30      	ldr	r3, [pc, #192]	; (8005d6c <_dtoa_r+0x624>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	4650      	mov	r0, sl
 8005cae:	4659      	mov	r1, fp
 8005cb0:	f7fa fca2 	bl	80005f8 <__aeabi_dmul>
 8005cb4:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <_dtoa_r+0x624>)
 8005cb6:	4682      	mov	sl, r0
 8005cb8:	468b      	mov	fp, r1
 8005cba:	4640      	mov	r0, r8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f7fa fc9a 	bl	80005f8 <__aeabi_dmul>
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	4689      	mov	r9, r1
 8005cc8:	e7c6      	b.n	8005c58 <_dtoa_r+0x510>
 8005cca:	4650      	mov	r0, sl
 8005ccc:	4659      	mov	r1, fp
 8005cce:	f7fa fc93 	bl	80005f8 <__aeabi_dmul>
 8005cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd4:	9d01      	ldr	r5, [sp, #4]
 8005cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cd8:	4682      	mov	sl, r0
 8005cda:	468b      	mov	fp, r1
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4640      	mov	r0, r8
 8005ce0:	f7fa ff3a 	bl	8000b58 <__aeabi_d2iz>
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	f7fa fc1d 	bl	8000524 <__aeabi_i2d>
 8005cea:	3630      	adds	r6, #48	; 0x30
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	f7fa fac8 	bl	8000288 <__aeabi_dsub>
 8005cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8005cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cfe:	429d      	cmp	r5, r3
 8005d00:	4680      	mov	r8, r0
 8005d02:	4689      	mov	r9, r1
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	d124      	bne.n	8005d54 <_dtoa_r+0x60c>
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <_dtoa_r+0x630>)
 8005d0c:	4650      	mov	r0, sl
 8005d0e:	4659      	mov	r1, fp
 8005d10:	f7fa fabc 	bl	800028c <__adddf3>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d173      	bne.n	8005e0c <_dtoa_r+0x6c4>
 8005d24:	4652      	mov	r2, sl
 8005d26:	465b      	mov	r3, fp
 8005d28:	4913      	ldr	r1, [pc, #76]	; (8005d78 <_dtoa_r+0x630>)
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f7fa faac 	bl	8000288 <__aeabi_dsub>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4640      	mov	r0, r8
 8005d36:	4649      	mov	r1, r9
 8005d38:	f7fa fed0 	bl	8000adc <__aeabi_dcmplt>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	f43f af35 	beq.w	8005bac <_dtoa_r+0x464>
 8005d42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005d44:	1e6b      	subs	r3, r5, #1
 8005d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d4c:	2b30      	cmp	r3, #48	; 0x30
 8005d4e:	d0f8      	beq.n	8005d42 <_dtoa_r+0x5fa>
 8005d50:	9700      	str	r7, [sp, #0]
 8005d52:	e049      	b.n	8005de8 <_dtoa_r+0x6a0>
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <_dtoa_r+0x624>)
 8005d56:	f7fa fc4f 	bl	80005f8 <__aeabi_dmul>
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	4689      	mov	r9, r1
 8005d5e:	e7bd      	b.n	8005cdc <_dtoa_r+0x594>
 8005d60:	08007ce0 	.word	0x08007ce0
 8005d64:	08007cb8 	.word	0x08007cb8
 8005d68:	3ff00000 	.word	0x3ff00000
 8005d6c:	40240000 	.word	0x40240000
 8005d70:	401c0000 	.word	0x401c0000
 8005d74:	40140000 	.word	0x40140000
 8005d78:	3fe00000 	.word	0x3fe00000
 8005d7c:	9d01      	ldr	r5, [sp, #4]
 8005d7e:	4656      	mov	r6, sl
 8005d80:	465f      	mov	r7, fp
 8005d82:	4642      	mov	r2, r8
 8005d84:	464b      	mov	r3, r9
 8005d86:	4630      	mov	r0, r6
 8005d88:	4639      	mov	r1, r7
 8005d8a:	f7fa fd5f 	bl	800084c <__aeabi_ddiv>
 8005d8e:	f7fa fee3 	bl	8000b58 <__aeabi_d2iz>
 8005d92:	4682      	mov	sl, r0
 8005d94:	f7fa fbc6 	bl	8000524 <__aeabi_i2d>
 8005d98:	4642      	mov	r2, r8
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	f7fa fc2c 	bl	80005f8 <__aeabi_dmul>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4630      	mov	r0, r6
 8005da6:	4639      	mov	r1, r7
 8005da8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005dac:	f7fa fa6c 	bl	8000288 <__aeabi_dsub>
 8005db0:	f805 6b01 	strb.w	r6, [r5], #1
 8005db4:	9e01      	ldr	r6, [sp, #4]
 8005db6:	9f03      	ldr	r7, [sp, #12]
 8005db8:	1bae      	subs	r6, r5, r6
 8005dba:	42b7      	cmp	r7, r6
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	d135      	bne.n	8005e2e <_dtoa_r+0x6e6>
 8005dc2:	f7fa fa63 	bl	800028c <__adddf3>
 8005dc6:	4642      	mov	r2, r8
 8005dc8:	464b      	mov	r3, r9
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	f7fa fea3 	bl	8000b18 <__aeabi_dcmpgt>
 8005dd2:	b9d0      	cbnz	r0, 8005e0a <_dtoa_r+0x6c2>
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	f7fa fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 8005de0:	b110      	cbz	r0, 8005de8 <_dtoa_r+0x6a0>
 8005de2:	f01a 0f01 	tst.w	sl, #1
 8005de6:	d110      	bne.n	8005e0a <_dtoa_r+0x6c2>
 8005de8:	4620      	mov	r0, r4
 8005dea:	ee18 1a10 	vmov	r1, s16
 8005dee:	f000 faf3 	bl	80063d8 <_Bfree>
 8005df2:	2300      	movs	r3, #0
 8005df4:	9800      	ldr	r0, [sp, #0]
 8005df6:	702b      	strb	r3, [r5, #0]
 8005df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	6018      	str	r0, [r3, #0]
 8005dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f43f acf1 	beq.w	80057e8 <_dtoa_r+0xa0>
 8005e06:	601d      	str	r5, [r3, #0]
 8005e08:	e4ee      	b.n	80057e8 <_dtoa_r+0xa0>
 8005e0a:	9f00      	ldr	r7, [sp, #0]
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	461d      	mov	r5, r3
 8005e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e14:	2a39      	cmp	r2, #57	; 0x39
 8005e16:	d106      	bne.n	8005e26 <_dtoa_r+0x6de>
 8005e18:	9a01      	ldr	r2, [sp, #4]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d1f7      	bne.n	8005e0e <_dtoa_r+0x6c6>
 8005e1e:	9901      	ldr	r1, [sp, #4]
 8005e20:	2230      	movs	r2, #48	; 0x30
 8005e22:	3701      	adds	r7, #1
 8005e24:	700a      	strb	r2, [r1, #0]
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	3201      	adds	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e790      	b.n	8005d50 <_dtoa_r+0x608>
 8005e2e:	4ba6      	ldr	r3, [pc, #664]	; (80060c8 <_dtoa_r+0x980>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	f7fa fbe1 	bl	80005f8 <__aeabi_dmul>
 8005e36:	2200      	movs	r2, #0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460f      	mov	r7, r1
 8005e3e:	f7fa fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d09d      	beq.n	8005d82 <_dtoa_r+0x63a>
 8005e46:	e7cf      	b.n	8005de8 <_dtoa_r+0x6a0>
 8005e48:	9a08      	ldr	r2, [sp, #32]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	f000 80d7 	beq.w	8005ffe <_dtoa_r+0x8b6>
 8005e50:	9a06      	ldr	r2, [sp, #24]
 8005e52:	2a01      	cmp	r2, #1
 8005e54:	f300 80ba 	bgt.w	8005fcc <_dtoa_r+0x884>
 8005e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	f000 80b2 	beq.w	8005fc4 <_dtoa_r+0x87c>
 8005e60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e64:	9e07      	ldr	r6, [sp, #28]
 8005e66:	9d04      	ldr	r5, [sp, #16]
 8005e68:	9a04      	ldr	r2, [sp, #16]
 8005e6a:	441a      	add	r2, r3
 8005e6c:	9204      	str	r2, [sp, #16]
 8005e6e:	9a05      	ldr	r2, [sp, #20]
 8005e70:	2101      	movs	r1, #1
 8005e72:	441a      	add	r2, r3
 8005e74:	4620      	mov	r0, r4
 8005e76:	9205      	str	r2, [sp, #20]
 8005e78:	f000 fb66 	bl	8006548 <__i2b>
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	2d00      	cmp	r5, #0
 8005e80:	dd0c      	ble.n	8005e9c <_dtoa_r+0x754>
 8005e82:	9b05      	ldr	r3, [sp, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	dd09      	ble.n	8005e9c <_dtoa_r+0x754>
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	9a04      	ldr	r2, [sp, #16]
 8005e8c:	bfa8      	it	ge
 8005e8e:	462b      	movge	r3, r5
 8005e90:	1ad2      	subs	r2, r2, r3
 8005e92:	9204      	str	r2, [sp, #16]
 8005e94:	9a05      	ldr	r2, [sp, #20]
 8005e96:	1aed      	subs	r5, r5, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	9305      	str	r3, [sp, #20]
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	b31b      	cbz	r3, 8005ee8 <_dtoa_r+0x7a0>
 8005ea0:	9b08      	ldr	r3, [sp, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 80af 	beq.w	8006006 <_dtoa_r+0x8be>
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	dd13      	ble.n	8005ed4 <_dtoa_r+0x78c>
 8005eac:	4639      	mov	r1, r7
 8005eae:	4632      	mov	r2, r6
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fc09 	bl	80066c8 <__pow5mult>
 8005eb6:	ee18 2a10 	vmov	r2, s16
 8005eba:	4601      	mov	r1, r0
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 fb58 	bl	8006574 <__multiply>
 8005ec4:	ee18 1a10 	vmov	r1, s16
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fa84 	bl	80063d8 <_Bfree>
 8005ed0:	ee08 8a10 	vmov	s16, r8
 8005ed4:	9b07      	ldr	r3, [sp, #28]
 8005ed6:	1b9a      	subs	r2, r3, r6
 8005ed8:	d006      	beq.n	8005ee8 <_dtoa_r+0x7a0>
 8005eda:	ee18 1a10 	vmov	r1, s16
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 fbf2 	bl	80066c8 <__pow5mult>
 8005ee4:	ee08 0a10 	vmov	s16, r0
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 fb2c 	bl	8006548 <__i2b>
 8005ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	f340 8088 	ble.w	800600a <_dtoa_r+0x8c2>
 8005efa:	461a      	mov	r2, r3
 8005efc:	4601      	mov	r1, r0
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 fbe2 	bl	80066c8 <__pow5mult>
 8005f04:	9b06      	ldr	r3, [sp, #24]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	4606      	mov	r6, r0
 8005f0a:	f340 8081 	ble.w	8006010 <_dtoa_r+0x8c8>
 8005f0e:	f04f 0800 	mov.w	r8, #0
 8005f12:	6933      	ldr	r3, [r6, #16]
 8005f14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f18:	6918      	ldr	r0, [r3, #16]
 8005f1a:	f000 fac5 	bl	80064a8 <__hi0bits>
 8005f1e:	f1c0 0020 	rsb	r0, r0, #32
 8005f22:	9b05      	ldr	r3, [sp, #20]
 8005f24:	4418      	add	r0, r3
 8005f26:	f010 001f 	ands.w	r0, r0, #31
 8005f2a:	f000 8092 	beq.w	8006052 <_dtoa_r+0x90a>
 8005f2e:	f1c0 0320 	rsb	r3, r0, #32
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	f340 808a 	ble.w	800604c <_dtoa_r+0x904>
 8005f38:	f1c0 001c 	rsb	r0, r0, #28
 8005f3c:	9b04      	ldr	r3, [sp, #16]
 8005f3e:	4403      	add	r3, r0
 8005f40:	9304      	str	r3, [sp, #16]
 8005f42:	9b05      	ldr	r3, [sp, #20]
 8005f44:	4403      	add	r3, r0
 8005f46:	4405      	add	r5, r0
 8005f48:	9305      	str	r3, [sp, #20]
 8005f4a:	9b04      	ldr	r3, [sp, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd07      	ble.n	8005f60 <_dtoa_r+0x818>
 8005f50:	ee18 1a10 	vmov	r1, s16
 8005f54:	461a      	mov	r2, r3
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 fc10 	bl	800677c <__lshift>
 8005f5c:	ee08 0a10 	vmov	s16, r0
 8005f60:	9b05      	ldr	r3, [sp, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dd05      	ble.n	8005f72 <_dtoa_r+0x82a>
 8005f66:	4631      	mov	r1, r6
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 fc06 	bl	800677c <__lshift>
 8005f70:	4606      	mov	r6, r0
 8005f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d06e      	beq.n	8006056 <_dtoa_r+0x90e>
 8005f78:	ee18 0a10 	vmov	r0, s16
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	f000 fc6d 	bl	800685c <__mcmp>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	da67      	bge.n	8006056 <_dtoa_r+0x90e>
 8005f86:	9b00      	ldr	r3, [sp, #0]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	ee18 1a10 	vmov	r1, s16
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	220a      	movs	r2, #10
 8005f92:	2300      	movs	r3, #0
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 fa41 	bl	800641c <__multadd>
 8005f9a:	9b08      	ldr	r3, [sp, #32]
 8005f9c:	ee08 0a10 	vmov	s16, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 81b1 	beq.w	8006308 <_dtoa_r+0xbc0>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4639      	mov	r1, r7
 8005faa:	220a      	movs	r2, #10
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 fa35 	bl	800641c <__multadd>
 8005fb2:	9b02      	ldr	r3, [sp, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	f300 808e 	bgt.w	80060d8 <_dtoa_r+0x990>
 8005fbc:	9b06      	ldr	r3, [sp, #24]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	dc51      	bgt.n	8006066 <_dtoa_r+0x91e>
 8005fc2:	e089      	b.n	80060d8 <_dtoa_r+0x990>
 8005fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fca:	e74b      	b.n	8005e64 <_dtoa_r+0x71c>
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	1e5e      	subs	r6, r3, #1
 8005fd0:	9b07      	ldr	r3, [sp, #28]
 8005fd2:	42b3      	cmp	r3, r6
 8005fd4:	bfbf      	itttt	lt
 8005fd6:	9b07      	ldrlt	r3, [sp, #28]
 8005fd8:	9607      	strlt	r6, [sp, #28]
 8005fda:	1af2      	sublt	r2, r6, r3
 8005fdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fde:	bfb6      	itet	lt
 8005fe0:	189b      	addlt	r3, r3, r2
 8005fe2:	1b9e      	subge	r6, r3, r6
 8005fe4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	bfb8      	it	lt
 8005fea:	2600      	movlt	r6, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bfb7      	itett	lt
 8005ff0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ff4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ff8:	1a9d      	sublt	r5, r3, r2
 8005ffa:	2300      	movlt	r3, #0
 8005ffc:	e734      	b.n	8005e68 <_dtoa_r+0x720>
 8005ffe:	9e07      	ldr	r6, [sp, #28]
 8006000:	9d04      	ldr	r5, [sp, #16]
 8006002:	9f08      	ldr	r7, [sp, #32]
 8006004:	e73b      	b.n	8005e7e <_dtoa_r+0x736>
 8006006:	9a07      	ldr	r2, [sp, #28]
 8006008:	e767      	b.n	8005eda <_dtoa_r+0x792>
 800600a:	9b06      	ldr	r3, [sp, #24]
 800600c:	2b01      	cmp	r3, #1
 800600e:	dc18      	bgt.n	8006042 <_dtoa_r+0x8fa>
 8006010:	f1ba 0f00 	cmp.w	sl, #0
 8006014:	d115      	bne.n	8006042 <_dtoa_r+0x8fa>
 8006016:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800601a:	b993      	cbnz	r3, 8006042 <_dtoa_r+0x8fa>
 800601c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006020:	0d1b      	lsrs	r3, r3, #20
 8006022:	051b      	lsls	r3, r3, #20
 8006024:	b183      	cbz	r3, 8006048 <_dtoa_r+0x900>
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	3301      	adds	r3, #1
 800602a:	9304      	str	r3, [sp, #16]
 800602c:	9b05      	ldr	r3, [sp, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	f04f 0801 	mov.w	r8, #1
 8006036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	f47f af6a 	bne.w	8005f12 <_dtoa_r+0x7ca>
 800603e:	2001      	movs	r0, #1
 8006040:	e76f      	b.n	8005f22 <_dtoa_r+0x7da>
 8006042:	f04f 0800 	mov.w	r8, #0
 8006046:	e7f6      	b.n	8006036 <_dtoa_r+0x8ee>
 8006048:	4698      	mov	r8, r3
 800604a:	e7f4      	b.n	8006036 <_dtoa_r+0x8ee>
 800604c:	f43f af7d 	beq.w	8005f4a <_dtoa_r+0x802>
 8006050:	4618      	mov	r0, r3
 8006052:	301c      	adds	r0, #28
 8006054:	e772      	b.n	8005f3c <_dtoa_r+0x7f4>
 8006056:	9b03      	ldr	r3, [sp, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	dc37      	bgt.n	80060cc <_dtoa_r+0x984>
 800605c:	9b06      	ldr	r3, [sp, #24]
 800605e:	2b02      	cmp	r3, #2
 8006060:	dd34      	ble.n	80060cc <_dtoa_r+0x984>
 8006062:	9b03      	ldr	r3, [sp, #12]
 8006064:	9302      	str	r3, [sp, #8]
 8006066:	9b02      	ldr	r3, [sp, #8]
 8006068:	b96b      	cbnz	r3, 8006086 <_dtoa_r+0x93e>
 800606a:	4631      	mov	r1, r6
 800606c:	2205      	movs	r2, #5
 800606e:	4620      	mov	r0, r4
 8006070:	f000 f9d4 	bl	800641c <__multadd>
 8006074:	4601      	mov	r1, r0
 8006076:	4606      	mov	r6, r0
 8006078:	ee18 0a10 	vmov	r0, s16
 800607c:	f000 fbee 	bl	800685c <__mcmp>
 8006080:	2800      	cmp	r0, #0
 8006082:	f73f adbb 	bgt.w	8005bfc <_dtoa_r+0x4b4>
 8006086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006088:	9d01      	ldr	r5, [sp, #4]
 800608a:	43db      	mvns	r3, r3
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	f04f 0800 	mov.w	r8, #0
 8006092:	4631      	mov	r1, r6
 8006094:	4620      	mov	r0, r4
 8006096:	f000 f99f 	bl	80063d8 <_Bfree>
 800609a:	2f00      	cmp	r7, #0
 800609c:	f43f aea4 	beq.w	8005de8 <_dtoa_r+0x6a0>
 80060a0:	f1b8 0f00 	cmp.w	r8, #0
 80060a4:	d005      	beq.n	80060b2 <_dtoa_r+0x96a>
 80060a6:	45b8      	cmp	r8, r7
 80060a8:	d003      	beq.n	80060b2 <_dtoa_r+0x96a>
 80060aa:	4641      	mov	r1, r8
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 f993 	bl	80063d8 <_Bfree>
 80060b2:	4639      	mov	r1, r7
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 f98f 	bl	80063d8 <_Bfree>
 80060ba:	e695      	b.n	8005de8 <_dtoa_r+0x6a0>
 80060bc:	2600      	movs	r6, #0
 80060be:	4637      	mov	r7, r6
 80060c0:	e7e1      	b.n	8006086 <_dtoa_r+0x93e>
 80060c2:	9700      	str	r7, [sp, #0]
 80060c4:	4637      	mov	r7, r6
 80060c6:	e599      	b.n	8005bfc <_dtoa_r+0x4b4>
 80060c8:	40240000 	.word	0x40240000
 80060cc:	9b08      	ldr	r3, [sp, #32]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80ca 	beq.w	8006268 <_dtoa_r+0xb20>
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	2d00      	cmp	r5, #0
 80060da:	dd05      	ble.n	80060e8 <_dtoa_r+0x9a0>
 80060dc:	4639      	mov	r1, r7
 80060de:	462a      	mov	r2, r5
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 fb4b 	bl	800677c <__lshift>
 80060e6:	4607      	mov	r7, r0
 80060e8:	f1b8 0f00 	cmp.w	r8, #0
 80060ec:	d05b      	beq.n	80061a6 <_dtoa_r+0xa5e>
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4620      	mov	r0, r4
 80060f2:	f000 f931 	bl	8006358 <_Balloc>
 80060f6:	4605      	mov	r5, r0
 80060f8:	b928      	cbnz	r0, 8006106 <_dtoa_r+0x9be>
 80060fa:	4b87      	ldr	r3, [pc, #540]	; (8006318 <_dtoa_r+0xbd0>)
 80060fc:	4602      	mov	r2, r0
 80060fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006102:	f7ff bb3b 	b.w	800577c <_dtoa_r+0x34>
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	3202      	adds	r2, #2
 800610a:	0092      	lsls	r2, r2, #2
 800610c:	f107 010c 	add.w	r1, r7, #12
 8006110:	300c      	adds	r0, #12
 8006112:	f000 f913 	bl	800633c <memcpy>
 8006116:	2201      	movs	r2, #1
 8006118:	4629      	mov	r1, r5
 800611a:	4620      	mov	r0, r4
 800611c:	f000 fb2e 	bl	800677c <__lshift>
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	f103 0901 	add.w	r9, r3, #1
 8006126:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800612a:	4413      	add	r3, r2
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	f00a 0301 	and.w	r3, sl, #1
 8006132:	46b8      	mov	r8, r7
 8006134:	9304      	str	r3, [sp, #16]
 8006136:	4607      	mov	r7, r0
 8006138:	4631      	mov	r1, r6
 800613a:	ee18 0a10 	vmov	r0, s16
 800613e:	f7ff fa75 	bl	800562c <quorem>
 8006142:	4641      	mov	r1, r8
 8006144:	9002      	str	r0, [sp, #8]
 8006146:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800614a:	ee18 0a10 	vmov	r0, s16
 800614e:	f000 fb85 	bl	800685c <__mcmp>
 8006152:	463a      	mov	r2, r7
 8006154:	9003      	str	r0, [sp, #12]
 8006156:	4631      	mov	r1, r6
 8006158:	4620      	mov	r0, r4
 800615a:	f000 fb9b 	bl	8006894 <__mdiff>
 800615e:	68c2      	ldr	r2, [r0, #12]
 8006160:	f109 3bff 	add.w	fp, r9, #4294967295
 8006164:	4605      	mov	r5, r0
 8006166:	bb02      	cbnz	r2, 80061aa <_dtoa_r+0xa62>
 8006168:	4601      	mov	r1, r0
 800616a:	ee18 0a10 	vmov	r0, s16
 800616e:	f000 fb75 	bl	800685c <__mcmp>
 8006172:	4602      	mov	r2, r0
 8006174:	4629      	mov	r1, r5
 8006176:	4620      	mov	r0, r4
 8006178:	9207      	str	r2, [sp, #28]
 800617a:	f000 f92d 	bl	80063d8 <_Bfree>
 800617e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006182:	ea43 0102 	orr.w	r1, r3, r2
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	430b      	orrs	r3, r1
 800618a:	464d      	mov	r5, r9
 800618c:	d10f      	bne.n	80061ae <_dtoa_r+0xa66>
 800618e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006192:	d02a      	beq.n	80061ea <_dtoa_r+0xaa2>
 8006194:	9b03      	ldr	r3, [sp, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	dd02      	ble.n	80061a0 <_dtoa_r+0xa58>
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80061a0:	f88b a000 	strb.w	sl, [fp]
 80061a4:	e775      	b.n	8006092 <_dtoa_r+0x94a>
 80061a6:	4638      	mov	r0, r7
 80061a8:	e7ba      	b.n	8006120 <_dtoa_r+0x9d8>
 80061aa:	2201      	movs	r2, #1
 80061ac:	e7e2      	b.n	8006174 <_dtoa_r+0xa2c>
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	db04      	blt.n	80061be <_dtoa_r+0xa76>
 80061b4:	9906      	ldr	r1, [sp, #24]
 80061b6:	430b      	orrs	r3, r1
 80061b8:	9904      	ldr	r1, [sp, #16]
 80061ba:	430b      	orrs	r3, r1
 80061bc:	d122      	bne.n	8006204 <_dtoa_r+0xabc>
 80061be:	2a00      	cmp	r2, #0
 80061c0:	ddee      	ble.n	80061a0 <_dtoa_r+0xa58>
 80061c2:	ee18 1a10 	vmov	r1, s16
 80061c6:	2201      	movs	r2, #1
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fad7 	bl	800677c <__lshift>
 80061ce:	4631      	mov	r1, r6
 80061d0:	ee08 0a10 	vmov	s16, r0
 80061d4:	f000 fb42 	bl	800685c <__mcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dc03      	bgt.n	80061e4 <_dtoa_r+0xa9c>
 80061dc:	d1e0      	bne.n	80061a0 <_dtoa_r+0xa58>
 80061de:	f01a 0f01 	tst.w	sl, #1
 80061e2:	d0dd      	beq.n	80061a0 <_dtoa_r+0xa58>
 80061e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80061e8:	d1d7      	bne.n	800619a <_dtoa_r+0xa52>
 80061ea:	2339      	movs	r3, #57	; 0x39
 80061ec:	f88b 3000 	strb.w	r3, [fp]
 80061f0:	462b      	mov	r3, r5
 80061f2:	461d      	mov	r5, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061fa:	2a39      	cmp	r2, #57	; 0x39
 80061fc:	d071      	beq.n	80062e2 <_dtoa_r+0xb9a>
 80061fe:	3201      	adds	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	e746      	b.n	8006092 <_dtoa_r+0x94a>
 8006204:	2a00      	cmp	r2, #0
 8006206:	dd07      	ble.n	8006218 <_dtoa_r+0xad0>
 8006208:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800620c:	d0ed      	beq.n	80061ea <_dtoa_r+0xaa2>
 800620e:	f10a 0301 	add.w	r3, sl, #1
 8006212:	f88b 3000 	strb.w	r3, [fp]
 8006216:	e73c      	b.n	8006092 <_dtoa_r+0x94a>
 8006218:	9b05      	ldr	r3, [sp, #20]
 800621a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800621e:	4599      	cmp	r9, r3
 8006220:	d047      	beq.n	80062b2 <_dtoa_r+0xb6a>
 8006222:	ee18 1a10 	vmov	r1, s16
 8006226:	2300      	movs	r3, #0
 8006228:	220a      	movs	r2, #10
 800622a:	4620      	mov	r0, r4
 800622c:	f000 f8f6 	bl	800641c <__multadd>
 8006230:	45b8      	cmp	r8, r7
 8006232:	ee08 0a10 	vmov	s16, r0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	f04f 020a 	mov.w	r2, #10
 800623e:	4641      	mov	r1, r8
 8006240:	4620      	mov	r0, r4
 8006242:	d106      	bne.n	8006252 <_dtoa_r+0xb0a>
 8006244:	f000 f8ea 	bl	800641c <__multadd>
 8006248:	4680      	mov	r8, r0
 800624a:	4607      	mov	r7, r0
 800624c:	f109 0901 	add.w	r9, r9, #1
 8006250:	e772      	b.n	8006138 <_dtoa_r+0x9f0>
 8006252:	f000 f8e3 	bl	800641c <__multadd>
 8006256:	4639      	mov	r1, r7
 8006258:	4680      	mov	r8, r0
 800625a:	2300      	movs	r3, #0
 800625c:	220a      	movs	r2, #10
 800625e:	4620      	mov	r0, r4
 8006260:	f000 f8dc 	bl	800641c <__multadd>
 8006264:	4607      	mov	r7, r0
 8006266:	e7f1      	b.n	800624c <_dtoa_r+0xb04>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	9302      	str	r3, [sp, #8]
 800626c:	9d01      	ldr	r5, [sp, #4]
 800626e:	ee18 0a10 	vmov	r0, s16
 8006272:	4631      	mov	r1, r6
 8006274:	f7ff f9da 	bl	800562c <quorem>
 8006278:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800627c:	9b01      	ldr	r3, [sp, #4]
 800627e:	f805 ab01 	strb.w	sl, [r5], #1
 8006282:	1aea      	subs	r2, r5, r3
 8006284:	9b02      	ldr	r3, [sp, #8]
 8006286:	4293      	cmp	r3, r2
 8006288:	dd09      	ble.n	800629e <_dtoa_r+0xb56>
 800628a:	ee18 1a10 	vmov	r1, s16
 800628e:	2300      	movs	r3, #0
 8006290:	220a      	movs	r2, #10
 8006292:	4620      	mov	r0, r4
 8006294:	f000 f8c2 	bl	800641c <__multadd>
 8006298:	ee08 0a10 	vmov	s16, r0
 800629c:	e7e7      	b.n	800626e <_dtoa_r+0xb26>
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bfc8      	it	gt
 80062a4:	461d      	movgt	r5, r3
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	bfd8      	it	le
 80062aa:	2501      	movle	r5, #1
 80062ac:	441d      	add	r5, r3
 80062ae:	f04f 0800 	mov.w	r8, #0
 80062b2:	ee18 1a10 	vmov	r1, s16
 80062b6:	2201      	movs	r2, #1
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fa5f 	bl	800677c <__lshift>
 80062be:	4631      	mov	r1, r6
 80062c0:	ee08 0a10 	vmov	s16, r0
 80062c4:	f000 faca 	bl	800685c <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	dc91      	bgt.n	80061f0 <_dtoa_r+0xaa8>
 80062cc:	d102      	bne.n	80062d4 <_dtoa_r+0xb8c>
 80062ce:	f01a 0f01 	tst.w	sl, #1
 80062d2:	d18d      	bne.n	80061f0 <_dtoa_r+0xaa8>
 80062d4:	462b      	mov	r3, r5
 80062d6:	461d      	mov	r5, r3
 80062d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062dc:	2a30      	cmp	r2, #48	; 0x30
 80062de:	d0fa      	beq.n	80062d6 <_dtoa_r+0xb8e>
 80062e0:	e6d7      	b.n	8006092 <_dtoa_r+0x94a>
 80062e2:	9a01      	ldr	r2, [sp, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d184      	bne.n	80061f2 <_dtoa_r+0xaaa>
 80062e8:	9b00      	ldr	r3, [sp, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	2331      	movs	r3, #49	; 0x31
 80062f0:	7013      	strb	r3, [r2, #0]
 80062f2:	e6ce      	b.n	8006092 <_dtoa_r+0x94a>
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <_dtoa_r+0xbd4>)
 80062f6:	f7ff ba95 	b.w	8005824 <_dtoa_r+0xdc>
 80062fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f47f aa6e 	bne.w	80057de <_dtoa_r+0x96>
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <_dtoa_r+0xbd8>)
 8006304:	f7ff ba8e 	b.w	8005824 <_dtoa_r+0xdc>
 8006308:	9b02      	ldr	r3, [sp, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	dcae      	bgt.n	800626c <_dtoa_r+0xb24>
 800630e:	9b06      	ldr	r3, [sp, #24]
 8006310:	2b02      	cmp	r3, #2
 8006312:	f73f aea8 	bgt.w	8006066 <_dtoa_r+0x91e>
 8006316:	e7a9      	b.n	800626c <_dtoa_r+0xb24>
 8006318:	08007c47 	.word	0x08007c47
 800631c:	08007ba4 	.word	0x08007ba4
 8006320:	08007bc8 	.word	0x08007bc8

08006324 <_localeconv_r>:
 8006324:	4800      	ldr	r0, [pc, #0]	; (8006328 <_localeconv_r+0x4>)
 8006326:	4770      	bx	lr
 8006328:	2000016c 	.word	0x2000016c

0800632c <malloc>:
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <malloc+0xc>)
 800632e:	4601      	mov	r1, r0
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f000 bc17 	b.w	8006b64 <_malloc_r>
 8006336:	bf00      	nop
 8006338:	20000018 	.word	0x20000018

0800633c <memcpy>:
 800633c:	440a      	add	r2, r1
 800633e:	4291      	cmp	r1, r2
 8006340:	f100 33ff 	add.w	r3, r0, #4294967295
 8006344:	d100      	bne.n	8006348 <memcpy+0xc>
 8006346:	4770      	bx	lr
 8006348:	b510      	push	{r4, lr}
 800634a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800634e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006352:	4291      	cmp	r1, r2
 8006354:	d1f9      	bne.n	800634a <memcpy+0xe>
 8006356:	bd10      	pop	{r4, pc}

08006358 <_Balloc>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800635c:	4604      	mov	r4, r0
 800635e:	460d      	mov	r5, r1
 8006360:	b976      	cbnz	r6, 8006380 <_Balloc+0x28>
 8006362:	2010      	movs	r0, #16
 8006364:	f7ff ffe2 	bl	800632c <malloc>
 8006368:	4602      	mov	r2, r0
 800636a:	6260      	str	r0, [r4, #36]	; 0x24
 800636c:	b920      	cbnz	r0, 8006378 <_Balloc+0x20>
 800636e:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <_Balloc+0x78>)
 8006370:	4818      	ldr	r0, [pc, #96]	; (80063d4 <_Balloc+0x7c>)
 8006372:	2166      	movs	r1, #102	; 0x66
 8006374:	f000 fdd6 	bl	8006f24 <__assert_func>
 8006378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800637c:	6006      	str	r6, [r0, #0]
 800637e:	60c6      	str	r6, [r0, #12]
 8006380:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006382:	68f3      	ldr	r3, [r6, #12]
 8006384:	b183      	cbz	r3, 80063a8 <_Balloc+0x50>
 8006386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800638e:	b9b8      	cbnz	r0, 80063c0 <_Balloc+0x68>
 8006390:	2101      	movs	r1, #1
 8006392:	fa01 f605 	lsl.w	r6, r1, r5
 8006396:	1d72      	adds	r2, r6, #5
 8006398:	0092      	lsls	r2, r2, #2
 800639a:	4620      	mov	r0, r4
 800639c:	f000 fb60 	bl	8006a60 <_calloc_r>
 80063a0:	b160      	cbz	r0, 80063bc <_Balloc+0x64>
 80063a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063a6:	e00e      	b.n	80063c6 <_Balloc+0x6e>
 80063a8:	2221      	movs	r2, #33	; 0x21
 80063aa:	2104      	movs	r1, #4
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 fb57 	bl	8006a60 <_calloc_r>
 80063b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b4:	60f0      	str	r0, [r6, #12]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e4      	bne.n	8006386 <_Balloc+0x2e>
 80063bc:	2000      	movs	r0, #0
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	6802      	ldr	r2, [r0, #0]
 80063c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063c6:	2300      	movs	r3, #0
 80063c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063cc:	e7f7      	b.n	80063be <_Balloc+0x66>
 80063ce:	bf00      	nop
 80063d0:	08007bd5 	.word	0x08007bd5
 80063d4:	08007c58 	.word	0x08007c58

080063d8 <_Bfree>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063dc:	4605      	mov	r5, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	b976      	cbnz	r6, 8006400 <_Bfree+0x28>
 80063e2:	2010      	movs	r0, #16
 80063e4:	f7ff ffa2 	bl	800632c <malloc>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6268      	str	r0, [r5, #36]	; 0x24
 80063ec:	b920      	cbnz	r0, 80063f8 <_Bfree+0x20>
 80063ee:	4b09      	ldr	r3, [pc, #36]	; (8006414 <_Bfree+0x3c>)
 80063f0:	4809      	ldr	r0, [pc, #36]	; (8006418 <_Bfree+0x40>)
 80063f2:	218a      	movs	r1, #138	; 0x8a
 80063f4:	f000 fd96 	bl	8006f24 <__assert_func>
 80063f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063fc:	6006      	str	r6, [r0, #0]
 80063fe:	60c6      	str	r6, [r0, #12]
 8006400:	b13c      	cbz	r4, 8006412 <_Bfree+0x3a>
 8006402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006404:	6862      	ldr	r2, [r4, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800640c:	6021      	str	r1, [r4, #0]
 800640e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	08007bd5 	.word	0x08007bd5
 8006418:	08007c58 	.word	0x08007c58

0800641c <__multadd>:
 800641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006420:	690d      	ldr	r5, [r1, #16]
 8006422:	4607      	mov	r7, r0
 8006424:	460c      	mov	r4, r1
 8006426:	461e      	mov	r6, r3
 8006428:	f101 0c14 	add.w	ip, r1, #20
 800642c:	2000      	movs	r0, #0
 800642e:	f8dc 3000 	ldr.w	r3, [ip]
 8006432:	b299      	uxth	r1, r3
 8006434:	fb02 6101 	mla	r1, r2, r1, r6
 8006438:	0c1e      	lsrs	r6, r3, #16
 800643a:	0c0b      	lsrs	r3, r1, #16
 800643c:	fb02 3306 	mla	r3, r2, r6, r3
 8006440:	b289      	uxth	r1, r1
 8006442:	3001      	adds	r0, #1
 8006444:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006448:	4285      	cmp	r5, r0
 800644a:	f84c 1b04 	str.w	r1, [ip], #4
 800644e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006452:	dcec      	bgt.n	800642e <__multadd+0x12>
 8006454:	b30e      	cbz	r6, 800649a <__multadd+0x7e>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	42ab      	cmp	r3, r5
 800645a:	dc19      	bgt.n	8006490 <__multadd+0x74>
 800645c:	6861      	ldr	r1, [r4, #4]
 800645e:	4638      	mov	r0, r7
 8006460:	3101      	adds	r1, #1
 8006462:	f7ff ff79 	bl	8006358 <_Balloc>
 8006466:	4680      	mov	r8, r0
 8006468:	b928      	cbnz	r0, 8006476 <__multadd+0x5a>
 800646a:	4602      	mov	r2, r0
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <__multadd+0x84>)
 800646e:	480d      	ldr	r0, [pc, #52]	; (80064a4 <__multadd+0x88>)
 8006470:	21b5      	movs	r1, #181	; 0xb5
 8006472:	f000 fd57 	bl	8006f24 <__assert_func>
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	3202      	adds	r2, #2
 800647a:	f104 010c 	add.w	r1, r4, #12
 800647e:	0092      	lsls	r2, r2, #2
 8006480:	300c      	adds	r0, #12
 8006482:	f7ff ff5b 	bl	800633c <memcpy>
 8006486:	4621      	mov	r1, r4
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff ffa5 	bl	80063d8 <_Bfree>
 800648e:	4644      	mov	r4, r8
 8006490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006494:	3501      	adds	r5, #1
 8006496:	615e      	str	r6, [r3, #20]
 8006498:	6125      	str	r5, [r4, #16]
 800649a:	4620      	mov	r0, r4
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	08007c47 	.word	0x08007c47
 80064a4:	08007c58 	.word	0x08007c58

080064a8 <__hi0bits>:
 80064a8:	0c03      	lsrs	r3, r0, #16
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	b9d3      	cbnz	r3, 80064e4 <__hi0bits+0x3c>
 80064ae:	0400      	lsls	r0, r0, #16
 80064b0:	2310      	movs	r3, #16
 80064b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064b6:	bf04      	itt	eq
 80064b8:	0200      	lsleq	r0, r0, #8
 80064ba:	3308      	addeq	r3, #8
 80064bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80064c0:	bf04      	itt	eq
 80064c2:	0100      	lsleq	r0, r0, #4
 80064c4:	3304      	addeq	r3, #4
 80064c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064ca:	bf04      	itt	eq
 80064cc:	0080      	lsleq	r0, r0, #2
 80064ce:	3302      	addeq	r3, #2
 80064d0:	2800      	cmp	r0, #0
 80064d2:	db05      	blt.n	80064e0 <__hi0bits+0x38>
 80064d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80064d8:	f103 0301 	add.w	r3, r3, #1
 80064dc:	bf08      	it	eq
 80064de:	2320      	moveq	r3, #32
 80064e0:	4618      	mov	r0, r3
 80064e2:	4770      	bx	lr
 80064e4:	2300      	movs	r3, #0
 80064e6:	e7e4      	b.n	80064b2 <__hi0bits+0xa>

080064e8 <__lo0bits>:
 80064e8:	6803      	ldr	r3, [r0, #0]
 80064ea:	f013 0207 	ands.w	r2, r3, #7
 80064ee:	4601      	mov	r1, r0
 80064f0:	d00b      	beq.n	800650a <__lo0bits+0x22>
 80064f2:	07da      	lsls	r2, r3, #31
 80064f4:	d423      	bmi.n	800653e <__lo0bits+0x56>
 80064f6:	0798      	lsls	r0, r3, #30
 80064f8:	bf49      	itett	mi
 80064fa:	085b      	lsrmi	r3, r3, #1
 80064fc:	089b      	lsrpl	r3, r3, #2
 80064fe:	2001      	movmi	r0, #1
 8006500:	600b      	strmi	r3, [r1, #0]
 8006502:	bf5c      	itt	pl
 8006504:	600b      	strpl	r3, [r1, #0]
 8006506:	2002      	movpl	r0, #2
 8006508:	4770      	bx	lr
 800650a:	b298      	uxth	r0, r3
 800650c:	b9a8      	cbnz	r0, 800653a <__lo0bits+0x52>
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	2010      	movs	r0, #16
 8006512:	b2da      	uxtb	r2, r3
 8006514:	b90a      	cbnz	r2, 800651a <__lo0bits+0x32>
 8006516:	3008      	adds	r0, #8
 8006518:	0a1b      	lsrs	r3, r3, #8
 800651a:	071a      	lsls	r2, r3, #28
 800651c:	bf04      	itt	eq
 800651e:	091b      	lsreq	r3, r3, #4
 8006520:	3004      	addeq	r0, #4
 8006522:	079a      	lsls	r2, r3, #30
 8006524:	bf04      	itt	eq
 8006526:	089b      	lsreq	r3, r3, #2
 8006528:	3002      	addeq	r0, #2
 800652a:	07da      	lsls	r2, r3, #31
 800652c:	d403      	bmi.n	8006536 <__lo0bits+0x4e>
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	f100 0001 	add.w	r0, r0, #1
 8006534:	d005      	beq.n	8006542 <__lo0bits+0x5a>
 8006536:	600b      	str	r3, [r1, #0]
 8006538:	4770      	bx	lr
 800653a:	4610      	mov	r0, r2
 800653c:	e7e9      	b.n	8006512 <__lo0bits+0x2a>
 800653e:	2000      	movs	r0, #0
 8006540:	4770      	bx	lr
 8006542:	2020      	movs	r0, #32
 8006544:	4770      	bx	lr
	...

08006548 <__i2b>:
 8006548:	b510      	push	{r4, lr}
 800654a:	460c      	mov	r4, r1
 800654c:	2101      	movs	r1, #1
 800654e:	f7ff ff03 	bl	8006358 <_Balloc>
 8006552:	4602      	mov	r2, r0
 8006554:	b928      	cbnz	r0, 8006562 <__i2b+0x1a>
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <__i2b+0x24>)
 8006558:	4805      	ldr	r0, [pc, #20]	; (8006570 <__i2b+0x28>)
 800655a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800655e:	f000 fce1 	bl	8006f24 <__assert_func>
 8006562:	2301      	movs	r3, #1
 8006564:	6144      	str	r4, [r0, #20]
 8006566:	6103      	str	r3, [r0, #16]
 8006568:	bd10      	pop	{r4, pc}
 800656a:	bf00      	nop
 800656c:	08007c47 	.word	0x08007c47
 8006570:	08007c58 	.word	0x08007c58

08006574 <__multiply>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	4691      	mov	r9, r2
 800657a:	690a      	ldr	r2, [r1, #16]
 800657c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006580:	429a      	cmp	r2, r3
 8006582:	bfb8      	it	lt
 8006584:	460b      	movlt	r3, r1
 8006586:	460c      	mov	r4, r1
 8006588:	bfbc      	itt	lt
 800658a:	464c      	movlt	r4, r9
 800658c:	4699      	movlt	r9, r3
 800658e:	6927      	ldr	r7, [r4, #16]
 8006590:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006594:	68a3      	ldr	r3, [r4, #8]
 8006596:	6861      	ldr	r1, [r4, #4]
 8006598:	eb07 060a 	add.w	r6, r7, sl
 800659c:	42b3      	cmp	r3, r6
 800659e:	b085      	sub	sp, #20
 80065a0:	bfb8      	it	lt
 80065a2:	3101      	addlt	r1, #1
 80065a4:	f7ff fed8 	bl	8006358 <_Balloc>
 80065a8:	b930      	cbnz	r0, 80065b8 <__multiply+0x44>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4b44      	ldr	r3, [pc, #272]	; (80066c0 <__multiply+0x14c>)
 80065ae:	4845      	ldr	r0, [pc, #276]	; (80066c4 <__multiply+0x150>)
 80065b0:	f240 115d 	movw	r1, #349	; 0x15d
 80065b4:	f000 fcb6 	bl	8006f24 <__assert_func>
 80065b8:	f100 0514 	add.w	r5, r0, #20
 80065bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065c0:	462b      	mov	r3, r5
 80065c2:	2200      	movs	r2, #0
 80065c4:	4543      	cmp	r3, r8
 80065c6:	d321      	bcc.n	800660c <__multiply+0x98>
 80065c8:	f104 0314 	add.w	r3, r4, #20
 80065cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065d0:	f109 0314 	add.w	r3, r9, #20
 80065d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065d8:	9202      	str	r2, [sp, #8]
 80065da:	1b3a      	subs	r2, r7, r4
 80065dc:	3a15      	subs	r2, #21
 80065de:	f022 0203 	bic.w	r2, r2, #3
 80065e2:	3204      	adds	r2, #4
 80065e4:	f104 0115 	add.w	r1, r4, #21
 80065e8:	428f      	cmp	r7, r1
 80065ea:	bf38      	it	cc
 80065ec:	2204      	movcc	r2, #4
 80065ee:	9201      	str	r2, [sp, #4]
 80065f0:	9a02      	ldr	r2, [sp, #8]
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d80c      	bhi.n	8006612 <__multiply+0x9e>
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	dd03      	ble.n	8006604 <__multiply+0x90>
 80065fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05a      	beq.n	80066ba <__multiply+0x146>
 8006604:	6106      	str	r6, [r0, #16]
 8006606:	b005      	add	sp, #20
 8006608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660c:	f843 2b04 	str.w	r2, [r3], #4
 8006610:	e7d8      	b.n	80065c4 <__multiply+0x50>
 8006612:	f8b3 a000 	ldrh.w	sl, [r3]
 8006616:	f1ba 0f00 	cmp.w	sl, #0
 800661a:	d024      	beq.n	8006666 <__multiply+0xf2>
 800661c:	f104 0e14 	add.w	lr, r4, #20
 8006620:	46a9      	mov	r9, r5
 8006622:	f04f 0c00 	mov.w	ip, #0
 8006626:	f85e 2b04 	ldr.w	r2, [lr], #4
 800662a:	f8d9 1000 	ldr.w	r1, [r9]
 800662e:	fa1f fb82 	uxth.w	fp, r2
 8006632:	b289      	uxth	r1, r1
 8006634:	fb0a 110b 	mla	r1, sl, fp, r1
 8006638:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800663c:	f8d9 2000 	ldr.w	r2, [r9]
 8006640:	4461      	add	r1, ip
 8006642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006646:	fb0a c20b 	mla	r2, sl, fp, ip
 800664a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800664e:	b289      	uxth	r1, r1
 8006650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006654:	4577      	cmp	r7, lr
 8006656:	f849 1b04 	str.w	r1, [r9], #4
 800665a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800665e:	d8e2      	bhi.n	8006626 <__multiply+0xb2>
 8006660:	9a01      	ldr	r2, [sp, #4]
 8006662:	f845 c002 	str.w	ip, [r5, r2]
 8006666:	9a03      	ldr	r2, [sp, #12]
 8006668:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800666c:	3304      	adds	r3, #4
 800666e:	f1b9 0f00 	cmp.w	r9, #0
 8006672:	d020      	beq.n	80066b6 <__multiply+0x142>
 8006674:	6829      	ldr	r1, [r5, #0]
 8006676:	f104 0c14 	add.w	ip, r4, #20
 800667a:	46ae      	mov	lr, r5
 800667c:	f04f 0a00 	mov.w	sl, #0
 8006680:	f8bc b000 	ldrh.w	fp, [ip]
 8006684:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006688:	fb09 220b 	mla	r2, r9, fp, r2
 800668c:	4492      	add	sl, r2
 800668e:	b289      	uxth	r1, r1
 8006690:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006694:	f84e 1b04 	str.w	r1, [lr], #4
 8006698:	f85c 2b04 	ldr.w	r2, [ip], #4
 800669c:	f8be 1000 	ldrh.w	r1, [lr]
 80066a0:	0c12      	lsrs	r2, r2, #16
 80066a2:	fb09 1102 	mla	r1, r9, r2, r1
 80066a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80066aa:	4567      	cmp	r7, ip
 80066ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066b0:	d8e6      	bhi.n	8006680 <__multiply+0x10c>
 80066b2:	9a01      	ldr	r2, [sp, #4]
 80066b4:	50a9      	str	r1, [r5, r2]
 80066b6:	3504      	adds	r5, #4
 80066b8:	e79a      	b.n	80065f0 <__multiply+0x7c>
 80066ba:	3e01      	subs	r6, #1
 80066bc:	e79c      	b.n	80065f8 <__multiply+0x84>
 80066be:	bf00      	nop
 80066c0:	08007c47 	.word	0x08007c47
 80066c4:	08007c58 	.word	0x08007c58

080066c8 <__pow5mult>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	4615      	mov	r5, r2
 80066ce:	f012 0203 	ands.w	r2, r2, #3
 80066d2:	4606      	mov	r6, r0
 80066d4:	460f      	mov	r7, r1
 80066d6:	d007      	beq.n	80066e8 <__pow5mult+0x20>
 80066d8:	4c25      	ldr	r4, [pc, #148]	; (8006770 <__pow5mult+0xa8>)
 80066da:	3a01      	subs	r2, #1
 80066dc:	2300      	movs	r3, #0
 80066de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066e2:	f7ff fe9b 	bl	800641c <__multadd>
 80066e6:	4607      	mov	r7, r0
 80066e8:	10ad      	asrs	r5, r5, #2
 80066ea:	d03d      	beq.n	8006768 <__pow5mult+0xa0>
 80066ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066ee:	b97c      	cbnz	r4, 8006710 <__pow5mult+0x48>
 80066f0:	2010      	movs	r0, #16
 80066f2:	f7ff fe1b 	bl	800632c <malloc>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6270      	str	r0, [r6, #36]	; 0x24
 80066fa:	b928      	cbnz	r0, 8006708 <__pow5mult+0x40>
 80066fc:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <__pow5mult+0xac>)
 80066fe:	481e      	ldr	r0, [pc, #120]	; (8006778 <__pow5mult+0xb0>)
 8006700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006704:	f000 fc0e 	bl	8006f24 <__assert_func>
 8006708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800670c:	6004      	str	r4, [r0, #0]
 800670e:	60c4      	str	r4, [r0, #12]
 8006710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006718:	b94c      	cbnz	r4, 800672e <__pow5mult+0x66>
 800671a:	f240 2171 	movw	r1, #625	; 0x271
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ff12 	bl	8006548 <__i2b>
 8006724:	2300      	movs	r3, #0
 8006726:	f8c8 0008 	str.w	r0, [r8, #8]
 800672a:	4604      	mov	r4, r0
 800672c:	6003      	str	r3, [r0, #0]
 800672e:	f04f 0900 	mov.w	r9, #0
 8006732:	07eb      	lsls	r3, r5, #31
 8006734:	d50a      	bpl.n	800674c <__pow5mult+0x84>
 8006736:	4639      	mov	r1, r7
 8006738:	4622      	mov	r2, r4
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff ff1a 	bl	8006574 <__multiply>
 8006740:	4639      	mov	r1, r7
 8006742:	4680      	mov	r8, r0
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff fe47 	bl	80063d8 <_Bfree>
 800674a:	4647      	mov	r7, r8
 800674c:	106d      	asrs	r5, r5, #1
 800674e:	d00b      	beq.n	8006768 <__pow5mult+0xa0>
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	b938      	cbnz	r0, 8006764 <__pow5mult+0x9c>
 8006754:	4622      	mov	r2, r4
 8006756:	4621      	mov	r1, r4
 8006758:	4630      	mov	r0, r6
 800675a:	f7ff ff0b 	bl	8006574 <__multiply>
 800675e:	6020      	str	r0, [r4, #0]
 8006760:	f8c0 9000 	str.w	r9, [r0]
 8006764:	4604      	mov	r4, r0
 8006766:	e7e4      	b.n	8006732 <__pow5mult+0x6a>
 8006768:	4638      	mov	r0, r7
 800676a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676e:	bf00      	nop
 8006770:	08007da8 	.word	0x08007da8
 8006774:	08007bd5 	.word	0x08007bd5
 8006778:	08007c58 	.word	0x08007c58

0800677c <__lshift>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	460c      	mov	r4, r1
 8006782:	6849      	ldr	r1, [r1, #4]
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	4607      	mov	r7, r0
 800678e:	4691      	mov	r9, r2
 8006790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006794:	f108 0601 	add.w	r6, r8, #1
 8006798:	42b3      	cmp	r3, r6
 800679a:	db0b      	blt.n	80067b4 <__lshift+0x38>
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff fddb 	bl	8006358 <_Balloc>
 80067a2:	4605      	mov	r5, r0
 80067a4:	b948      	cbnz	r0, 80067ba <__lshift+0x3e>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b2a      	ldr	r3, [pc, #168]	; (8006854 <__lshift+0xd8>)
 80067aa:	482b      	ldr	r0, [pc, #172]	; (8006858 <__lshift+0xdc>)
 80067ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067b0:	f000 fbb8 	bl	8006f24 <__assert_func>
 80067b4:	3101      	adds	r1, #1
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	e7ee      	b.n	8006798 <__lshift+0x1c>
 80067ba:	2300      	movs	r3, #0
 80067bc:	f100 0114 	add.w	r1, r0, #20
 80067c0:	f100 0210 	add.w	r2, r0, #16
 80067c4:	4618      	mov	r0, r3
 80067c6:	4553      	cmp	r3, sl
 80067c8:	db37      	blt.n	800683a <__lshift+0xbe>
 80067ca:	6920      	ldr	r0, [r4, #16]
 80067cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067d0:	f104 0314 	add.w	r3, r4, #20
 80067d4:	f019 091f 	ands.w	r9, r9, #31
 80067d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067e0:	d02f      	beq.n	8006842 <__lshift+0xc6>
 80067e2:	f1c9 0e20 	rsb	lr, r9, #32
 80067e6:	468a      	mov	sl, r1
 80067e8:	f04f 0c00 	mov.w	ip, #0
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	fa02 f209 	lsl.w	r2, r2, r9
 80067f2:	ea42 020c 	orr.w	r2, r2, ip
 80067f6:	f84a 2b04 	str.w	r2, [sl], #4
 80067fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fe:	4298      	cmp	r0, r3
 8006800:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006804:	d8f2      	bhi.n	80067ec <__lshift+0x70>
 8006806:	1b03      	subs	r3, r0, r4
 8006808:	3b15      	subs	r3, #21
 800680a:	f023 0303 	bic.w	r3, r3, #3
 800680e:	3304      	adds	r3, #4
 8006810:	f104 0215 	add.w	r2, r4, #21
 8006814:	4290      	cmp	r0, r2
 8006816:	bf38      	it	cc
 8006818:	2304      	movcc	r3, #4
 800681a:	f841 c003 	str.w	ip, [r1, r3]
 800681e:	f1bc 0f00 	cmp.w	ip, #0
 8006822:	d001      	beq.n	8006828 <__lshift+0xac>
 8006824:	f108 0602 	add.w	r6, r8, #2
 8006828:	3e01      	subs	r6, #1
 800682a:	4638      	mov	r0, r7
 800682c:	612e      	str	r6, [r5, #16]
 800682e:	4621      	mov	r1, r4
 8006830:	f7ff fdd2 	bl	80063d8 <_Bfree>
 8006834:	4628      	mov	r0, r5
 8006836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683a:	f842 0f04 	str.w	r0, [r2, #4]!
 800683e:	3301      	adds	r3, #1
 8006840:	e7c1      	b.n	80067c6 <__lshift+0x4a>
 8006842:	3904      	subs	r1, #4
 8006844:	f853 2b04 	ldr.w	r2, [r3], #4
 8006848:	f841 2f04 	str.w	r2, [r1, #4]!
 800684c:	4298      	cmp	r0, r3
 800684e:	d8f9      	bhi.n	8006844 <__lshift+0xc8>
 8006850:	e7ea      	b.n	8006828 <__lshift+0xac>
 8006852:	bf00      	nop
 8006854:	08007c47 	.word	0x08007c47
 8006858:	08007c58 	.word	0x08007c58

0800685c <__mcmp>:
 800685c:	b530      	push	{r4, r5, lr}
 800685e:	6902      	ldr	r2, [r0, #16]
 8006860:	690c      	ldr	r4, [r1, #16]
 8006862:	1b12      	subs	r2, r2, r4
 8006864:	d10e      	bne.n	8006884 <__mcmp+0x28>
 8006866:	f100 0314 	add.w	r3, r0, #20
 800686a:	3114      	adds	r1, #20
 800686c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800687c:	42a5      	cmp	r5, r4
 800687e:	d003      	beq.n	8006888 <__mcmp+0x2c>
 8006880:	d305      	bcc.n	800688e <__mcmp+0x32>
 8006882:	2201      	movs	r2, #1
 8006884:	4610      	mov	r0, r2
 8006886:	bd30      	pop	{r4, r5, pc}
 8006888:	4283      	cmp	r3, r0
 800688a:	d3f3      	bcc.n	8006874 <__mcmp+0x18>
 800688c:	e7fa      	b.n	8006884 <__mcmp+0x28>
 800688e:	f04f 32ff 	mov.w	r2, #4294967295
 8006892:	e7f7      	b.n	8006884 <__mcmp+0x28>

08006894 <__mdiff>:
 8006894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	460c      	mov	r4, r1
 800689a:	4606      	mov	r6, r0
 800689c:	4611      	mov	r1, r2
 800689e:	4620      	mov	r0, r4
 80068a0:	4690      	mov	r8, r2
 80068a2:	f7ff ffdb 	bl	800685c <__mcmp>
 80068a6:	1e05      	subs	r5, r0, #0
 80068a8:	d110      	bne.n	80068cc <__mdiff+0x38>
 80068aa:	4629      	mov	r1, r5
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7ff fd53 	bl	8006358 <_Balloc>
 80068b2:	b930      	cbnz	r0, 80068c2 <__mdiff+0x2e>
 80068b4:	4b3a      	ldr	r3, [pc, #232]	; (80069a0 <__mdiff+0x10c>)
 80068b6:	4602      	mov	r2, r0
 80068b8:	f240 2132 	movw	r1, #562	; 0x232
 80068bc:	4839      	ldr	r0, [pc, #228]	; (80069a4 <__mdiff+0x110>)
 80068be:	f000 fb31 	bl	8006f24 <__assert_func>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	bfa4      	itt	ge
 80068ce:	4643      	movge	r3, r8
 80068d0:	46a0      	movge	r8, r4
 80068d2:	4630      	mov	r0, r6
 80068d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068d8:	bfa6      	itte	ge
 80068da:	461c      	movge	r4, r3
 80068dc:	2500      	movge	r5, #0
 80068de:	2501      	movlt	r5, #1
 80068e0:	f7ff fd3a 	bl	8006358 <_Balloc>
 80068e4:	b920      	cbnz	r0, 80068f0 <__mdiff+0x5c>
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <__mdiff+0x10c>)
 80068e8:	4602      	mov	r2, r0
 80068ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068ee:	e7e5      	b.n	80068bc <__mdiff+0x28>
 80068f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068f4:	6926      	ldr	r6, [r4, #16]
 80068f6:	60c5      	str	r5, [r0, #12]
 80068f8:	f104 0914 	add.w	r9, r4, #20
 80068fc:	f108 0514 	add.w	r5, r8, #20
 8006900:	f100 0e14 	add.w	lr, r0, #20
 8006904:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006908:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800690c:	f108 0210 	add.w	r2, r8, #16
 8006910:	46f2      	mov	sl, lr
 8006912:	2100      	movs	r1, #0
 8006914:	f859 3b04 	ldr.w	r3, [r9], #4
 8006918:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800691c:	fa1f f883 	uxth.w	r8, r3
 8006920:	fa11 f18b 	uxtah	r1, r1, fp
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	eba1 0808 	sub.w	r8, r1, r8
 800692a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800692e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006932:	fa1f f888 	uxth.w	r8, r8
 8006936:	1419      	asrs	r1, r3, #16
 8006938:	454e      	cmp	r6, r9
 800693a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800693e:	f84a 3b04 	str.w	r3, [sl], #4
 8006942:	d8e7      	bhi.n	8006914 <__mdiff+0x80>
 8006944:	1b33      	subs	r3, r6, r4
 8006946:	3b15      	subs	r3, #21
 8006948:	f023 0303 	bic.w	r3, r3, #3
 800694c:	3304      	adds	r3, #4
 800694e:	3415      	adds	r4, #21
 8006950:	42a6      	cmp	r6, r4
 8006952:	bf38      	it	cc
 8006954:	2304      	movcc	r3, #4
 8006956:	441d      	add	r5, r3
 8006958:	4473      	add	r3, lr
 800695a:	469e      	mov	lr, r3
 800695c:	462e      	mov	r6, r5
 800695e:	4566      	cmp	r6, ip
 8006960:	d30e      	bcc.n	8006980 <__mdiff+0xec>
 8006962:	f10c 0203 	add.w	r2, ip, #3
 8006966:	1b52      	subs	r2, r2, r5
 8006968:	f022 0203 	bic.w	r2, r2, #3
 800696c:	3d03      	subs	r5, #3
 800696e:	45ac      	cmp	ip, r5
 8006970:	bf38      	it	cc
 8006972:	2200      	movcc	r2, #0
 8006974:	441a      	add	r2, r3
 8006976:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800697a:	b17b      	cbz	r3, 800699c <__mdiff+0x108>
 800697c:	6107      	str	r7, [r0, #16]
 800697e:	e7a3      	b.n	80068c8 <__mdiff+0x34>
 8006980:	f856 8b04 	ldr.w	r8, [r6], #4
 8006984:	fa11 f288 	uxtah	r2, r1, r8
 8006988:	1414      	asrs	r4, r2, #16
 800698a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800698e:	b292      	uxth	r2, r2
 8006990:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006994:	f84e 2b04 	str.w	r2, [lr], #4
 8006998:	1421      	asrs	r1, r4, #16
 800699a:	e7e0      	b.n	800695e <__mdiff+0xca>
 800699c:	3f01      	subs	r7, #1
 800699e:	e7ea      	b.n	8006976 <__mdiff+0xe2>
 80069a0:	08007c47 	.word	0x08007c47
 80069a4:	08007c58 	.word	0x08007c58

080069a8 <__d2b>:
 80069a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	4689      	mov	r9, r1
 80069ae:	2101      	movs	r1, #1
 80069b0:	ec57 6b10 	vmov	r6, r7, d0
 80069b4:	4690      	mov	r8, r2
 80069b6:	f7ff fccf 	bl	8006358 <_Balloc>
 80069ba:	4604      	mov	r4, r0
 80069bc:	b930      	cbnz	r0, 80069cc <__d2b+0x24>
 80069be:	4602      	mov	r2, r0
 80069c0:	4b25      	ldr	r3, [pc, #148]	; (8006a58 <__d2b+0xb0>)
 80069c2:	4826      	ldr	r0, [pc, #152]	; (8006a5c <__d2b+0xb4>)
 80069c4:	f240 310a 	movw	r1, #778	; 0x30a
 80069c8:	f000 faac 	bl	8006f24 <__assert_func>
 80069cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80069d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069d4:	bb35      	cbnz	r5, 8006a24 <__d2b+0x7c>
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	d028      	beq.n	8006a2e <__d2b+0x86>
 80069dc:	4668      	mov	r0, sp
 80069de:	9600      	str	r6, [sp, #0]
 80069e0:	f7ff fd82 	bl	80064e8 <__lo0bits>
 80069e4:	9900      	ldr	r1, [sp, #0]
 80069e6:	b300      	cbz	r0, 8006a2a <__d2b+0x82>
 80069e8:	9a01      	ldr	r2, [sp, #4]
 80069ea:	f1c0 0320 	rsb	r3, r0, #32
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	430b      	orrs	r3, r1
 80069f4:	40c2      	lsrs	r2, r0
 80069f6:	6163      	str	r3, [r4, #20]
 80069f8:	9201      	str	r2, [sp, #4]
 80069fa:	9b01      	ldr	r3, [sp, #4]
 80069fc:	61a3      	str	r3, [r4, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2202      	movne	r2, #2
 8006a04:	2201      	moveq	r2, #1
 8006a06:	6122      	str	r2, [r4, #16]
 8006a08:	b1d5      	cbz	r5, 8006a40 <__d2b+0x98>
 8006a0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a0e:	4405      	add	r5, r0
 8006a10:	f8c9 5000 	str.w	r5, [r9]
 8006a14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a18:	f8c8 0000 	str.w	r0, [r8]
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	b003      	add	sp, #12
 8006a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a28:	e7d5      	b.n	80069d6 <__d2b+0x2e>
 8006a2a:	6161      	str	r1, [r4, #20]
 8006a2c:	e7e5      	b.n	80069fa <__d2b+0x52>
 8006a2e:	a801      	add	r0, sp, #4
 8006a30:	f7ff fd5a 	bl	80064e8 <__lo0bits>
 8006a34:	9b01      	ldr	r3, [sp, #4]
 8006a36:	6163      	str	r3, [r4, #20]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	6122      	str	r2, [r4, #16]
 8006a3c:	3020      	adds	r0, #32
 8006a3e:	e7e3      	b.n	8006a08 <__d2b+0x60>
 8006a40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a48:	f8c9 0000 	str.w	r0, [r9]
 8006a4c:	6918      	ldr	r0, [r3, #16]
 8006a4e:	f7ff fd2b 	bl	80064a8 <__hi0bits>
 8006a52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a56:	e7df      	b.n	8006a18 <__d2b+0x70>
 8006a58:	08007c47 	.word	0x08007c47
 8006a5c:	08007c58 	.word	0x08007c58

08006a60 <_calloc_r>:
 8006a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a62:	fba1 2402 	umull	r2, r4, r1, r2
 8006a66:	b94c      	cbnz	r4, 8006a7c <_calloc_r+0x1c>
 8006a68:	4611      	mov	r1, r2
 8006a6a:	9201      	str	r2, [sp, #4]
 8006a6c:	f000 f87a 	bl	8006b64 <_malloc_r>
 8006a70:	9a01      	ldr	r2, [sp, #4]
 8006a72:	4605      	mov	r5, r0
 8006a74:	b930      	cbnz	r0, 8006a84 <_calloc_r+0x24>
 8006a76:	4628      	mov	r0, r5
 8006a78:	b003      	add	sp, #12
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	220c      	movs	r2, #12
 8006a7e:	6002      	str	r2, [r0, #0]
 8006a80:	2500      	movs	r5, #0
 8006a82:	e7f8      	b.n	8006a76 <_calloc_r+0x16>
 8006a84:	4621      	mov	r1, r4
 8006a86:	f7fe f93f 	bl	8004d08 <memset>
 8006a8a:	e7f4      	b.n	8006a76 <_calloc_r+0x16>

08006a8c <_free_r>:
 8006a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d044      	beq.n	8006b1c <_free_r+0x90>
 8006a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a96:	9001      	str	r0, [sp, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a9e:	bfb8      	it	lt
 8006aa0:	18e4      	addlt	r4, r4, r3
 8006aa2:	f000 fa9b 	bl	8006fdc <__malloc_lock>
 8006aa6:	4a1e      	ldr	r2, [pc, #120]	; (8006b20 <_free_r+0x94>)
 8006aa8:	9801      	ldr	r0, [sp, #4]
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	b933      	cbnz	r3, 8006abc <_free_r+0x30>
 8006aae:	6063      	str	r3, [r4, #4]
 8006ab0:	6014      	str	r4, [r2, #0]
 8006ab2:	b003      	add	sp, #12
 8006ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ab8:	f000 ba96 	b.w	8006fe8 <__malloc_unlock>
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d908      	bls.n	8006ad2 <_free_r+0x46>
 8006ac0:	6825      	ldr	r5, [r4, #0]
 8006ac2:	1961      	adds	r1, r4, r5
 8006ac4:	428b      	cmp	r3, r1
 8006ac6:	bf01      	itttt	eq
 8006ac8:	6819      	ldreq	r1, [r3, #0]
 8006aca:	685b      	ldreq	r3, [r3, #4]
 8006acc:	1949      	addeq	r1, r1, r5
 8006ace:	6021      	streq	r1, [r4, #0]
 8006ad0:	e7ed      	b.n	8006aae <_free_r+0x22>
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	b10b      	cbz	r3, 8006adc <_free_r+0x50>
 8006ad8:	42a3      	cmp	r3, r4
 8006ada:	d9fa      	bls.n	8006ad2 <_free_r+0x46>
 8006adc:	6811      	ldr	r1, [r2, #0]
 8006ade:	1855      	adds	r5, r2, r1
 8006ae0:	42a5      	cmp	r5, r4
 8006ae2:	d10b      	bne.n	8006afc <_free_r+0x70>
 8006ae4:	6824      	ldr	r4, [r4, #0]
 8006ae6:	4421      	add	r1, r4
 8006ae8:	1854      	adds	r4, r2, r1
 8006aea:	42a3      	cmp	r3, r4
 8006aec:	6011      	str	r1, [r2, #0]
 8006aee:	d1e0      	bne.n	8006ab2 <_free_r+0x26>
 8006af0:	681c      	ldr	r4, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	6053      	str	r3, [r2, #4]
 8006af6:	4421      	add	r1, r4
 8006af8:	6011      	str	r1, [r2, #0]
 8006afa:	e7da      	b.n	8006ab2 <_free_r+0x26>
 8006afc:	d902      	bls.n	8006b04 <_free_r+0x78>
 8006afe:	230c      	movs	r3, #12
 8006b00:	6003      	str	r3, [r0, #0]
 8006b02:	e7d6      	b.n	8006ab2 <_free_r+0x26>
 8006b04:	6825      	ldr	r5, [r4, #0]
 8006b06:	1961      	adds	r1, r4, r5
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	bf04      	itt	eq
 8006b0c:	6819      	ldreq	r1, [r3, #0]
 8006b0e:	685b      	ldreq	r3, [r3, #4]
 8006b10:	6063      	str	r3, [r4, #4]
 8006b12:	bf04      	itt	eq
 8006b14:	1949      	addeq	r1, r1, r5
 8006b16:	6021      	streq	r1, [r4, #0]
 8006b18:	6054      	str	r4, [r2, #4]
 8006b1a:	e7ca      	b.n	8006ab2 <_free_r+0x26>
 8006b1c:	b003      	add	sp, #12
 8006b1e:	bd30      	pop	{r4, r5, pc}
 8006b20:	200002f0 	.word	0x200002f0

08006b24 <sbrk_aligned>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4e0e      	ldr	r6, [pc, #56]	; (8006b60 <sbrk_aligned+0x3c>)
 8006b28:	460c      	mov	r4, r1
 8006b2a:	6831      	ldr	r1, [r6, #0]
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	b911      	cbnz	r1, 8006b36 <sbrk_aligned+0x12>
 8006b30:	f000 f9e8 	bl	8006f04 <_sbrk_r>
 8006b34:	6030      	str	r0, [r6, #0]
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f9e3 	bl	8006f04 <_sbrk_r>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	d00a      	beq.n	8006b58 <sbrk_aligned+0x34>
 8006b42:	1cc4      	adds	r4, r0, #3
 8006b44:	f024 0403 	bic.w	r4, r4, #3
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d007      	beq.n	8006b5c <sbrk_aligned+0x38>
 8006b4c:	1a21      	subs	r1, r4, r0
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 f9d8 	bl	8006f04 <_sbrk_r>
 8006b54:	3001      	adds	r0, #1
 8006b56:	d101      	bne.n	8006b5c <sbrk_aligned+0x38>
 8006b58:	f04f 34ff 	mov.w	r4, #4294967295
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	200002f4 	.word	0x200002f4

08006b64 <_malloc_r>:
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	1ccd      	adds	r5, r1, #3
 8006b6a:	f025 0503 	bic.w	r5, r5, #3
 8006b6e:	3508      	adds	r5, #8
 8006b70:	2d0c      	cmp	r5, #12
 8006b72:	bf38      	it	cc
 8006b74:	250c      	movcc	r5, #12
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	4607      	mov	r7, r0
 8006b7a:	db01      	blt.n	8006b80 <_malloc_r+0x1c>
 8006b7c:	42a9      	cmp	r1, r5
 8006b7e:	d905      	bls.n	8006b8c <_malloc_r+0x28>
 8006b80:	230c      	movs	r3, #12
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	2600      	movs	r6, #0
 8006b86:	4630      	mov	r0, r6
 8006b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8c:	4e2e      	ldr	r6, [pc, #184]	; (8006c48 <_malloc_r+0xe4>)
 8006b8e:	f000 fa25 	bl	8006fdc <__malloc_lock>
 8006b92:	6833      	ldr	r3, [r6, #0]
 8006b94:	461c      	mov	r4, r3
 8006b96:	bb34      	cbnz	r4, 8006be6 <_malloc_r+0x82>
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f7ff ffc2 	bl	8006b24 <sbrk_aligned>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	d14d      	bne.n	8006c42 <_malloc_r+0xde>
 8006ba6:	6834      	ldr	r4, [r6, #0]
 8006ba8:	4626      	mov	r6, r4
 8006baa:	2e00      	cmp	r6, #0
 8006bac:	d140      	bne.n	8006c30 <_malloc_r+0xcc>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	eb04 0803 	add.w	r8, r4, r3
 8006bb8:	f000 f9a4 	bl	8006f04 <_sbrk_r>
 8006bbc:	4580      	cmp	r8, r0
 8006bbe:	d13a      	bne.n	8006c36 <_malloc_r+0xd2>
 8006bc0:	6821      	ldr	r1, [r4, #0]
 8006bc2:	3503      	adds	r5, #3
 8006bc4:	1a6d      	subs	r5, r5, r1
 8006bc6:	f025 0503 	bic.w	r5, r5, #3
 8006bca:	3508      	adds	r5, #8
 8006bcc:	2d0c      	cmp	r5, #12
 8006bce:	bf38      	it	cc
 8006bd0:	250c      	movcc	r5, #12
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	f7ff ffa5 	bl	8006b24 <sbrk_aligned>
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d02b      	beq.n	8006c36 <_malloc_r+0xd2>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	442b      	add	r3, r5
 8006be2:	6023      	str	r3, [r4, #0]
 8006be4:	e00e      	b.n	8006c04 <_malloc_r+0xa0>
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	1b52      	subs	r2, r2, r5
 8006bea:	d41e      	bmi.n	8006c2a <_malloc_r+0xc6>
 8006bec:	2a0b      	cmp	r2, #11
 8006bee:	d916      	bls.n	8006c1e <_malloc_r+0xba>
 8006bf0:	1961      	adds	r1, r4, r5
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	6025      	str	r5, [r4, #0]
 8006bf6:	bf18      	it	ne
 8006bf8:	6059      	strne	r1, [r3, #4]
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	bf08      	it	eq
 8006bfe:	6031      	streq	r1, [r6, #0]
 8006c00:	5162      	str	r2, [r4, r5]
 8006c02:	604b      	str	r3, [r1, #4]
 8006c04:	4638      	mov	r0, r7
 8006c06:	f104 060b 	add.w	r6, r4, #11
 8006c0a:	f000 f9ed 	bl	8006fe8 <__malloc_unlock>
 8006c0e:	f026 0607 	bic.w	r6, r6, #7
 8006c12:	1d23      	adds	r3, r4, #4
 8006c14:	1af2      	subs	r2, r6, r3
 8006c16:	d0b6      	beq.n	8006b86 <_malloc_r+0x22>
 8006c18:	1b9b      	subs	r3, r3, r6
 8006c1a:	50a3      	str	r3, [r4, r2]
 8006c1c:	e7b3      	b.n	8006b86 <_malloc_r+0x22>
 8006c1e:	6862      	ldr	r2, [r4, #4]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	bf0c      	ite	eq
 8006c24:	6032      	streq	r2, [r6, #0]
 8006c26:	605a      	strne	r2, [r3, #4]
 8006c28:	e7ec      	b.n	8006c04 <_malloc_r+0xa0>
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	6864      	ldr	r4, [r4, #4]
 8006c2e:	e7b2      	b.n	8006b96 <_malloc_r+0x32>
 8006c30:	4634      	mov	r4, r6
 8006c32:	6876      	ldr	r6, [r6, #4]
 8006c34:	e7b9      	b.n	8006baa <_malloc_r+0x46>
 8006c36:	230c      	movs	r3, #12
 8006c38:	603b      	str	r3, [r7, #0]
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f000 f9d4 	bl	8006fe8 <__malloc_unlock>
 8006c40:	e7a1      	b.n	8006b86 <_malloc_r+0x22>
 8006c42:	6025      	str	r5, [r4, #0]
 8006c44:	e7de      	b.n	8006c04 <_malloc_r+0xa0>
 8006c46:	bf00      	nop
 8006c48:	200002f0 	.word	0x200002f0

08006c4c <__ssputs_r>:
 8006c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c50:	688e      	ldr	r6, [r1, #8]
 8006c52:	429e      	cmp	r6, r3
 8006c54:	4682      	mov	sl, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4690      	mov	r8, r2
 8006c5a:	461f      	mov	r7, r3
 8006c5c:	d838      	bhi.n	8006cd0 <__ssputs_r+0x84>
 8006c5e:	898a      	ldrh	r2, [r1, #12]
 8006c60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c64:	d032      	beq.n	8006ccc <__ssputs_r+0x80>
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	6909      	ldr	r1, [r1, #16]
 8006c6a:	eba5 0901 	sub.w	r9, r5, r1
 8006c6e:	6965      	ldr	r5, [r4, #20]
 8006c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c78:	3301      	adds	r3, #1
 8006c7a:	444b      	add	r3, r9
 8006c7c:	106d      	asrs	r5, r5, #1
 8006c7e:	429d      	cmp	r5, r3
 8006c80:	bf38      	it	cc
 8006c82:	461d      	movcc	r5, r3
 8006c84:	0553      	lsls	r3, r2, #21
 8006c86:	d531      	bpl.n	8006cec <__ssputs_r+0xa0>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7ff ff6b 	bl	8006b64 <_malloc_r>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	b950      	cbnz	r0, 8006ca8 <__ssputs_r+0x5c>
 8006c92:	230c      	movs	r3, #12
 8006c94:	f8ca 3000 	str.w	r3, [sl]
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c9e:	81a3      	strh	r3, [r4, #12]
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca8:	6921      	ldr	r1, [r4, #16]
 8006caa:	464a      	mov	r2, r9
 8006cac:	f7ff fb46 	bl	800633c <memcpy>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	6126      	str	r6, [r4, #16]
 8006cbe:	6165      	str	r5, [r4, #20]
 8006cc0:	444e      	add	r6, r9
 8006cc2:	eba5 0509 	sub.w	r5, r5, r9
 8006cc6:	6026      	str	r6, [r4, #0]
 8006cc8:	60a5      	str	r5, [r4, #8]
 8006cca:	463e      	mov	r6, r7
 8006ccc:	42be      	cmp	r6, r7
 8006cce:	d900      	bls.n	8006cd2 <__ssputs_r+0x86>
 8006cd0:	463e      	mov	r6, r7
 8006cd2:	6820      	ldr	r0, [r4, #0]
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	f000 f966 	bl	8006fa8 <memmove>
 8006cdc:	68a3      	ldr	r3, [r4, #8]
 8006cde:	1b9b      	subs	r3, r3, r6
 8006ce0:	60a3      	str	r3, [r4, #8]
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	4433      	add	r3, r6
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e7db      	b.n	8006ca4 <__ssputs_r+0x58>
 8006cec:	462a      	mov	r2, r5
 8006cee:	f000 f981 	bl	8006ff4 <_realloc_r>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d1e1      	bne.n	8006cbc <__ssputs_r+0x70>
 8006cf8:	6921      	ldr	r1, [r4, #16]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7ff fec6 	bl	8006a8c <_free_r>
 8006d00:	e7c7      	b.n	8006c92 <__ssputs_r+0x46>
	...

08006d04 <_svfiprintf_r>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	4698      	mov	r8, r3
 8006d0a:	898b      	ldrh	r3, [r1, #12]
 8006d0c:	061b      	lsls	r3, r3, #24
 8006d0e:	b09d      	sub	sp, #116	; 0x74
 8006d10:	4607      	mov	r7, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	4614      	mov	r4, r2
 8006d16:	d50e      	bpl.n	8006d36 <_svfiprintf_r+0x32>
 8006d18:	690b      	ldr	r3, [r1, #16]
 8006d1a:	b963      	cbnz	r3, 8006d36 <_svfiprintf_r+0x32>
 8006d1c:	2140      	movs	r1, #64	; 0x40
 8006d1e:	f7ff ff21 	bl	8006b64 <_malloc_r>
 8006d22:	6028      	str	r0, [r5, #0]
 8006d24:	6128      	str	r0, [r5, #16]
 8006d26:	b920      	cbnz	r0, 8006d32 <_svfiprintf_r+0x2e>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	e0d1      	b.n	8006ed6 <_svfiprintf_r+0x1d2>
 8006d32:	2340      	movs	r3, #64	; 0x40
 8006d34:	616b      	str	r3, [r5, #20]
 8006d36:	2300      	movs	r3, #0
 8006d38:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3a:	2320      	movs	r3, #32
 8006d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d44:	2330      	movs	r3, #48	; 0x30
 8006d46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ef0 <_svfiprintf_r+0x1ec>
 8006d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d4e:	f04f 0901 	mov.w	r9, #1
 8006d52:	4623      	mov	r3, r4
 8006d54:	469a      	mov	sl, r3
 8006d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d5a:	b10a      	cbz	r2, 8006d60 <_svfiprintf_r+0x5c>
 8006d5c:	2a25      	cmp	r2, #37	; 0x25
 8006d5e:	d1f9      	bne.n	8006d54 <_svfiprintf_r+0x50>
 8006d60:	ebba 0b04 	subs.w	fp, sl, r4
 8006d64:	d00b      	beq.n	8006d7e <_svfiprintf_r+0x7a>
 8006d66:	465b      	mov	r3, fp
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f7ff ff6d 	bl	8006c4c <__ssputs_r>
 8006d72:	3001      	adds	r0, #1
 8006d74:	f000 80aa 	beq.w	8006ecc <_svfiprintf_r+0x1c8>
 8006d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d7a:	445a      	add	r2, fp
 8006d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80a2 	beq.w	8006ecc <_svfiprintf_r+0x1c8>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d92:	f10a 0a01 	add.w	sl, sl, #1
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	9307      	str	r3, [sp, #28]
 8006d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006da0:	4654      	mov	r4, sl
 8006da2:	2205      	movs	r2, #5
 8006da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da8:	4851      	ldr	r0, [pc, #324]	; (8006ef0 <_svfiprintf_r+0x1ec>)
 8006daa:	f7f9 fa19 	bl	80001e0 <memchr>
 8006dae:	9a04      	ldr	r2, [sp, #16]
 8006db0:	b9d8      	cbnz	r0, 8006dea <_svfiprintf_r+0xe6>
 8006db2:	06d0      	lsls	r0, r2, #27
 8006db4:	bf44      	itt	mi
 8006db6:	2320      	movmi	r3, #32
 8006db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dbc:	0711      	lsls	r1, r2, #28
 8006dbe:	bf44      	itt	mi
 8006dc0:	232b      	movmi	r3, #43	; 0x2b
 8006dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dca:	2b2a      	cmp	r3, #42	; 0x2a
 8006dcc:	d015      	beq.n	8006dfa <_svfiprintf_r+0xf6>
 8006dce:	9a07      	ldr	r2, [sp, #28]
 8006dd0:	4654      	mov	r4, sl
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f04f 0c0a 	mov.w	ip, #10
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dde:	3b30      	subs	r3, #48	; 0x30
 8006de0:	2b09      	cmp	r3, #9
 8006de2:	d94e      	bls.n	8006e82 <_svfiprintf_r+0x17e>
 8006de4:	b1b0      	cbz	r0, 8006e14 <_svfiprintf_r+0x110>
 8006de6:	9207      	str	r2, [sp, #28]
 8006de8:	e014      	b.n	8006e14 <_svfiprintf_r+0x110>
 8006dea:	eba0 0308 	sub.w	r3, r0, r8
 8006dee:	fa09 f303 	lsl.w	r3, r9, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	46a2      	mov	sl, r4
 8006df8:	e7d2      	b.n	8006da0 <_svfiprintf_r+0x9c>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	1d19      	adds	r1, r3, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	9103      	str	r1, [sp, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bfbb      	ittet	lt
 8006e06:	425b      	neglt	r3, r3
 8006e08:	f042 0202 	orrlt.w	r2, r2, #2
 8006e0c:	9307      	strge	r3, [sp, #28]
 8006e0e:	9307      	strlt	r3, [sp, #28]
 8006e10:	bfb8      	it	lt
 8006e12:	9204      	strlt	r2, [sp, #16]
 8006e14:	7823      	ldrb	r3, [r4, #0]
 8006e16:	2b2e      	cmp	r3, #46	; 0x2e
 8006e18:	d10c      	bne.n	8006e34 <_svfiprintf_r+0x130>
 8006e1a:	7863      	ldrb	r3, [r4, #1]
 8006e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e1e:	d135      	bne.n	8006e8c <_svfiprintf_r+0x188>
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	9203      	str	r2, [sp, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bfb8      	it	lt
 8006e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e30:	3402      	adds	r4, #2
 8006e32:	9305      	str	r3, [sp, #20]
 8006e34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f00 <_svfiprintf_r+0x1fc>
 8006e38:	7821      	ldrb	r1, [r4, #0]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	f7f9 f9cf 	bl	80001e0 <memchr>
 8006e42:	b140      	cbz	r0, 8006e56 <_svfiprintf_r+0x152>
 8006e44:	2340      	movs	r3, #64	; 0x40
 8006e46:	eba0 000a 	sub.w	r0, r0, sl
 8006e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	4303      	orrs	r3, r0
 8006e52:	3401      	adds	r4, #1
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5a:	4826      	ldr	r0, [pc, #152]	; (8006ef4 <_svfiprintf_r+0x1f0>)
 8006e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e60:	2206      	movs	r2, #6
 8006e62:	f7f9 f9bd 	bl	80001e0 <memchr>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d038      	beq.n	8006edc <_svfiprintf_r+0x1d8>
 8006e6a:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <_svfiprintf_r+0x1f4>)
 8006e6c:	bb1b      	cbnz	r3, 8006eb6 <_svfiprintf_r+0x1b2>
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	3307      	adds	r3, #7
 8006e72:	f023 0307 	bic.w	r3, r3, #7
 8006e76:	3308      	adds	r3, #8
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7c:	4433      	add	r3, r6
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	e767      	b.n	8006d52 <_svfiprintf_r+0x4e>
 8006e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e86:	460c      	mov	r4, r1
 8006e88:	2001      	movs	r0, #1
 8006e8a:	e7a5      	b.n	8006dd8 <_svfiprintf_r+0xd4>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	3401      	adds	r4, #1
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	4619      	mov	r1, r3
 8006e94:	f04f 0c0a 	mov.w	ip, #10
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e9e:	3a30      	subs	r2, #48	; 0x30
 8006ea0:	2a09      	cmp	r2, #9
 8006ea2:	d903      	bls.n	8006eac <_svfiprintf_r+0x1a8>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0c5      	beq.n	8006e34 <_svfiprintf_r+0x130>
 8006ea8:	9105      	str	r1, [sp, #20]
 8006eaa:	e7c3      	b.n	8006e34 <_svfiprintf_r+0x130>
 8006eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e7f0      	b.n	8006e98 <_svfiprintf_r+0x194>
 8006eb6:	ab03      	add	r3, sp, #12
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <_svfiprintf_r+0x1f8>)
 8006ebe:	a904      	add	r1, sp, #16
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f7fd ffc9 	bl	8004e58 <_printf_float>
 8006ec6:	1c42      	adds	r2, r0, #1
 8006ec8:	4606      	mov	r6, r0
 8006eca:	d1d6      	bne.n	8006e7a <_svfiprintf_r+0x176>
 8006ecc:	89ab      	ldrh	r3, [r5, #12]
 8006ece:	065b      	lsls	r3, r3, #25
 8006ed0:	f53f af2c 	bmi.w	8006d2c <_svfiprintf_r+0x28>
 8006ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ed6:	b01d      	add	sp, #116	; 0x74
 8006ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006edc:	ab03      	add	r3, sp, #12
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <_svfiprintf_r+0x1f8>)
 8006ee4:	a904      	add	r1, sp, #16
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f7fe fa5a 	bl	80053a0 <_printf_i>
 8006eec:	e7eb      	b.n	8006ec6 <_svfiprintf_r+0x1c2>
 8006eee:	bf00      	nop
 8006ef0:	08007db4 	.word	0x08007db4
 8006ef4:	08007dbe 	.word	0x08007dbe
 8006ef8:	08004e59 	.word	0x08004e59
 8006efc:	08006c4d 	.word	0x08006c4d
 8006f00:	08007dba 	.word	0x08007dba

08006f04 <_sbrk_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	; (8006f20 <_sbrk_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7fa fb98 	bl	8001644 <_sbrk>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_sbrk_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_sbrk_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	200002f8 	.word	0x200002f8

08006f24 <__assert_func>:
 8006f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f26:	4614      	mov	r4, r2
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <__assert_func+0x2c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4605      	mov	r5, r0
 8006f30:	68d8      	ldr	r0, [r3, #12]
 8006f32:	b14c      	cbz	r4, 8006f48 <__assert_func+0x24>
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <__assert_func+0x30>)
 8006f36:	9100      	str	r1, [sp, #0]
 8006f38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f3c:	4906      	ldr	r1, [pc, #24]	; (8006f58 <__assert_func+0x34>)
 8006f3e:	462b      	mov	r3, r5
 8006f40:	f000 f80e 	bl	8006f60 <fiprintf>
 8006f44:	f000 faac 	bl	80074a0 <abort>
 8006f48:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <__assert_func+0x38>)
 8006f4a:	461c      	mov	r4, r3
 8006f4c:	e7f3      	b.n	8006f36 <__assert_func+0x12>
 8006f4e:	bf00      	nop
 8006f50:	20000018 	.word	0x20000018
 8006f54:	08007dc5 	.word	0x08007dc5
 8006f58:	08007dd2 	.word	0x08007dd2
 8006f5c:	08007e00 	.word	0x08007e00

08006f60 <fiprintf>:
 8006f60:	b40e      	push	{r1, r2, r3}
 8006f62:	b503      	push	{r0, r1, lr}
 8006f64:	4601      	mov	r1, r0
 8006f66:	ab03      	add	r3, sp, #12
 8006f68:	4805      	ldr	r0, [pc, #20]	; (8006f80 <fiprintf+0x20>)
 8006f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6e:	6800      	ldr	r0, [r0, #0]
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	f000 f897 	bl	80070a4 <_vfiprintf_r>
 8006f76:	b002      	add	sp, #8
 8006f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f7c:	b003      	add	sp, #12
 8006f7e:	4770      	bx	lr
 8006f80:	20000018 	.word	0x20000018

08006f84 <__ascii_mbtowc>:
 8006f84:	b082      	sub	sp, #8
 8006f86:	b901      	cbnz	r1, 8006f8a <__ascii_mbtowc+0x6>
 8006f88:	a901      	add	r1, sp, #4
 8006f8a:	b142      	cbz	r2, 8006f9e <__ascii_mbtowc+0x1a>
 8006f8c:	b14b      	cbz	r3, 8006fa2 <__ascii_mbtowc+0x1e>
 8006f8e:	7813      	ldrb	r3, [r2, #0]
 8006f90:	600b      	str	r3, [r1, #0]
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	1e10      	subs	r0, r2, #0
 8006f96:	bf18      	it	ne
 8006f98:	2001      	movne	r0, #1
 8006f9a:	b002      	add	sp, #8
 8006f9c:	4770      	bx	lr
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	e7fb      	b.n	8006f9a <__ascii_mbtowc+0x16>
 8006fa2:	f06f 0001 	mvn.w	r0, #1
 8006fa6:	e7f8      	b.n	8006f9a <__ascii_mbtowc+0x16>

08006fa8 <memmove>:
 8006fa8:	4288      	cmp	r0, r1
 8006faa:	b510      	push	{r4, lr}
 8006fac:	eb01 0402 	add.w	r4, r1, r2
 8006fb0:	d902      	bls.n	8006fb8 <memmove+0x10>
 8006fb2:	4284      	cmp	r4, r0
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	d807      	bhi.n	8006fc8 <memmove+0x20>
 8006fb8:	1e43      	subs	r3, r0, #1
 8006fba:	42a1      	cmp	r1, r4
 8006fbc:	d008      	beq.n	8006fd0 <memmove+0x28>
 8006fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fc6:	e7f8      	b.n	8006fba <memmove+0x12>
 8006fc8:	4402      	add	r2, r0
 8006fca:	4601      	mov	r1, r0
 8006fcc:	428a      	cmp	r2, r1
 8006fce:	d100      	bne.n	8006fd2 <memmove+0x2a>
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fda:	e7f7      	b.n	8006fcc <memmove+0x24>

08006fdc <__malloc_lock>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__malloc_lock+0x8>)
 8006fde:	f000 bc1f 	b.w	8007820 <__retarget_lock_acquire_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	200002fc 	.word	0x200002fc

08006fe8 <__malloc_unlock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__malloc_unlock+0x8>)
 8006fea:	f000 bc1a 	b.w	8007822 <__retarget_lock_release_recursive>
 8006fee:	bf00      	nop
 8006ff0:	200002fc 	.word	0x200002fc

08006ff4 <_realloc_r>:
 8006ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4614      	mov	r4, r2
 8006ffc:	460e      	mov	r6, r1
 8006ffe:	b921      	cbnz	r1, 800700a <_realloc_r+0x16>
 8007000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007004:	4611      	mov	r1, r2
 8007006:	f7ff bdad 	b.w	8006b64 <_malloc_r>
 800700a:	b92a      	cbnz	r2, 8007018 <_realloc_r+0x24>
 800700c:	f7ff fd3e 	bl	8006a8c <_free_r>
 8007010:	4625      	mov	r5, r4
 8007012:	4628      	mov	r0, r5
 8007014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007018:	f000 fc6a 	bl	80078f0 <_malloc_usable_size_r>
 800701c:	4284      	cmp	r4, r0
 800701e:	4607      	mov	r7, r0
 8007020:	d802      	bhi.n	8007028 <_realloc_r+0x34>
 8007022:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007026:	d812      	bhi.n	800704e <_realloc_r+0x5a>
 8007028:	4621      	mov	r1, r4
 800702a:	4640      	mov	r0, r8
 800702c:	f7ff fd9a 	bl	8006b64 <_malloc_r>
 8007030:	4605      	mov	r5, r0
 8007032:	2800      	cmp	r0, #0
 8007034:	d0ed      	beq.n	8007012 <_realloc_r+0x1e>
 8007036:	42bc      	cmp	r4, r7
 8007038:	4622      	mov	r2, r4
 800703a:	4631      	mov	r1, r6
 800703c:	bf28      	it	cs
 800703e:	463a      	movcs	r2, r7
 8007040:	f7ff f97c 	bl	800633c <memcpy>
 8007044:	4631      	mov	r1, r6
 8007046:	4640      	mov	r0, r8
 8007048:	f7ff fd20 	bl	8006a8c <_free_r>
 800704c:	e7e1      	b.n	8007012 <_realloc_r+0x1e>
 800704e:	4635      	mov	r5, r6
 8007050:	e7df      	b.n	8007012 <_realloc_r+0x1e>

08007052 <__sfputc_r>:
 8007052:	6893      	ldr	r3, [r2, #8]
 8007054:	3b01      	subs	r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	b410      	push	{r4}
 800705a:	6093      	str	r3, [r2, #8]
 800705c:	da08      	bge.n	8007070 <__sfputc_r+0x1e>
 800705e:	6994      	ldr	r4, [r2, #24]
 8007060:	42a3      	cmp	r3, r4
 8007062:	db01      	blt.n	8007068 <__sfputc_r+0x16>
 8007064:	290a      	cmp	r1, #10
 8007066:	d103      	bne.n	8007070 <__sfputc_r+0x1e>
 8007068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800706c:	f000 b94a 	b.w	8007304 <__swbuf_r>
 8007070:	6813      	ldr	r3, [r2, #0]
 8007072:	1c58      	adds	r0, r3, #1
 8007074:	6010      	str	r0, [r2, #0]
 8007076:	7019      	strb	r1, [r3, #0]
 8007078:	4608      	mov	r0, r1
 800707a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800707e:	4770      	bx	lr

08007080 <__sfputs_r>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	4606      	mov	r6, r0
 8007084:	460f      	mov	r7, r1
 8007086:	4614      	mov	r4, r2
 8007088:	18d5      	adds	r5, r2, r3
 800708a:	42ac      	cmp	r4, r5
 800708c:	d101      	bne.n	8007092 <__sfputs_r+0x12>
 800708e:	2000      	movs	r0, #0
 8007090:	e007      	b.n	80070a2 <__sfputs_r+0x22>
 8007092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007096:	463a      	mov	r2, r7
 8007098:	4630      	mov	r0, r6
 800709a:	f7ff ffda 	bl	8007052 <__sfputc_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	d1f3      	bne.n	800708a <__sfputs_r+0xa>
 80070a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070a4 <_vfiprintf_r>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	460d      	mov	r5, r1
 80070aa:	b09d      	sub	sp, #116	; 0x74
 80070ac:	4614      	mov	r4, r2
 80070ae:	4698      	mov	r8, r3
 80070b0:	4606      	mov	r6, r0
 80070b2:	b118      	cbz	r0, 80070bc <_vfiprintf_r+0x18>
 80070b4:	6983      	ldr	r3, [r0, #24]
 80070b6:	b90b      	cbnz	r3, 80070bc <_vfiprintf_r+0x18>
 80070b8:	f000 fb14 	bl	80076e4 <__sinit>
 80070bc:	4b89      	ldr	r3, [pc, #548]	; (80072e4 <_vfiprintf_r+0x240>)
 80070be:	429d      	cmp	r5, r3
 80070c0:	d11b      	bne.n	80070fa <_vfiprintf_r+0x56>
 80070c2:	6875      	ldr	r5, [r6, #4]
 80070c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070c6:	07d9      	lsls	r1, r3, #31
 80070c8:	d405      	bmi.n	80070d6 <_vfiprintf_r+0x32>
 80070ca:	89ab      	ldrh	r3, [r5, #12]
 80070cc:	059a      	lsls	r2, r3, #22
 80070ce:	d402      	bmi.n	80070d6 <_vfiprintf_r+0x32>
 80070d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070d2:	f000 fba5 	bl	8007820 <__retarget_lock_acquire_recursive>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	071b      	lsls	r3, r3, #28
 80070da:	d501      	bpl.n	80070e0 <_vfiprintf_r+0x3c>
 80070dc:	692b      	ldr	r3, [r5, #16]
 80070de:	b9eb      	cbnz	r3, 800711c <_vfiprintf_r+0x78>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4630      	mov	r0, r6
 80070e4:	f000 f96e 	bl	80073c4 <__swsetup_r>
 80070e8:	b1c0      	cbz	r0, 800711c <_vfiprintf_r+0x78>
 80070ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ec:	07dc      	lsls	r4, r3, #31
 80070ee:	d50e      	bpl.n	800710e <_vfiprintf_r+0x6a>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	b01d      	add	sp, #116	; 0x74
 80070f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fa:	4b7b      	ldr	r3, [pc, #492]	; (80072e8 <_vfiprintf_r+0x244>)
 80070fc:	429d      	cmp	r5, r3
 80070fe:	d101      	bne.n	8007104 <_vfiprintf_r+0x60>
 8007100:	68b5      	ldr	r5, [r6, #8]
 8007102:	e7df      	b.n	80070c4 <_vfiprintf_r+0x20>
 8007104:	4b79      	ldr	r3, [pc, #484]	; (80072ec <_vfiprintf_r+0x248>)
 8007106:	429d      	cmp	r5, r3
 8007108:	bf08      	it	eq
 800710a:	68f5      	ldreq	r5, [r6, #12]
 800710c:	e7da      	b.n	80070c4 <_vfiprintf_r+0x20>
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	0598      	lsls	r0, r3, #22
 8007112:	d4ed      	bmi.n	80070f0 <_vfiprintf_r+0x4c>
 8007114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007116:	f000 fb84 	bl	8007822 <__retarget_lock_release_recursive>
 800711a:	e7e9      	b.n	80070f0 <_vfiprintf_r+0x4c>
 800711c:	2300      	movs	r3, #0
 800711e:	9309      	str	r3, [sp, #36]	; 0x24
 8007120:	2320      	movs	r3, #32
 8007122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007126:	f8cd 800c 	str.w	r8, [sp, #12]
 800712a:	2330      	movs	r3, #48	; 0x30
 800712c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072f0 <_vfiprintf_r+0x24c>
 8007130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007134:	f04f 0901 	mov.w	r9, #1
 8007138:	4623      	mov	r3, r4
 800713a:	469a      	mov	sl, r3
 800713c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007140:	b10a      	cbz	r2, 8007146 <_vfiprintf_r+0xa2>
 8007142:	2a25      	cmp	r2, #37	; 0x25
 8007144:	d1f9      	bne.n	800713a <_vfiprintf_r+0x96>
 8007146:	ebba 0b04 	subs.w	fp, sl, r4
 800714a:	d00b      	beq.n	8007164 <_vfiprintf_r+0xc0>
 800714c:	465b      	mov	r3, fp
 800714e:	4622      	mov	r2, r4
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ff94 	bl	8007080 <__sfputs_r>
 8007158:	3001      	adds	r0, #1
 800715a:	f000 80aa 	beq.w	80072b2 <_vfiprintf_r+0x20e>
 800715e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007160:	445a      	add	r2, fp
 8007162:	9209      	str	r2, [sp, #36]	; 0x24
 8007164:	f89a 3000 	ldrb.w	r3, [sl]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80a2 	beq.w	80072b2 <_vfiprintf_r+0x20e>
 800716e:	2300      	movs	r3, #0
 8007170:	f04f 32ff 	mov.w	r2, #4294967295
 8007174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007178:	f10a 0a01 	add.w	sl, sl, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007184:	931a      	str	r3, [sp, #104]	; 0x68
 8007186:	4654      	mov	r4, sl
 8007188:	2205      	movs	r2, #5
 800718a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718e:	4858      	ldr	r0, [pc, #352]	; (80072f0 <_vfiprintf_r+0x24c>)
 8007190:	f7f9 f826 	bl	80001e0 <memchr>
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	b9d8      	cbnz	r0, 80071d0 <_vfiprintf_r+0x12c>
 8007198:	06d1      	lsls	r1, r2, #27
 800719a:	bf44      	itt	mi
 800719c:	2320      	movmi	r3, #32
 800719e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a2:	0713      	lsls	r3, r2, #28
 80071a4:	bf44      	itt	mi
 80071a6:	232b      	movmi	r3, #43	; 0x2b
 80071a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ac:	f89a 3000 	ldrb.w	r3, [sl]
 80071b0:	2b2a      	cmp	r3, #42	; 0x2a
 80071b2:	d015      	beq.n	80071e0 <_vfiprintf_r+0x13c>
 80071b4:	9a07      	ldr	r2, [sp, #28]
 80071b6:	4654      	mov	r4, sl
 80071b8:	2000      	movs	r0, #0
 80071ba:	f04f 0c0a 	mov.w	ip, #10
 80071be:	4621      	mov	r1, r4
 80071c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c4:	3b30      	subs	r3, #48	; 0x30
 80071c6:	2b09      	cmp	r3, #9
 80071c8:	d94e      	bls.n	8007268 <_vfiprintf_r+0x1c4>
 80071ca:	b1b0      	cbz	r0, 80071fa <_vfiprintf_r+0x156>
 80071cc:	9207      	str	r2, [sp, #28]
 80071ce:	e014      	b.n	80071fa <_vfiprintf_r+0x156>
 80071d0:	eba0 0308 	sub.w	r3, r0, r8
 80071d4:	fa09 f303 	lsl.w	r3, r9, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	46a2      	mov	sl, r4
 80071de:	e7d2      	b.n	8007186 <_vfiprintf_r+0xe2>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	1d19      	adds	r1, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9103      	str	r1, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfbb      	ittet	lt
 80071ec:	425b      	neglt	r3, r3
 80071ee:	f042 0202 	orrlt.w	r2, r2, #2
 80071f2:	9307      	strge	r3, [sp, #28]
 80071f4:	9307      	strlt	r3, [sp, #28]
 80071f6:	bfb8      	it	lt
 80071f8:	9204      	strlt	r2, [sp, #16]
 80071fa:	7823      	ldrb	r3, [r4, #0]
 80071fc:	2b2e      	cmp	r3, #46	; 0x2e
 80071fe:	d10c      	bne.n	800721a <_vfiprintf_r+0x176>
 8007200:	7863      	ldrb	r3, [r4, #1]
 8007202:	2b2a      	cmp	r3, #42	; 0x2a
 8007204:	d135      	bne.n	8007272 <_vfiprintf_r+0x1ce>
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	1d1a      	adds	r2, r3, #4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	9203      	str	r2, [sp, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	bfb8      	it	lt
 8007212:	f04f 33ff 	movlt.w	r3, #4294967295
 8007216:	3402      	adds	r4, #2
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007300 <_vfiprintf_r+0x25c>
 800721e:	7821      	ldrb	r1, [r4, #0]
 8007220:	2203      	movs	r2, #3
 8007222:	4650      	mov	r0, sl
 8007224:	f7f8 ffdc 	bl	80001e0 <memchr>
 8007228:	b140      	cbz	r0, 800723c <_vfiprintf_r+0x198>
 800722a:	2340      	movs	r3, #64	; 0x40
 800722c:	eba0 000a 	sub.w	r0, r0, sl
 8007230:	fa03 f000 	lsl.w	r0, r3, r0
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	4303      	orrs	r3, r0
 8007238:	3401      	adds	r4, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007240:	482c      	ldr	r0, [pc, #176]	; (80072f4 <_vfiprintf_r+0x250>)
 8007242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007246:	2206      	movs	r2, #6
 8007248:	f7f8 ffca 	bl	80001e0 <memchr>
 800724c:	2800      	cmp	r0, #0
 800724e:	d03f      	beq.n	80072d0 <_vfiprintf_r+0x22c>
 8007250:	4b29      	ldr	r3, [pc, #164]	; (80072f8 <_vfiprintf_r+0x254>)
 8007252:	bb1b      	cbnz	r3, 800729c <_vfiprintf_r+0x1f8>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	3307      	adds	r3, #7
 8007258:	f023 0307 	bic.w	r3, r3, #7
 800725c:	3308      	adds	r3, #8
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007262:	443b      	add	r3, r7
 8007264:	9309      	str	r3, [sp, #36]	; 0x24
 8007266:	e767      	b.n	8007138 <_vfiprintf_r+0x94>
 8007268:	fb0c 3202 	mla	r2, ip, r2, r3
 800726c:	460c      	mov	r4, r1
 800726e:	2001      	movs	r0, #1
 8007270:	e7a5      	b.n	80071be <_vfiprintf_r+0x11a>
 8007272:	2300      	movs	r3, #0
 8007274:	3401      	adds	r4, #1
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	4619      	mov	r1, r3
 800727a:	f04f 0c0a 	mov.w	ip, #10
 800727e:	4620      	mov	r0, r4
 8007280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007284:	3a30      	subs	r2, #48	; 0x30
 8007286:	2a09      	cmp	r2, #9
 8007288:	d903      	bls.n	8007292 <_vfiprintf_r+0x1ee>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0c5      	beq.n	800721a <_vfiprintf_r+0x176>
 800728e:	9105      	str	r1, [sp, #20]
 8007290:	e7c3      	b.n	800721a <_vfiprintf_r+0x176>
 8007292:	fb0c 2101 	mla	r1, ip, r1, r2
 8007296:	4604      	mov	r4, r0
 8007298:	2301      	movs	r3, #1
 800729a:	e7f0      	b.n	800727e <_vfiprintf_r+0x1da>
 800729c:	ab03      	add	r3, sp, #12
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	462a      	mov	r2, r5
 80072a2:	4b16      	ldr	r3, [pc, #88]	; (80072fc <_vfiprintf_r+0x258>)
 80072a4:	a904      	add	r1, sp, #16
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7fd fdd6 	bl	8004e58 <_printf_float>
 80072ac:	4607      	mov	r7, r0
 80072ae:	1c78      	adds	r0, r7, #1
 80072b0:	d1d6      	bne.n	8007260 <_vfiprintf_r+0x1bc>
 80072b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072b4:	07d9      	lsls	r1, r3, #31
 80072b6:	d405      	bmi.n	80072c4 <_vfiprintf_r+0x220>
 80072b8:	89ab      	ldrh	r3, [r5, #12]
 80072ba:	059a      	lsls	r2, r3, #22
 80072bc:	d402      	bmi.n	80072c4 <_vfiprintf_r+0x220>
 80072be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c0:	f000 faaf 	bl	8007822 <__retarget_lock_release_recursive>
 80072c4:	89ab      	ldrh	r3, [r5, #12]
 80072c6:	065b      	lsls	r3, r3, #25
 80072c8:	f53f af12 	bmi.w	80070f0 <_vfiprintf_r+0x4c>
 80072cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ce:	e711      	b.n	80070f4 <_vfiprintf_r+0x50>
 80072d0:	ab03      	add	r3, sp, #12
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	462a      	mov	r2, r5
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <_vfiprintf_r+0x258>)
 80072d8:	a904      	add	r1, sp, #16
 80072da:	4630      	mov	r0, r6
 80072dc:	f7fe f860 	bl	80053a0 <_printf_i>
 80072e0:	e7e4      	b.n	80072ac <_vfiprintf_r+0x208>
 80072e2:	bf00      	nop
 80072e4:	08007f2c 	.word	0x08007f2c
 80072e8:	08007f4c 	.word	0x08007f4c
 80072ec:	08007f0c 	.word	0x08007f0c
 80072f0:	08007db4 	.word	0x08007db4
 80072f4:	08007dbe 	.word	0x08007dbe
 80072f8:	08004e59 	.word	0x08004e59
 80072fc:	08007081 	.word	0x08007081
 8007300:	08007dba 	.word	0x08007dba

08007304 <__swbuf_r>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	460e      	mov	r6, r1
 8007308:	4614      	mov	r4, r2
 800730a:	4605      	mov	r5, r0
 800730c:	b118      	cbz	r0, 8007316 <__swbuf_r+0x12>
 800730e:	6983      	ldr	r3, [r0, #24]
 8007310:	b90b      	cbnz	r3, 8007316 <__swbuf_r+0x12>
 8007312:	f000 f9e7 	bl	80076e4 <__sinit>
 8007316:	4b21      	ldr	r3, [pc, #132]	; (800739c <__swbuf_r+0x98>)
 8007318:	429c      	cmp	r4, r3
 800731a:	d12b      	bne.n	8007374 <__swbuf_r+0x70>
 800731c:	686c      	ldr	r4, [r5, #4]
 800731e:	69a3      	ldr	r3, [r4, #24]
 8007320:	60a3      	str	r3, [r4, #8]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	071a      	lsls	r2, r3, #28
 8007326:	d52f      	bpl.n	8007388 <__swbuf_r+0x84>
 8007328:	6923      	ldr	r3, [r4, #16]
 800732a:	b36b      	cbz	r3, 8007388 <__swbuf_r+0x84>
 800732c:	6923      	ldr	r3, [r4, #16]
 800732e:	6820      	ldr	r0, [r4, #0]
 8007330:	1ac0      	subs	r0, r0, r3
 8007332:	6963      	ldr	r3, [r4, #20]
 8007334:	b2f6      	uxtb	r6, r6
 8007336:	4283      	cmp	r3, r0
 8007338:	4637      	mov	r7, r6
 800733a:	dc04      	bgt.n	8007346 <__swbuf_r+0x42>
 800733c:	4621      	mov	r1, r4
 800733e:	4628      	mov	r0, r5
 8007340:	f000 f93c 	bl	80075bc <_fflush_r>
 8007344:	bb30      	cbnz	r0, 8007394 <__swbuf_r+0x90>
 8007346:	68a3      	ldr	r3, [r4, #8]
 8007348:	3b01      	subs	r3, #1
 800734a:	60a3      	str	r3, [r4, #8]
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	6022      	str	r2, [r4, #0]
 8007352:	701e      	strb	r6, [r3, #0]
 8007354:	6963      	ldr	r3, [r4, #20]
 8007356:	3001      	adds	r0, #1
 8007358:	4283      	cmp	r3, r0
 800735a:	d004      	beq.n	8007366 <__swbuf_r+0x62>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	07db      	lsls	r3, r3, #31
 8007360:	d506      	bpl.n	8007370 <__swbuf_r+0x6c>
 8007362:	2e0a      	cmp	r6, #10
 8007364:	d104      	bne.n	8007370 <__swbuf_r+0x6c>
 8007366:	4621      	mov	r1, r4
 8007368:	4628      	mov	r0, r5
 800736a:	f000 f927 	bl	80075bc <_fflush_r>
 800736e:	b988      	cbnz	r0, 8007394 <__swbuf_r+0x90>
 8007370:	4638      	mov	r0, r7
 8007372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <__swbuf_r+0x9c>)
 8007376:	429c      	cmp	r4, r3
 8007378:	d101      	bne.n	800737e <__swbuf_r+0x7a>
 800737a:	68ac      	ldr	r4, [r5, #8]
 800737c:	e7cf      	b.n	800731e <__swbuf_r+0x1a>
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <__swbuf_r+0xa0>)
 8007380:	429c      	cmp	r4, r3
 8007382:	bf08      	it	eq
 8007384:	68ec      	ldreq	r4, [r5, #12]
 8007386:	e7ca      	b.n	800731e <__swbuf_r+0x1a>
 8007388:	4621      	mov	r1, r4
 800738a:	4628      	mov	r0, r5
 800738c:	f000 f81a 	bl	80073c4 <__swsetup_r>
 8007390:	2800      	cmp	r0, #0
 8007392:	d0cb      	beq.n	800732c <__swbuf_r+0x28>
 8007394:	f04f 37ff 	mov.w	r7, #4294967295
 8007398:	e7ea      	b.n	8007370 <__swbuf_r+0x6c>
 800739a:	bf00      	nop
 800739c:	08007f2c 	.word	0x08007f2c
 80073a0:	08007f4c 	.word	0x08007f4c
 80073a4:	08007f0c 	.word	0x08007f0c

080073a8 <__ascii_wctomb>:
 80073a8:	b149      	cbz	r1, 80073be <__ascii_wctomb+0x16>
 80073aa:	2aff      	cmp	r2, #255	; 0xff
 80073ac:	bf85      	ittet	hi
 80073ae:	238a      	movhi	r3, #138	; 0x8a
 80073b0:	6003      	strhi	r3, [r0, #0]
 80073b2:	700a      	strbls	r2, [r1, #0]
 80073b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80073b8:	bf98      	it	ls
 80073ba:	2001      	movls	r0, #1
 80073bc:	4770      	bx	lr
 80073be:	4608      	mov	r0, r1
 80073c0:	4770      	bx	lr
	...

080073c4 <__swsetup_r>:
 80073c4:	4b32      	ldr	r3, [pc, #200]	; (8007490 <__swsetup_r+0xcc>)
 80073c6:	b570      	push	{r4, r5, r6, lr}
 80073c8:	681d      	ldr	r5, [r3, #0]
 80073ca:	4606      	mov	r6, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	b125      	cbz	r5, 80073da <__swsetup_r+0x16>
 80073d0:	69ab      	ldr	r3, [r5, #24]
 80073d2:	b913      	cbnz	r3, 80073da <__swsetup_r+0x16>
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f985 	bl	80076e4 <__sinit>
 80073da:	4b2e      	ldr	r3, [pc, #184]	; (8007494 <__swsetup_r+0xd0>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	d10f      	bne.n	8007400 <__swsetup_r+0x3c>
 80073e0:	686c      	ldr	r4, [r5, #4]
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e8:	0719      	lsls	r1, r3, #28
 80073ea:	d42c      	bmi.n	8007446 <__swsetup_r+0x82>
 80073ec:	06dd      	lsls	r5, r3, #27
 80073ee:	d411      	bmi.n	8007414 <__swsetup_r+0x50>
 80073f0:	2309      	movs	r3, #9
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e03e      	b.n	800747e <__swsetup_r+0xba>
 8007400:	4b25      	ldr	r3, [pc, #148]	; (8007498 <__swsetup_r+0xd4>)
 8007402:	429c      	cmp	r4, r3
 8007404:	d101      	bne.n	800740a <__swsetup_r+0x46>
 8007406:	68ac      	ldr	r4, [r5, #8]
 8007408:	e7eb      	b.n	80073e2 <__swsetup_r+0x1e>
 800740a:	4b24      	ldr	r3, [pc, #144]	; (800749c <__swsetup_r+0xd8>)
 800740c:	429c      	cmp	r4, r3
 800740e:	bf08      	it	eq
 8007410:	68ec      	ldreq	r4, [r5, #12]
 8007412:	e7e6      	b.n	80073e2 <__swsetup_r+0x1e>
 8007414:	0758      	lsls	r0, r3, #29
 8007416:	d512      	bpl.n	800743e <__swsetup_r+0x7a>
 8007418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800741a:	b141      	cbz	r1, 800742e <__swsetup_r+0x6a>
 800741c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007420:	4299      	cmp	r1, r3
 8007422:	d002      	beq.n	800742a <__swsetup_r+0x66>
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff fb31 	bl	8006a8c <_free_r>
 800742a:	2300      	movs	r3, #0
 800742c:	6363      	str	r3, [r4, #52]	; 0x34
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	2300      	movs	r3, #0
 8007438:	6063      	str	r3, [r4, #4]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f043 0308 	orr.w	r3, r3, #8
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	b94b      	cbnz	r3, 800745e <__swsetup_r+0x9a>
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007454:	d003      	beq.n	800745e <__swsetup_r+0x9a>
 8007456:	4621      	mov	r1, r4
 8007458:	4630      	mov	r0, r6
 800745a:	f000 fa09 	bl	8007870 <__smakebuf_r>
 800745e:	89a0      	ldrh	r0, [r4, #12]
 8007460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007464:	f010 0301 	ands.w	r3, r0, #1
 8007468:	d00a      	beq.n	8007480 <__swsetup_r+0xbc>
 800746a:	2300      	movs	r3, #0
 800746c:	60a3      	str	r3, [r4, #8]
 800746e:	6963      	ldr	r3, [r4, #20]
 8007470:	425b      	negs	r3, r3
 8007472:	61a3      	str	r3, [r4, #24]
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	b943      	cbnz	r3, 800748a <__swsetup_r+0xc6>
 8007478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800747c:	d1ba      	bne.n	80073f4 <__swsetup_r+0x30>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	0781      	lsls	r1, r0, #30
 8007482:	bf58      	it	pl
 8007484:	6963      	ldrpl	r3, [r4, #20]
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	e7f4      	b.n	8007474 <__swsetup_r+0xb0>
 800748a:	2000      	movs	r0, #0
 800748c:	e7f7      	b.n	800747e <__swsetup_r+0xba>
 800748e:	bf00      	nop
 8007490:	20000018 	.word	0x20000018
 8007494:	08007f2c 	.word	0x08007f2c
 8007498:	08007f4c 	.word	0x08007f4c
 800749c:	08007f0c 	.word	0x08007f0c

080074a0 <abort>:
 80074a0:	b508      	push	{r3, lr}
 80074a2:	2006      	movs	r0, #6
 80074a4:	f000 fa54 	bl	8007950 <raise>
 80074a8:	2001      	movs	r0, #1
 80074aa:	f7fa f853 	bl	8001554 <_exit>
	...

080074b0 <__sflush_r>:
 80074b0:	898a      	ldrh	r2, [r1, #12]
 80074b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b6:	4605      	mov	r5, r0
 80074b8:	0710      	lsls	r0, r2, #28
 80074ba:	460c      	mov	r4, r1
 80074bc:	d458      	bmi.n	8007570 <__sflush_r+0xc0>
 80074be:	684b      	ldr	r3, [r1, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dc05      	bgt.n	80074d0 <__sflush_r+0x20>
 80074c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	dc02      	bgt.n	80074d0 <__sflush_r+0x20>
 80074ca:	2000      	movs	r0, #0
 80074cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	d0f9      	beq.n	80074ca <__sflush_r+0x1a>
 80074d6:	2300      	movs	r3, #0
 80074d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074dc:	682f      	ldr	r7, [r5, #0]
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	d032      	beq.n	8007548 <__sflush_r+0x98>
 80074e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	075a      	lsls	r2, r3, #29
 80074e8:	d505      	bpl.n	80074f6 <__sflush_r+0x46>
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	1ac0      	subs	r0, r0, r3
 80074ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074f0:	b10b      	cbz	r3, 80074f6 <__sflush_r+0x46>
 80074f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074f4:	1ac0      	subs	r0, r0, r3
 80074f6:	2300      	movs	r3, #0
 80074f8:	4602      	mov	r2, r0
 80074fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074fc:	6a21      	ldr	r1, [r4, #32]
 80074fe:	4628      	mov	r0, r5
 8007500:	47b0      	blx	r6
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	d106      	bne.n	8007516 <__sflush_r+0x66>
 8007508:	6829      	ldr	r1, [r5, #0]
 800750a:	291d      	cmp	r1, #29
 800750c:	d82c      	bhi.n	8007568 <__sflush_r+0xb8>
 800750e:	4a2a      	ldr	r2, [pc, #168]	; (80075b8 <__sflush_r+0x108>)
 8007510:	40ca      	lsrs	r2, r1
 8007512:	07d6      	lsls	r6, r2, #31
 8007514:	d528      	bpl.n	8007568 <__sflush_r+0xb8>
 8007516:	2200      	movs	r2, #0
 8007518:	6062      	str	r2, [r4, #4]
 800751a:	04d9      	lsls	r1, r3, #19
 800751c:	6922      	ldr	r2, [r4, #16]
 800751e:	6022      	str	r2, [r4, #0]
 8007520:	d504      	bpl.n	800752c <__sflush_r+0x7c>
 8007522:	1c42      	adds	r2, r0, #1
 8007524:	d101      	bne.n	800752a <__sflush_r+0x7a>
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	b903      	cbnz	r3, 800752c <__sflush_r+0x7c>
 800752a:	6560      	str	r0, [r4, #84]	; 0x54
 800752c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752e:	602f      	str	r7, [r5, #0]
 8007530:	2900      	cmp	r1, #0
 8007532:	d0ca      	beq.n	80074ca <__sflush_r+0x1a>
 8007534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007538:	4299      	cmp	r1, r3
 800753a:	d002      	beq.n	8007542 <__sflush_r+0x92>
 800753c:	4628      	mov	r0, r5
 800753e:	f7ff faa5 	bl	8006a8c <_free_r>
 8007542:	2000      	movs	r0, #0
 8007544:	6360      	str	r0, [r4, #52]	; 0x34
 8007546:	e7c1      	b.n	80074cc <__sflush_r+0x1c>
 8007548:	6a21      	ldr	r1, [r4, #32]
 800754a:	2301      	movs	r3, #1
 800754c:	4628      	mov	r0, r5
 800754e:	47b0      	blx	r6
 8007550:	1c41      	adds	r1, r0, #1
 8007552:	d1c7      	bne.n	80074e4 <__sflush_r+0x34>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0c4      	beq.n	80074e4 <__sflush_r+0x34>
 800755a:	2b1d      	cmp	r3, #29
 800755c:	d001      	beq.n	8007562 <__sflush_r+0xb2>
 800755e:	2b16      	cmp	r3, #22
 8007560:	d101      	bne.n	8007566 <__sflush_r+0xb6>
 8007562:	602f      	str	r7, [r5, #0]
 8007564:	e7b1      	b.n	80074ca <__sflush_r+0x1a>
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	e7ad      	b.n	80074cc <__sflush_r+0x1c>
 8007570:	690f      	ldr	r7, [r1, #16]
 8007572:	2f00      	cmp	r7, #0
 8007574:	d0a9      	beq.n	80074ca <__sflush_r+0x1a>
 8007576:	0793      	lsls	r3, r2, #30
 8007578:	680e      	ldr	r6, [r1, #0]
 800757a:	bf08      	it	eq
 800757c:	694b      	ldreq	r3, [r1, #20]
 800757e:	600f      	str	r7, [r1, #0]
 8007580:	bf18      	it	ne
 8007582:	2300      	movne	r3, #0
 8007584:	eba6 0807 	sub.w	r8, r6, r7
 8007588:	608b      	str	r3, [r1, #8]
 800758a:	f1b8 0f00 	cmp.w	r8, #0
 800758e:	dd9c      	ble.n	80074ca <__sflush_r+0x1a>
 8007590:	6a21      	ldr	r1, [r4, #32]
 8007592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007594:	4643      	mov	r3, r8
 8007596:	463a      	mov	r2, r7
 8007598:	4628      	mov	r0, r5
 800759a:	47b0      	blx	r6
 800759c:	2800      	cmp	r0, #0
 800759e:	dc06      	bgt.n	80075ae <__sflush_r+0xfe>
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	e78e      	b.n	80074cc <__sflush_r+0x1c>
 80075ae:	4407      	add	r7, r0
 80075b0:	eba8 0800 	sub.w	r8, r8, r0
 80075b4:	e7e9      	b.n	800758a <__sflush_r+0xda>
 80075b6:	bf00      	nop
 80075b8:	20400001 	.word	0x20400001

080075bc <_fflush_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	690b      	ldr	r3, [r1, #16]
 80075c0:	4605      	mov	r5, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b913      	cbnz	r3, 80075cc <_fflush_r+0x10>
 80075c6:	2500      	movs	r5, #0
 80075c8:	4628      	mov	r0, r5
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	b118      	cbz	r0, 80075d6 <_fflush_r+0x1a>
 80075ce:	6983      	ldr	r3, [r0, #24]
 80075d0:	b90b      	cbnz	r3, 80075d6 <_fflush_r+0x1a>
 80075d2:	f000 f887 	bl	80076e4 <__sinit>
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <_fflush_r+0x6c>)
 80075d8:	429c      	cmp	r4, r3
 80075da:	d11b      	bne.n	8007614 <_fflush_r+0x58>
 80075dc:	686c      	ldr	r4, [r5, #4]
 80075de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0ef      	beq.n	80075c6 <_fflush_r+0xa>
 80075e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e8:	07d0      	lsls	r0, r2, #31
 80075ea:	d404      	bmi.n	80075f6 <_fflush_r+0x3a>
 80075ec:	0599      	lsls	r1, r3, #22
 80075ee:	d402      	bmi.n	80075f6 <_fflush_r+0x3a>
 80075f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075f2:	f000 f915 	bl	8007820 <__retarget_lock_acquire_recursive>
 80075f6:	4628      	mov	r0, r5
 80075f8:	4621      	mov	r1, r4
 80075fa:	f7ff ff59 	bl	80074b0 <__sflush_r>
 80075fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007600:	07da      	lsls	r2, r3, #31
 8007602:	4605      	mov	r5, r0
 8007604:	d4e0      	bmi.n	80075c8 <_fflush_r+0xc>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	059b      	lsls	r3, r3, #22
 800760a:	d4dd      	bmi.n	80075c8 <_fflush_r+0xc>
 800760c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760e:	f000 f908 	bl	8007822 <__retarget_lock_release_recursive>
 8007612:	e7d9      	b.n	80075c8 <_fflush_r+0xc>
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <_fflush_r+0x70>)
 8007616:	429c      	cmp	r4, r3
 8007618:	d101      	bne.n	800761e <_fflush_r+0x62>
 800761a:	68ac      	ldr	r4, [r5, #8]
 800761c:	e7df      	b.n	80075de <_fflush_r+0x22>
 800761e:	4b04      	ldr	r3, [pc, #16]	; (8007630 <_fflush_r+0x74>)
 8007620:	429c      	cmp	r4, r3
 8007622:	bf08      	it	eq
 8007624:	68ec      	ldreq	r4, [r5, #12]
 8007626:	e7da      	b.n	80075de <_fflush_r+0x22>
 8007628:	08007f2c 	.word	0x08007f2c
 800762c:	08007f4c 	.word	0x08007f4c
 8007630:	08007f0c 	.word	0x08007f0c

08007634 <std>:
 8007634:	2300      	movs	r3, #0
 8007636:	b510      	push	{r4, lr}
 8007638:	4604      	mov	r4, r0
 800763a:	e9c0 3300 	strd	r3, r3, [r0]
 800763e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007642:	6083      	str	r3, [r0, #8]
 8007644:	8181      	strh	r1, [r0, #12]
 8007646:	6643      	str	r3, [r0, #100]	; 0x64
 8007648:	81c2      	strh	r2, [r0, #14]
 800764a:	6183      	str	r3, [r0, #24]
 800764c:	4619      	mov	r1, r3
 800764e:	2208      	movs	r2, #8
 8007650:	305c      	adds	r0, #92	; 0x5c
 8007652:	f7fd fb59 	bl	8004d08 <memset>
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x38>)
 8007658:	6263      	str	r3, [r4, #36]	; 0x24
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <std+0x3c>)
 800765c:	62a3      	str	r3, [r4, #40]	; 0x28
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <std+0x40>)
 8007660:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <std+0x44>)
 8007664:	6224      	str	r4, [r4, #32]
 8007666:	6323      	str	r3, [r4, #48]	; 0x30
 8007668:	bd10      	pop	{r4, pc}
 800766a:	bf00      	nop
 800766c:	08007989 	.word	0x08007989
 8007670:	080079ab 	.word	0x080079ab
 8007674:	080079e3 	.word	0x080079e3
 8007678:	08007a07 	.word	0x08007a07

0800767c <_cleanup_r>:
 800767c:	4901      	ldr	r1, [pc, #4]	; (8007684 <_cleanup_r+0x8>)
 800767e:	f000 b8af 	b.w	80077e0 <_fwalk_reent>
 8007682:	bf00      	nop
 8007684:	080075bd 	.word	0x080075bd

08007688 <__sfmoreglue>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	2268      	movs	r2, #104	; 0x68
 800768c:	1e4d      	subs	r5, r1, #1
 800768e:	4355      	muls	r5, r2
 8007690:	460e      	mov	r6, r1
 8007692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007696:	f7ff fa65 	bl	8006b64 <_malloc_r>
 800769a:	4604      	mov	r4, r0
 800769c:	b140      	cbz	r0, 80076b0 <__sfmoreglue+0x28>
 800769e:	2100      	movs	r1, #0
 80076a0:	e9c0 1600 	strd	r1, r6, [r0]
 80076a4:	300c      	adds	r0, #12
 80076a6:	60a0      	str	r0, [r4, #8]
 80076a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076ac:	f7fd fb2c 	bl	8004d08 <memset>
 80076b0:	4620      	mov	r0, r4
 80076b2:	bd70      	pop	{r4, r5, r6, pc}

080076b4 <__sfp_lock_acquire>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__sfp_lock_acquire+0x8>)
 80076b6:	f000 b8b3 	b.w	8007820 <__retarget_lock_acquire_recursive>
 80076ba:	bf00      	nop
 80076bc:	200002fd 	.word	0x200002fd

080076c0 <__sfp_lock_release>:
 80076c0:	4801      	ldr	r0, [pc, #4]	; (80076c8 <__sfp_lock_release+0x8>)
 80076c2:	f000 b8ae 	b.w	8007822 <__retarget_lock_release_recursive>
 80076c6:	bf00      	nop
 80076c8:	200002fd 	.word	0x200002fd

080076cc <__sinit_lock_acquire>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__sinit_lock_acquire+0x8>)
 80076ce:	f000 b8a7 	b.w	8007820 <__retarget_lock_acquire_recursive>
 80076d2:	bf00      	nop
 80076d4:	200002fe 	.word	0x200002fe

080076d8 <__sinit_lock_release>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__sinit_lock_release+0x8>)
 80076da:	f000 b8a2 	b.w	8007822 <__retarget_lock_release_recursive>
 80076de:	bf00      	nop
 80076e0:	200002fe 	.word	0x200002fe

080076e4 <__sinit>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	4604      	mov	r4, r0
 80076e8:	f7ff fff0 	bl	80076cc <__sinit_lock_acquire>
 80076ec:	69a3      	ldr	r3, [r4, #24]
 80076ee:	b11b      	cbz	r3, 80076f8 <__sinit+0x14>
 80076f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f4:	f7ff bff0 	b.w	80076d8 <__sinit_lock_release>
 80076f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076fc:	6523      	str	r3, [r4, #80]	; 0x50
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <__sinit+0x68>)
 8007700:	4a13      	ldr	r2, [pc, #76]	; (8007750 <__sinit+0x6c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	62a2      	str	r2, [r4, #40]	; 0x28
 8007706:	42a3      	cmp	r3, r4
 8007708:	bf04      	itt	eq
 800770a:	2301      	moveq	r3, #1
 800770c:	61a3      	streq	r3, [r4, #24]
 800770e:	4620      	mov	r0, r4
 8007710:	f000 f820 	bl	8007754 <__sfp>
 8007714:	6060      	str	r0, [r4, #4]
 8007716:	4620      	mov	r0, r4
 8007718:	f000 f81c 	bl	8007754 <__sfp>
 800771c:	60a0      	str	r0, [r4, #8]
 800771e:	4620      	mov	r0, r4
 8007720:	f000 f818 	bl	8007754 <__sfp>
 8007724:	2200      	movs	r2, #0
 8007726:	60e0      	str	r0, [r4, #12]
 8007728:	2104      	movs	r1, #4
 800772a:	6860      	ldr	r0, [r4, #4]
 800772c:	f7ff ff82 	bl	8007634 <std>
 8007730:	68a0      	ldr	r0, [r4, #8]
 8007732:	2201      	movs	r2, #1
 8007734:	2109      	movs	r1, #9
 8007736:	f7ff ff7d 	bl	8007634 <std>
 800773a:	68e0      	ldr	r0, [r4, #12]
 800773c:	2202      	movs	r2, #2
 800773e:	2112      	movs	r1, #18
 8007740:	f7ff ff78 	bl	8007634 <std>
 8007744:	2301      	movs	r3, #1
 8007746:	61a3      	str	r3, [r4, #24]
 8007748:	e7d2      	b.n	80076f0 <__sinit+0xc>
 800774a:	bf00      	nop
 800774c:	08007b90 	.word	0x08007b90
 8007750:	0800767d 	.word	0x0800767d

08007754 <__sfp>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	4607      	mov	r7, r0
 8007758:	f7ff ffac 	bl	80076b4 <__sfp_lock_acquire>
 800775c:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <__sfp+0x84>)
 800775e:	681e      	ldr	r6, [r3, #0]
 8007760:	69b3      	ldr	r3, [r6, #24]
 8007762:	b913      	cbnz	r3, 800776a <__sfp+0x16>
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff ffbd 	bl	80076e4 <__sinit>
 800776a:	3648      	adds	r6, #72	; 0x48
 800776c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007770:	3b01      	subs	r3, #1
 8007772:	d503      	bpl.n	800777c <__sfp+0x28>
 8007774:	6833      	ldr	r3, [r6, #0]
 8007776:	b30b      	cbz	r3, 80077bc <__sfp+0x68>
 8007778:	6836      	ldr	r6, [r6, #0]
 800777a:	e7f7      	b.n	800776c <__sfp+0x18>
 800777c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007780:	b9d5      	cbnz	r5, 80077b8 <__sfp+0x64>
 8007782:	4b16      	ldr	r3, [pc, #88]	; (80077dc <__sfp+0x88>)
 8007784:	60e3      	str	r3, [r4, #12]
 8007786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800778a:	6665      	str	r5, [r4, #100]	; 0x64
 800778c:	f000 f847 	bl	800781e <__retarget_lock_init_recursive>
 8007790:	f7ff ff96 	bl	80076c0 <__sfp_lock_release>
 8007794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800779c:	6025      	str	r5, [r4, #0]
 800779e:	61a5      	str	r5, [r4, #24]
 80077a0:	2208      	movs	r2, #8
 80077a2:	4629      	mov	r1, r5
 80077a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077a8:	f7fd faae 	bl	8004d08 <memset>
 80077ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077b4:	4620      	mov	r0, r4
 80077b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b8:	3468      	adds	r4, #104	; 0x68
 80077ba:	e7d9      	b.n	8007770 <__sfp+0x1c>
 80077bc:	2104      	movs	r1, #4
 80077be:	4638      	mov	r0, r7
 80077c0:	f7ff ff62 	bl	8007688 <__sfmoreglue>
 80077c4:	4604      	mov	r4, r0
 80077c6:	6030      	str	r0, [r6, #0]
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1d5      	bne.n	8007778 <__sfp+0x24>
 80077cc:	f7ff ff78 	bl	80076c0 <__sfp_lock_release>
 80077d0:	230c      	movs	r3, #12
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	e7ee      	b.n	80077b4 <__sfp+0x60>
 80077d6:	bf00      	nop
 80077d8:	08007b90 	.word	0x08007b90
 80077dc:	ffff0001 	.word	0xffff0001

080077e0 <_fwalk_reent>:
 80077e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e4:	4606      	mov	r6, r0
 80077e6:	4688      	mov	r8, r1
 80077e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077ec:	2700      	movs	r7, #0
 80077ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077f2:	f1b9 0901 	subs.w	r9, r9, #1
 80077f6:	d505      	bpl.n	8007804 <_fwalk_reent+0x24>
 80077f8:	6824      	ldr	r4, [r4, #0]
 80077fa:	2c00      	cmp	r4, #0
 80077fc:	d1f7      	bne.n	80077ee <_fwalk_reent+0xe>
 80077fe:	4638      	mov	r0, r7
 8007800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007804:	89ab      	ldrh	r3, [r5, #12]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d907      	bls.n	800781a <_fwalk_reent+0x3a>
 800780a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800780e:	3301      	adds	r3, #1
 8007810:	d003      	beq.n	800781a <_fwalk_reent+0x3a>
 8007812:	4629      	mov	r1, r5
 8007814:	4630      	mov	r0, r6
 8007816:	47c0      	blx	r8
 8007818:	4307      	orrs	r7, r0
 800781a:	3568      	adds	r5, #104	; 0x68
 800781c:	e7e9      	b.n	80077f2 <_fwalk_reent+0x12>

0800781e <__retarget_lock_init_recursive>:
 800781e:	4770      	bx	lr

08007820 <__retarget_lock_acquire_recursive>:
 8007820:	4770      	bx	lr

08007822 <__retarget_lock_release_recursive>:
 8007822:	4770      	bx	lr

08007824 <__swhatbuf_r>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	460e      	mov	r6, r1
 8007828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782c:	2900      	cmp	r1, #0
 800782e:	b096      	sub	sp, #88	; 0x58
 8007830:	4614      	mov	r4, r2
 8007832:	461d      	mov	r5, r3
 8007834:	da08      	bge.n	8007848 <__swhatbuf_r+0x24>
 8007836:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	602a      	str	r2, [r5, #0]
 800783e:	061a      	lsls	r2, r3, #24
 8007840:	d410      	bmi.n	8007864 <__swhatbuf_r+0x40>
 8007842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007846:	e00e      	b.n	8007866 <__swhatbuf_r+0x42>
 8007848:	466a      	mov	r2, sp
 800784a:	f000 f903 	bl	8007a54 <_fstat_r>
 800784e:	2800      	cmp	r0, #0
 8007850:	dbf1      	blt.n	8007836 <__swhatbuf_r+0x12>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007858:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800785c:	425a      	negs	r2, r3
 800785e:	415a      	adcs	r2, r3
 8007860:	602a      	str	r2, [r5, #0]
 8007862:	e7ee      	b.n	8007842 <__swhatbuf_r+0x1e>
 8007864:	2340      	movs	r3, #64	; 0x40
 8007866:	2000      	movs	r0, #0
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	b016      	add	sp, #88	; 0x58
 800786c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007870 <__smakebuf_r>:
 8007870:	898b      	ldrh	r3, [r1, #12]
 8007872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007874:	079d      	lsls	r5, r3, #30
 8007876:	4606      	mov	r6, r0
 8007878:	460c      	mov	r4, r1
 800787a:	d507      	bpl.n	800788c <__smakebuf_r+0x1c>
 800787c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	2301      	movs	r3, #1
 8007886:	6163      	str	r3, [r4, #20]
 8007888:	b002      	add	sp, #8
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	ab01      	add	r3, sp, #4
 800788e:	466a      	mov	r2, sp
 8007890:	f7ff ffc8 	bl	8007824 <__swhatbuf_r>
 8007894:	9900      	ldr	r1, [sp, #0]
 8007896:	4605      	mov	r5, r0
 8007898:	4630      	mov	r0, r6
 800789a:	f7ff f963 	bl	8006b64 <_malloc_r>
 800789e:	b948      	cbnz	r0, 80078b4 <__smakebuf_r+0x44>
 80078a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a4:	059a      	lsls	r2, r3, #22
 80078a6:	d4ef      	bmi.n	8007888 <__smakebuf_r+0x18>
 80078a8:	f023 0303 	bic.w	r3, r3, #3
 80078ac:	f043 0302 	orr.w	r3, r3, #2
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	e7e3      	b.n	800787c <__smakebuf_r+0xc>
 80078b4:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <__smakebuf_r+0x7c>)
 80078b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	6020      	str	r0, [r4, #0]
 80078bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	9b00      	ldr	r3, [sp, #0]
 80078c4:	6163      	str	r3, [r4, #20]
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	6120      	str	r0, [r4, #16]
 80078ca:	b15b      	cbz	r3, 80078e4 <__smakebuf_r+0x74>
 80078cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d0:	4630      	mov	r0, r6
 80078d2:	f000 f8d1 	bl	8007a78 <_isatty_r>
 80078d6:	b128      	cbz	r0, 80078e4 <__smakebuf_r+0x74>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f023 0303 	bic.w	r3, r3, #3
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	89a0      	ldrh	r0, [r4, #12]
 80078e6:	4305      	orrs	r5, r0
 80078e8:	81a5      	strh	r5, [r4, #12]
 80078ea:	e7cd      	b.n	8007888 <__smakebuf_r+0x18>
 80078ec:	0800767d 	.word	0x0800767d

080078f0 <_malloc_usable_size_r>:
 80078f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f4:	1f18      	subs	r0, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bfbc      	itt	lt
 80078fa:	580b      	ldrlt	r3, [r1, r0]
 80078fc:	18c0      	addlt	r0, r0, r3
 80078fe:	4770      	bx	lr

08007900 <_raise_r>:
 8007900:	291f      	cmp	r1, #31
 8007902:	b538      	push	{r3, r4, r5, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	d904      	bls.n	8007914 <_raise_r+0x14>
 800790a:	2316      	movs	r3, #22
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	f04f 30ff 	mov.w	r0, #4294967295
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007916:	b112      	cbz	r2, 800791e <_raise_r+0x1e>
 8007918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800791c:	b94b      	cbnz	r3, 8007932 <_raise_r+0x32>
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f830 	bl	8007984 <_getpid_r>
 8007924:	462a      	mov	r2, r5
 8007926:	4601      	mov	r1, r0
 8007928:	4620      	mov	r0, r4
 800792a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792e:	f000 b817 	b.w	8007960 <_kill_r>
 8007932:	2b01      	cmp	r3, #1
 8007934:	d00a      	beq.n	800794c <_raise_r+0x4c>
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	d103      	bne.n	8007942 <_raise_r+0x42>
 800793a:	2316      	movs	r3, #22
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	2001      	movs	r0, #1
 8007940:	e7e7      	b.n	8007912 <_raise_r+0x12>
 8007942:	2400      	movs	r4, #0
 8007944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007948:	4628      	mov	r0, r5
 800794a:	4798      	blx	r3
 800794c:	2000      	movs	r0, #0
 800794e:	e7e0      	b.n	8007912 <_raise_r+0x12>

08007950 <raise>:
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <raise+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f7ff bfd3 	b.w	8007900 <_raise_r>
 800795a:	bf00      	nop
 800795c:	20000018 	.word	0x20000018

08007960 <_kill_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	; (8007980 <_kill_r+0x20>)
 8007964:	2300      	movs	r3, #0
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	f7f9 fde1 	bl	8001534 <_kill>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d102      	bne.n	800797c <_kill_r+0x1c>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	b103      	cbz	r3, 800797c <_kill_r+0x1c>
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	bf00      	nop
 8007980:	200002f8 	.word	0x200002f8

08007984 <_getpid_r>:
 8007984:	f7f9 bdce 	b.w	8001524 <_getpid>

08007988 <__sread>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007990:	f000 f894 	bl	8007abc <_read_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	bfab      	itete	ge
 8007998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800799a:	89a3      	ldrhlt	r3, [r4, #12]
 800799c:	181b      	addge	r3, r3, r0
 800799e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079a2:	bfac      	ite	ge
 80079a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80079a6:	81a3      	strhlt	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__swrite>:
 80079aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ae:	461f      	mov	r7, r3
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	05db      	lsls	r3, r3, #23
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	4616      	mov	r6, r2
 80079ba:	d505      	bpl.n	80079c8 <__swrite+0x1e>
 80079bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c0:	2302      	movs	r3, #2
 80079c2:	2200      	movs	r2, #0
 80079c4:	f000 f868 	bl	8007a98 <_lseek_r>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	4632      	mov	r2, r6
 80079d6:	463b      	mov	r3, r7
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f000 b817 	b.w	8007a10 <_write_r>

080079e2 <__sseek>:
 80079e2:	b510      	push	{r4, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 f855 	bl	8007a98 <_lseek_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	bf15      	itete	ne
 80079f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079fe:	81a3      	strheq	r3, [r4, #12]
 8007a00:	bf18      	it	ne
 8007a02:	81a3      	strhne	r3, [r4, #12]
 8007a04:	bd10      	pop	{r4, pc}

08007a06 <__sclose>:
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 b813 	b.w	8007a34 <_close_r>
	...

08007a10 <_write_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	; (8007a30 <_write_r+0x20>)
 8007a14:	4604      	mov	r4, r0
 8007a16:	4608      	mov	r0, r1
 8007a18:	4611      	mov	r1, r2
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	602a      	str	r2, [r5, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f7f9 fdbf 	bl	80015a2 <_write>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_write_r+0x1e>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_write_r+0x1e>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	200002f8 	.word	0x200002f8

08007a34 <_close_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d06      	ldr	r5, [pc, #24]	; (8007a50 <_close_r+0x1c>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7f9 fdcb 	bl	80015da <_close>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_close_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_close_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	200002f8 	.word	0x200002f8

08007a54 <_fstat_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d07      	ldr	r5, [pc, #28]	; (8007a74 <_fstat_r+0x20>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	f7f9 fdc6 	bl	80015f2 <_fstat>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	d102      	bne.n	8007a70 <_fstat_r+0x1c>
 8007a6a:	682b      	ldr	r3, [r5, #0]
 8007a6c:	b103      	cbz	r3, 8007a70 <_fstat_r+0x1c>
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	bd38      	pop	{r3, r4, r5, pc}
 8007a72:	bf00      	nop
 8007a74:	200002f8 	.word	0x200002f8

08007a78 <_isatty_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d06      	ldr	r5, [pc, #24]	; (8007a94 <_isatty_r+0x1c>)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	f7f9 fdc5 	bl	8001612 <_isatty>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_isatty_r+0x1a>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_isatty_r+0x1a>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	200002f8 	.word	0x200002f8

08007a98 <_lseek_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	; (8007ab8 <_lseek_r+0x20>)
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f7f9 fdbe 	bl	8001628 <_lseek>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_lseek_r+0x1e>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_lseek_r+0x1e>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	200002f8 	.word	0x200002f8

08007abc <_read_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d07      	ldr	r5, [pc, #28]	; (8007adc <_read_r+0x20>)
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	602a      	str	r2, [r5, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7f9 fd4c 	bl	8001568 <_read>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_read_r+0x1e>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_read_r+0x1e>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	200002f8 	.word	0x200002f8

08007ae0 <_init>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	bf00      	nop
 8007ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae6:	bc08      	pop	{r3}
 8007ae8:	469e      	mov	lr, r3
 8007aea:	4770      	bx	lr

08007aec <_fini>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr
