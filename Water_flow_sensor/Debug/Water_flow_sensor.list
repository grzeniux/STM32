
Water_flow_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008110  08008110  00018110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008564  08008564  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800856c  0800856c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e0  08008754  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08008754  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017309  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ac  00000000  00000000  00037519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ef4  00000000  00000000  0003cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cbf  00000000  00000000  0005fc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce2db  00000000  00000000  00078913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e0  00000000  00000000  00146c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080f8 	.word	0x080080f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080080f8 	.word	0x080080f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|flowsensor_Pin;
 8000faa:	2318      	movs	r3, #24
 8000fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <MX_GPIO_Init+0x94>)
 8000fc0:	f000 ffcc 	bl	8001f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f000 ff12 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f000 ff2b 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_I2C1_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_I2C1_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <MX_I2C1_Init+0x7c>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_I2C1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <MX_I2C1_Init+0x74>)
 8001020:	f001 f938 	bl	8002294 <HAL_I2C_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800102a:	f000 fafd 	bl	8001628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_I2C1_Init+0x74>)
 8001032:	f001 fcb1 	bl	8002998 <HAL_I2CEx_ConfigAnalogFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800103c:	f000 faf4 	bl	8001628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_I2C1_Init+0x74>)
 8001044:	f001 fcf3 	bl	8002a2e <HAL_I2CEx_ConfigDigitalFilter>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 faeb 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001fc 	.word	0x200001fc
 800105c:	40005400 	.word	0x40005400
 8001060:	10909cec 	.word	0x10909cec

08001064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09e      	sub	sp, #120	; 0x78
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	2254      	movs	r2, #84	; 0x54
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f004 f94b 	bl	8005320 <memset>
  if(i2cHandle->Instance==I2C1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_I2C_MspInit+0xa4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d135      	bne.n	8001100 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001094:	2340      	movs	r3, #64	; 0x40
 8001096:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fbbd 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010ac:	f000 fabc 	bl	8001628 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_I2C_MspInit+0xa8>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_I2C_MspInit+0xa8>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_I2C_MspInit+0xa8>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d8:	2304      	movs	r3, #4
 80010da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e0:	4619      	mov	r1, r3
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <HAL_I2C_MspInit+0xac>)
 80010e4:	f000 ff3a 	bl	8001f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_I2C_MspInit+0xa8>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_I2C_MspInit+0xa8>)
 80010ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f2:	6593      	str	r3, [r2, #88]	; 0x58
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_I2C_MspInit+0xa8>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001100:	bf00      	nop
 8001102:	3778      	adds	r7, #120	; 0x78
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40005400 	.word	0x40005400
 800110c:	40021000 	.word	0x40021000
 8001110:	48000400 	.word	0x48000400

08001114 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800112a:	2308      	movs	r3, #8
 800112c:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f000 fd60 	bl	8001bf4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	2130      	movs	r1, #48	; 0x30
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f829 	bl	8001194 <lcd_write>
	HAL_Delay(5);
 8001142:	2005      	movs	r0, #5
 8001144:	f000 fd56 	bl	8001bf4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	2130      	movs	r1, #48	; 0x30
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f81f 	bl	8001194 <lcd_write>
	HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 fd4c 	bl	8001bf4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	2130      	movs	r1, #48	; 0x30
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f815 	bl	8001194 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f80e 	bl	8001194 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	210c      	movs	r1, #12
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f807 	bl	8001194 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f89f 	bl	80012ca <lcd_clear>

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	460b      	mov	r3, r1
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	4613      	mov	r3, r2
 80011a4:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	797b      	ldrb	r3, [r7, #5]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80011bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011c0:	f023 030f 	bic.w	r3, r3, #15
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	4313      	orrs	r3, r2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	b25a      	sxtb	r2, r3
 80011ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	b299      	uxth	r1, r3
 80011fc:	f107 020c 	add.w	r2, r7, #12
 8001200:	2364      	movs	r3, #100	; 0x64
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2304      	movs	r3, #4
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <lcd_write+0x88>)
 8001208:	f001 f8d4 	bl	80023b4 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 800120c:	2005      	movs	r0, #5
 800120e:	f000 fcf1 	bl	8001bf4 <HAL_Delay>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001fc 	.word	0x200001fc

08001220 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	2300      	movs	r3, #0
 800122e:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800123a:	2308      	movs	r3, #8
 800123c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f843 	bl	80012ca <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffa1 	bl	8001194 <lcd_write>
	while(lcd->f_line[i])
 8001252:	e00f      	b.n	8001274 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7818      	ldrb	r0, [r3, #0]
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	7859      	ldrb	r1, [r3, #1]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	f7ff ff93 	bl	8001194 <lcd_write>
		i++;
 800126e:	7bbb      	ldrb	r3, [r7, #14]
 8001270:	3301      	adds	r3, #1
 8001272:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e9      	bne.n	8001254 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	21c0      	movs	r1, #192	; 0xc0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff81 	bl	8001194 <lcd_write>
	while(lcd->s_line[i])
 8001292:	e00f      	b.n	80012b4 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7818      	ldrb	r0, [r3, #0]
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	7c99      	ldrb	r1, [r3, #18]
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	f7ff ff73 	bl	8001194 <lcd_write>
		i++;
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	3301      	adds	r3, #1
 80012b2:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	7c9b      	ldrb	r3, [r3, #18]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e9      	bne.n	8001294 <lcd_display+0x74>
	}
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80012e0:	2308      	movs	r3, #8
 80012e2:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff51 	bl	8001194 <lcd_write>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN PV */

 struct lcd_disp disp;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  	if(htim->Instance == TIM6)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d102      	bne.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x18>
  	{
  	//	sprintf((char *)disp.f_line, "Shoty");
 	//	sprintf((char *)disp.s_line, "Driny");
  		lcd_display(&disp);
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001310:	f7ff ff86 	bl	8001220 <lcd_display>


 		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
  	}
  }
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40001000 	.word	0x40001000
 8001320:	20000250 	.word	0x20000250

08001324 <flow>:
float imp = 0;
float total_ml;
float ML;

void flow () // Interrupt function to increment flow
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
   flow_frequency++;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <flow+0x24>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <flow+0x24>)
 8001330:	6013      	str	r3, [r2, #0]
   totalImpulses++;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <flow+0x28>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <flow+0x28>)
 800133a:	6013      	str	r3, [r2, #0]
   HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800133c:	2108      	movs	r1, #8
 800133e:	4804      	ldr	r0, [pc, #16]	; (8001350 <flow+0x2c>)
 8001340:	f000 ff76 	bl	8002230 <HAL_GPIO_TogglePin>

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000274 	.word	0x20000274
 800134c:	2000028c 	.word	0x2000028c
 8001350:	48000400 	.word	0x48000400
 8001354:	00000000 	.word	0x00000000

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135e:	f000 fbd4 	bl	8001b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 f8ed 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f7ff fdf1 	bl	8000f4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800136a:	f000 fb03 	bl	8001974 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800136e:	f7ff fe39 	bl	8000fe4 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001372:	f000 faa1 	bl	80018b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	disp.addr = (0x27 << 1);
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <main+0x1a0>)
 8001378:	224e      	movs	r2, #78	; 0x4e
 800137a:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 800137c:	4b5e      	ldr	r3, [pc, #376]	; (80014f8 <main+0x1a0>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	lcd_init(&disp);
 8001384:	485c      	ldr	r0, [pc, #368]	; (80014f8 <main+0x1a0>)
 8001386:	f7ff fec5 	bl	8001114 <lcd_init>





	currentTime = HAL_GetTick();
 800138a:	f000 fc27 	bl	8001bdc <HAL_GetTick>
 800138e:	4603      	mov	r3, r0
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <main+0x1a4>)
 8001392:	6013      	str	r3, [r2, #0]
    cloopTime = currentTime;
 8001394:	4b59      	ldr	r3, [pc, #356]	; (80014fc <main+0x1a4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a59      	ldr	r2, [pc, #356]	; (8001500 <main+0x1a8>)
 800139a:	6013      	str	r3, [r2, #0]





	 totalImpulses = 0;
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <main+0x1ac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
  {




		  currentTime = HAL_GetTick();
 80013a2:	f000 fc1b 	bl	8001bdc <HAL_GetTick>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a54      	ldr	r2, [pc, #336]	; (80014fc <main+0x1a4>)
 80013aa:	6013      	str	r3, [r2, #0]
	          // Every second, calculate and print litres/hour
	          if (currentTime >= (cloopTime + 1000))
 80013ac:	4b54      	ldr	r3, [pc, #336]	; (8001500 <main+0x1a8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <main+0x1a4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f2      	bhi.n	80013a2 <main+0x4a>
	          {
	              cloopTime = currentTime; // Updates cloopTime
 80013bc:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <main+0x1a4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <main+0x1a8>)
 80013c2:	6013      	str	r3, [r2, #0]
	              if (flow_frequency != 0)
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <main+0x1b0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d071      	beq.n	80014b0 <main+0x158>
	              {
	                  l_minute = (flow_frequency / 1800); // (Pulse frequency x 60 min) / 9.8 Q = flowrate in L/hour
 80013cc:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <main+0x1b0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a4e      	ldr	r2, [pc, #312]	; (800150c <main+0x1b4>)
 80013d2:	fb82 1203 	smull	r1, r2, r2, r3
 80013d6:	441a      	add	r2, r3
 80013d8:	1292      	asrs	r2, r2, #10
 80013da:	17db      	asrs	r3, r3, #31
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <main+0x1b8>)
 80013e8:	edc3 7a00 	vstr	s15, [r3]
	                //  total_ml = totalImpulses * ml_per_impulse;

	                 // l_minute = l_minute / 60;
	              //    l_minute = l_minute * 1000;
	              //    vol = vol + (l_minute / 7.58);
	                  vol = vol + l_minute;
 80013ec:	4b49      	ldr	r3, [pc, #292]	; (8001514 <main+0x1bc>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <main+0x1b8>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <main+0x1bc>)
 80013fe:	edc3 7a00 	vstr	s15, [r3]
	                  xy = vol * 1000;
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <main+0x1bc>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001518 <main+0x1c0>
 800140c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001410:	4b42      	ldr	r3, [pc, #264]	; (800151c <main+0x1c4>)
 8001412:	edc3 7a00 	vstr	s15, [r3]
	                  xy /= 200;
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <main+0x1c4>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001520 <main+0x1c8>
 8001420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001424:	4b3d      	ldr	r3, [pc, #244]	; (800151c <main+0x1c4>)
 8001426:	edc3 7a00 	vstr	s15, [r3]

	                  ML = totalImpulses * 0.48 ;
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <main+0x1ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f868 	bl	8000504 <__aeabi_ui2d>
 8001434:	a32e      	add	r3, pc, #184	; (adr r3, 80014f0 <main+0x198>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f8dd 	bl	80005f8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fbaf 	bl	8000ba8 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <main+0x1cc>)
 800144e:	6013      	str	r3, [r2, #0]


	                  sprintf((char *)disp.f_line, "I: %lu, %2.2f ml, ", totalImpulses, ML);
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <main+0x1ac>)
 8001452:	681c      	ldr	r4, [r3, #0]
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <main+0x1cc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f875 	bl	8000548 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9cd 2300 	strd	r2, r3, [sp]
 8001466:	4622      	mov	r2, r4
 8001468:	492f      	ldr	r1, [pc, #188]	; (8001528 <main+0x1d0>)
 800146a:	4830      	ldr	r0, [pc, #192]	; (800152c <main+0x1d4>)
 800146c:	f004 fbca 	bl	8005c04 <siprintf>
	                  lcd_display(&disp);
 8001470:	4821      	ldr	r0, [pc, #132]	; (80014f8 <main+0x1a0>)
 8001472:	f7ff fed5 	bl	8001220 <lcd_display>

	                  // Dodanie informacji o ilości impulsów i ilości mililitrów
	                  sprintf((char *)disp.s_line, "p: %2.2f, %2.2f ml", vol, total_ml);
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <main+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f864 	bl	8000548 <__aeabi_f2d>
 8001480:	4604      	mov	r4, r0
 8001482:	460d      	mov	r5, r1
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <main+0x1d8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f85d 	bl	8000548 <__aeabi_f2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9cd 2300 	strd	r2, r3, [sp]
 8001496:	4622      	mov	r2, r4
 8001498:	462b      	mov	r3, r5
 800149a:	4926      	ldr	r1, [pc, #152]	; (8001534 <main+0x1dc>)
 800149c:	4826      	ldr	r0, [pc, #152]	; (8001538 <main+0x1e0>)
 800149e:	f004 fbb1 	bl	8005c04 <siprintf>
	                  lcd_display(&disp);
 80014a2:	4815      	ldr	r0, [pc, #84]	; (80014f8 <main+0x1a0>)
 80014a4:	f7ff febc 	bl	8001220 <lcd_display>

	                  flow_frequency = 0; // Reset Counter
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <main+0x1b0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e778      	b.n	80013a2 <main+0x4a>
	              }
	              else
	              {
	                  // Dodanie informacji o ilości impulsów i ilości mililitrów
	                 // sprintf((char *)disp.f_line, "%.2f, I: %lu, %.2f ml, ", xy, totalImpulses, total_ml);
	                  sprintf((char *)disp.f_line, "I: %lu, %2.2f ml, ",totalImpulses, ML);
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <main+0x1ac>)
 80014b2:	681c      	ldr	r4, [r3, #0]
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <main+0x1cc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f845 	bl	8000548 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	e9cd 2300 	strd	r2, r3, [sp]
 80014c6:	4622      	mov	r2, r4
 80014c8:	4917      	ldr	r1, [pc, #92]	; (8001528 <main+0x1d0>)
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <main+0x1d4>)
 80014cc:	f004 fb9a 	bl	8005c04 <siprintf>

	                  sprintf((char *)disp.s_line, "V: %2.2f X", vol);
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <main+0x1bc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4917      	ldr	r1, [pc, #92]	; (800153c <main+0x1e4>)
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <main+0x1e0>)
 80014e2:	f004 fb8f 	bl	8005c04 <siprintf>
	                  lcd_display(&disp);
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <main+0x1a0>)
 80014e8:	f7ff fe9a 	bl	8001220 <lcd_display>
		  currentTime = HAL_GetTick();
 80014ec:	e759      	b.n	80013a2 <main+0x4a>
 80014ee:	bf00      	nop
 80014f0:	eb851eb8 	.word	0xeb851eb8
 80014f4:	3fdeb851 	.word	0x3fdeb851
 80014f8:	20000250 	.word	0x20000250
 80014fc:	20000284 	.word	0x20000284
 8001500:	20000288 	.word	0x20000288
 8001504:	2000028c 	.word	0x2000028c
 8001508:	20000274 	.word	0x20000274
 800150c:	91a2b3c5 	.word	0x91a2b3c5
 8001510:	2000027c 	.word	0x2000027c
 8001514:	20000278 	.word	0x20000278
 8001518:	447a0000 	.word	0x447a0000
 800151c:	20000280 	.word	0x20000280
 8001520:	43480000 	.word	0x43480000
 8001524:	20000294 	.word	0x20000294
 8001528:	08008110 	.word	0x08008110
 800152c:	20000251 	.word	0x20000251
 8001530:	20000290 	.word	0x20000290
 8001534:	08008124 	.word	0x08008124
 8001538:	20000262 	.word	0x20000262
 800153c:	08008138 	.word	0x08008138

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b096      	sub	sp, #88	; 0x58
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	2244      	movs	r2, #68	; 0x44
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fee6 	bl	8005320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001566:	f001 facd 	bl	8002b04 <HAL_PWREx_ControlVoltageScaling>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001570:	f000 f85a 	bl	8001628 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001574:	f001 faa8 	bl	8002ac8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <SystemClock_Config+0xc0>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157e:	4a20      	ldr	r2, [pc, #128]	; (8001600 <SystemClock_Config+0xc0>)
 8001580:	f023 0318 	bic.w	r3, r3, #24
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001588:	2314      	movs	r3, #20
 800158a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015a0:	2301      	movs	r3, #1
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015a8:	2328      	movs	r3, #40	; 0x28
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ac:	2307      	movs	r3, #7
 80015ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 faf7 	bl	8002bb0 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015c8:	f000 f82e 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2303      	movs	r3, #3
 80015d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	2104      	movs	r1, #4
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fef7 	bl	80033d8 <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015f0:	f000 f81a 	bl	8001628 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015f4:	f002 fb0a 	bl	8003c0c <HAL_RCCEx_EnableMSIPLLMode>
}
 80015f8:	bf00      	nop
 80015fa:	3758      	adds	r7, #88	; 0x58
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_GPIO_EXTI_Callback>:
//
//
//

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == flowsensor)
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_GPIO_EXTI_Callback+0x20>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	88fa      	ldrh	r2, [r7, #6]
 8001614:	429a      	cmp	r2, r3
 8001616:	d101      	bne.n	800161c <HAL_GPIO_EXTI_Callback+0x18>
    {
      //  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Toggle an LED or use an oscilloscope to check if the interrupt is working
        flow();
 8001618:	f7ff fe84 	bl	8001324 <flow>
    }
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>
	...

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x44>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x44>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6613      	str	r3, [r2, #96]	; 0x60
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x44>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x44>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6593      	str	r3, [r2, #88]	; 0x58
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c8:	f000 fa74 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(flowsensor_Pin);
 80016d4:	2010      	movs	r0, #16
 80016d6:	f000 fdc5 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <USART2_IRQHandler+0x10>)
 80016e6:	f002 fe67 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002e8 	.word	0x200002e8

080016f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM6_DAC_IRQHandler+0x10>)
 80016fa:	f002 fbe0 	bl	8003ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000029c 	.word	0x2000029c

08001708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_kill>:

int _kill(int pid, int sig)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001722:	f003 fdd3 	bl	80052cc <__errno>
 8001726:	4603      	mov	r3, r0
 8001728:	2216      	movs	r2, #22
 800172a:	601a      	str	r2, [r3, #0]
  return -1;
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_exit>:

void _exit (int status)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffe7 	bl	8001718 <_kill>
  while (1) {}    /* Make sure we hang here */
 800174a:	e7fe      	b.n	800174a <_exit+0x12>

0800174c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e00a      	b.n	8001774 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175e:	f3af 8000 	nop.w
 8001762:	4601      	mov	r1, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbf0      	blt.n	800175e <_read+0x12>
  }

  return len;
 800177c:	687b      	ldr	r3, [r7, #4]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e009      	b.n	80017ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf1      	blt.n	8001798 <_write+0x12>
  }
  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_close>:

int _close(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e6:	605a      	str	r2, [r3, #4]
  return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_isatty>:

int _isatty(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f003 fd38 	bl	80052cc <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20010000 	.word	0x20010000
 8001888:	00000400 	.word	0x00000400
 800188c:	20000298 	.word	0x20000298
 8001890:	20000380 	.word	0x20000380

08001894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_TIM6_Init+0x68>)
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <MX_TIM6_Init+0x6c>)
 80018cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_TIM6_Init+0x68>)
 80018d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80018d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_TIM6_Init+0x68>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_TIM6_Init+0x68>)
 80018de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_TIM6_Init+0x68>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_TIM6_Init+0x68>)
 80018ec:	f002 fa90 	bl	8003e10 <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80018f6:	f7ff fe97 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	; (8001920 <MX_TIM6_Init+0x68>)
 8001908:	f002 fc84 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001912:	f7ff fe89 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000029c 	.word	0x2000029c
 8001924:	40001000 	.word	0x40001000

08001928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_TIM_Base_MspInit+0x44>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d113      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_TIM_Base_MspInit+0x48>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_TIM_Base_MspInit+0x48>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_TIM_Base_MspInit+0x48>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2036      	movs	r0, #54	; 0x36
 8001958:	f000 fa4b 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800195c:	2036      	movs	r0, #54	; 0x36
 800195e:	f000 fa64 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40001000 	.word	0x40001000
 8001970:	40021000 	.word	0x40021000

08001974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <MX_USART2_UART_Init+0x5c>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b8:	f002 fcb0 	bl	800431c <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c2:	f7ff fe31 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200002e8 	.word	0x200002e8
 80019d0:	40004400 	.word	0x40004400

080019d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b09e      	sub	sp, #120	; 0x78
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2254      	movs	r2, #84	; 0x54
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fc93 	bl	8005320 <memset>
  if(uartHandle->Instance==USART2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <HAL_UART_MspInit+0xdc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d150      	bne.n	8001aa6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 ff05 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a1c:	f7ff fe04 	bl	8001628 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_UART_MspInit+0xe0>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_UART_MspInit+0xe0>)
 8001a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_UART_MspInit+0xe0>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_UART_MspInit+0xe0>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_UART_MspInit+0xe0>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_UART_MspInit+0xe0>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a50:	2304      	movs	r3, #4
 8001a52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a60:	2307      	movs	r3, #7
 8001a62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f000 fa75 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a84:	2303      	movs	r3, #3
 8001a86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a92:	f000 fa63 	bl	8001f5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2026      	movs	r0, #38	; 0x26
 8001a9c:	f000 f9a9 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa0:	2026      	movs	r0, #38	; 0x26
 8001aa2:	f000 f9c2 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3778      	adds	r7, #120	; 0x78
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40004400 	.word	0x40004400
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff feea 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	; (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f003 fbf7 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff fc35 	bl	8001358 <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001afc:	08008574 	.word	0x08008574
  ldr r2, =_sbss
 8001b00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b04:	20000380 	.word	0x20000380

08001b08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_IRQHandler>

08001b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f961 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f80e 	bl	8001b3c <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e001      	b.n	8001b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2c:	f7ff fd82 	bl	8001634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_InitTick+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_InitTick+0x70>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_InitTick+0x6c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f96d 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d809      	bhi.n	8001b8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 f937 	bl	8001df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_InitTick+0x74>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e007      	b.n	8001b9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e004      	b.n	8001b9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e001      	b.n	8001b9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000000c 	.word	0x2000000c
 8001bd8:	2000036c 	.word	0x2000036c

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000036c 	.word	0x2000036c

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000000c 	.word	0x2000000c

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d008      	beq.n	8001e88 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e022      	b.n	8001ece <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 020e 	bic.w	r2, r2, #14
 8001e96:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	f003 021c 	and.w	r2, r3, #28
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d005      	beq.n	8001efe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e029      	b.n	8001f52 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 020e 	bic.w	r2, r2, #14
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0201 	bic.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f003 021c 	and.w	r2, r3, #28
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
    }
  }
  return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	e148      	b.n	80021fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 813a 	beq.w	80021f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d005      	beq.n	8001f9c <HAL_GPIO_Init+0x40>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d130      	bne.n	8001ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0201 	and.w	r2, r3, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b03      	cmp	r3, #3
 8002008:	d017      	beq.n	800203a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d123      	bne.n	800208e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	6939      	ldr	r1, [r7, #16]
 800208a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0203 	and.w	r2, r3, #3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8094 	beq.w	80021f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d0:	4b52      	ldr	r3, [pc, #328]	; (800221c <HAL_GPIO_Init+0x2c0>)
 80020d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_GPIO_Init+0x2c0>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6613      	str	r3, [r2, #96]	; 0x60
 80020dc:	4b4f      	ldr	r3, [pc, #316]	; (800221c <HAL_GPIO_Init+0x2c0>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020e8:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <HAL_GPIO_Init+0x2c4>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002112:	d00d      	beq.n	8002130 <HAL_GPIO_Init+0x1d4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a43      	ldr	r2, [pc, #268]	; (8002224 <HAL_GPIO_Init+0x2c8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <HAL_GPIO_Init+0x1d0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a42      	ldr	r2, [pc, #264]	; (8002228 <HAL_GPIO_Init+0x2cc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_GPIO_Init+0x1cc>
 8002124:	2302      	movs	r3, #2
 8002126:	e004      	b.n	8002132 <HAL_GPIO_Init+0x1d6>
 8002128:	2307      	movs	r3, #7
 800212a:	e002      	b.n	8002132 <HAL_GPIO_Init+0x1d6>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_GPIO_Init+0x1d6>
 8002130:	2300      	movs	r3, #0
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	f002 0203 	and.w	r2, r2, #3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4093      	lsls	r3, r2
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002142:	4937      	ldr	r1, [pc, #220]	; (8002220 <HAL_GPIO_Init+0x2c4>)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_GPIO_Init+0x2d0>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002174:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_GPIO_Init+0x2d0>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_GPIO_Init+0x2d0>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219e:	4a23      	ldr	r2, [pc, #140]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021c8:	4a18      	ldr	r2, [pc, #96]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3301      	adds	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f aeaf 	bne.w	8001f6c <HAL_GPIO_Init+0x10>
  }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000
 8002224:	48000400 	.word	0x48000400
 8002228:	48000800 	.word	0x48000800
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43d9      	mvns	r1, r3
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	400b      	ands	r3, r1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f9be 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e081      	b.n	80023aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fed2 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	e006      	b.n	800231c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800231a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d104      	bne.n	800232e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800232c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69d9      	ldr	r1, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1a      	ldr	r2, [r3, #32]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	461a      	mov	r2, r3
 80023c0:	460b      	mov	r3, r1
 80023c2:	817b      	strh	r3, [r7, #10]
 80023c4:	4613      	mov	r3, r2
 80023c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	f040 80da 	bne.w	800258a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2C_Master_Transmit+0x30>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0d3      	b.n	800258c <HAL_I2C_Master_Transmit+0x1d8>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ec:	f7ff fbf6 	bl	8001bdc <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2319      	movs	r3, #25
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f8f0 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0be      	b.n	800258c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	; 0x21
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2210      	movs	r2, #16
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	893a      	ldrh	r2, [r7, #8]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2bff      	cmp	r3, #255	; 0xff
 800243e:	d90e      	bls.n	800245e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	b2da      	uxtb	r2, r3
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <HAL_I2C_Master_Transmit+0x1e0>)
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa6c 	bl	8002934 <I2C_TransferConfig>
 800245c:	e06c      	b.n	8002538 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	b2da      	uxtb	r2, r3
 800246e:	8979      	ldrh	r1, [r7, #10]
 8002470:	4b48      	ldr	r3, [pc, #288]	; (8002594 <HAL_I2C_Master_Transmit+0x1e0>)
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa5b 	bl	8002934 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800247e:	e05b      	b.n	8002538 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	6a39      	ldr	r1, [r7, #32]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f8ed 	bl	8002664 <I2C_WaitOnTXISFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e07b      	b.n	800258c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d034      	beq.n	8002538 <HAL_I2C_Master_Transmit+0x184>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d130      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2200      	movs	r2, #0
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f87f 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e04d      	b.n	800258c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2bff      	cmp	r3, #255	; 0xff
 80024f8:	d90e      	bls.n	8002518 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	b2da      	uxtb	r2, r3
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fa0f 	bl	8002934 <I2C_TransferConfig>
 8002516:	e00f      	b.n	8002538 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	b2da      	uxtb	r2, r3
 8002528:	8979      	ldrh	r1, [r7, #10]
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9fe 	bl	8002934 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d19e      	bne.n	8002480 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6a39      	ldr	r1, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f8cc 	bl	80026e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01a      	b.n	800258c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2220      	movs	r2, #32
 800255c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_I2C_Master_Transmit+0x1e4>)
 800256a:	400b      	ands	r3, r1
 800256c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	80002000 	.word	0x80002000
 8002598:	fe00e800 	.word	0xfe00e800

0800259c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d103      	bne.n	80025ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d007      	beq.n	80025d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	619a      	str	r2, [r3, #24]
  }
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f4:	e022      	b.n	800263c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d01e      	beq.n	800263c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7ff faed 	bl	8001bdc <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d113      	bne.n	800263c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e00f      	b.n	800265c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	429a      	cmp	r2, r3
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	429a      	cmp	r2, r3
 8002658:	d0cd      	beq.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002670:	e02c      	b.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f870 	bl	800275c <I2C_IsErrorOccurred>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02a      	b.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d01e      	beq.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7ff faa5 	bl	8001bdc <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d113      	bne.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e007      	b.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d1cb      	bne.n	8002672 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f0:	e028      	b.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f830 	bl	800275c <I2C_IsErrorOccurred>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e026      	b.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7ff fa69 	bl	8001bdc <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d113      	bne.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e007      	b.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b20      	cmp	r3, #32
 8002750:	d1cf      	bne.n	80026f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d075      	beq.n	8002874 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2210      	movs	r2, #16
 800278e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002790:	e056      	b.n	8002840 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d052      	beq.n	8002840 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7ff fa1f 	bl	8001bdc <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_IsErrorOccurred+0x54>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d147      	bne.n	8002840 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d2:	d12e      	bne.n	8002832 <I2C_IsErrorOccurred+0xd6>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027da:	d02a      	beq.n	8002832 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d027      	beq.n	8002832 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027f2:	f7ff f9f3 	bl	8001bdc <HAL_GetTick>
 80027f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027f8:	e01b      	b.n	8002832 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027fa:	f7ff f9ef 	bl	8001bdc <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b19      	cmp	r3, #25
 8002806:	d914      	bls.n	8002832 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b20      	cmp	r3, #32
 800283e:	d1dc      	bne.n	80027fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b20      	cmp	r3, #32
 800284c:	d003      	beq.n	8002856 <I2C_IsErrorOccurred+0xfa>
 800284e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002852:	2b00      	cmp	r3, #0
 8002854:	d09d      	beq.n	8002792 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2220      	movs	r2, #32
 8002864:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002896:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01c      	beq.n	8002924 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fe56 	bl	800259c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <I2C_IsErrorOccurred+0x1d4>)
 80028fc:	400b      	ands	r3, r1
 80028fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	fe00e800 	.word	0xfe00e800

08002934 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	4613      	mov	r3, r2
 8002944:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800294c:	7a7b      	ldrb	r3, [r7, #9]
 800294e:	041b      	lsls	r3, r3, #16
 8002950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002954:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	4313      	orrs	r3, r2
 800295e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002962:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <I2C_TransferConfig+0x60>)
 8002974:	430b      	orrs	r3, r1
 8002976:	43db      	mvns	r3, r3
 8002978:	ea02 0103 	and.w	r1, r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	03ff63ff 	.word	0x03ff63ff

08002998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d138      	bne.n	8002a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e032      	b.n	8002a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d139      	bne.n	8002ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e033      	b.n	8002aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2224      	movs	r2, #36	; 0x24
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40007000 	.word	0x40007000

08002b04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b12:	d130      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b14:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b20:	d038      	beq.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2232      	movs	r2, #50	; 0x32
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0c9b      	lsrs	r3, r3, #18
 8002b44:	3301      	adds	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	e002      	b.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5c:	d102      	bne.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f2      	bne.n	8002b4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d110      	bne.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e00f      	b.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b82:	d007      	beq.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b8c:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	20000004 	.word	0x20000004
 8002bac:	431bde83 	.word	0x431bde83

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f000 bc02 	b.w	80033c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc4:	4b96      	ldr	r3, [pc, #600]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bce:	4b94      	ldr	r3, [pc, #592]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80e4 	beq.w	8002dae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4c>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	f040 808b 	bne.w	8002d0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f040 8087 	bne.w	8002d0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfc:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x64>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e3d9      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	4b81      	ldr	r3, [pc, #516]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_RCC_OscConfig+0x7e>
 8002c24:	4b7e      	ldr	r3, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2c:	e005      	b.n	8002c3a <HAL_RCC_OscConfig+0x8a>
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d223      	bcs.n	8002c86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fd8c 	bl	8003760 <RCC_SetFlashLatencyFromMSIRange>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e3ba      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	496d      	ldr	r1, [pc, #436]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c70:	4b6b      	ldr	r3, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	4968      	ldr	r1, [pc, #416]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e025      	b.n	8002cd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4960      	ldr	r1, [pc, #384]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca4:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	495b      	ldr	r1, [pc, #364]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fd4c 	bl	8003760 <RCC_SetFlashLatencyFromMSIRange>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e37a      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd2:	f000 fc81 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	4950      	ldr	r1, [pc, #320]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a4e      	ldr	r2, [pc, #312]	; (8002e28 <HAL_RCC_OscConfig+0x278>)
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe ff20 	bl	8001b3c <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d052      	beq.n	8002dac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	e35e      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d032      	beq.n	8002d78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d12:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe ff5d 	bl	8001bdc <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d26:	f7fe ff59 	bl	8001bdc <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e347      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d38:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a35      	ldr	r2, [pc, #212]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	f043 0308 	orr.w	r3, r3, #8
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4930      	ldr	r1, [pc, #192]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	492b      	ldr	r1, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
 8002d76:	e01a      	b.n	8002dae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d84:	f7fe ff2a 	bl	8001bdc <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8c:	f7fe ff26 	bl	8001bdc <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e314      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1dc>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d073      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_OscConfig+0x21c>
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d10e      	bne.n	8002de4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d063      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x2f0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d15f      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e2f1      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x24c>
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e025      	b.n	8002e48 <HAL_RCC_OscConfig+0x298>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e04:	d114      	bne.n	8002e30 <HAL_RCC_OscConfig+0x280>
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a02      	ldr	r2, [pc, #8]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e013      	b.n	8002e48 <HAL_RCC_OscConfig+0x298>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	08008144 	.word	0x08008144
 8002e28:	20000004 	.word	0x20000004
 8002e2c:	20000008 	.word	0x20000008
 8002e30:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a9f      	ldr	r2, [pc, #636]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b9d      	ldr	r3, [pc, #628]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a9c      	ldr	r2, [pc, #624]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fec4 	bl	8001bdc <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe fec0 	bl	8001bdc <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e2ae      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6a:	4b92      	ldr	r3, [pc, #584]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2a8>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe feb0 	bl	8001bdc <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e80:	f7fe feac 	bl	8001bdc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e29a      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2d0>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d060      	beq.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x310>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d119      	bne.n	8002eee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d116      	bne.n	8002eee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec0:	4b7c      	ldr	r3, [pc, #496]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x328>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e277      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed8:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	4973      	ldr	r1, [pc, #460]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	e040      	b.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d023      	beq.n	8002f3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef6:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6e      	ldr	r2, [pc, #440]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7fe fe6b 	bl	8001bdc <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fe67 	bl	8001bdc <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e255      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f1c:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	495f      	ldr	r1, [pc, #380]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	e018      	b.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5c      	ldr	r2, [pc, #368]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fe47 	bl	8001bdc <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe fe43 	bl	8001bdc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e231      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d03c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f84:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	4a4a      	ldr	r2, [pc, #296]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe fe22 	bl	8001bdc <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fe1e 	bl	8001bdc <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e20c      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCC_OscConfig+0x3ec>
 8002fbc:	e01b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7fe fe05 	bl	8001bdc <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7fe fe01 	bl	8001bdc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1ef      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ef      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80a6 	beq.w	8003150 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003008:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301e:	6593      	str	r3, [r2, #88]	; 0x58
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d118      	bne.n	800306e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003048:	f7fe fdc8 	bl	8001bdc <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7fe fdc4 	bl	8001bdc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1b2      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_RCC_OscConfig+0x4d8>
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003086:	e029      	b.n	80030dc <HAL_RCC_OscConfig+0x52c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d115      	bne.n	80030bc <HAL_RCC_OscConfig+0x50c>
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b0:	e014      	b.n	80030dc <HAL_RCC_OscConfig+0x52c>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
 80030bc:	4b9a      	ldr	r3, [pc, #616]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	4a99      	ldr	r2, [pc, #612]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030cc:	4b96      	ldr	r3, [pc, #600]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	4a95      	ldr	r2, [pc, #596]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d016      	beq.n	8003112 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe fd7a 	bl	8001bdc <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe fd76 	bl	8001bdc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e162      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003102:	4b89      	ldr	r3, [pc, #548]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ed      	beq.n	80030ec <HAL_RCC_OscConfig+0x53c>
 8003110:	e015      	b.n	800313e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fe fd63 	bl	8001bdc <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe fd5f 	bl	8001bdc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e14b      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003130:	4b7d      	ldr	r3, [pc, #500]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1ed      	bne.n	800311a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313e:	7ffb      	ldrb	r3, [r7, #31]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b78      	ldr	r3, [pc, #480]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	4a77      	ldr	r2, [pc, #476]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003164:	4b70      	ldr	r3, [pc, #448]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316a:	4a6f      	ldr	r2, [pc, #444]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fd32 	bl	8001bdc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800317c:	f7fe fd2e 	bl	8001bdc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e11c      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800318e:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <HAL_RCC_OscConfig+0x5cc>
 800319c:	e01b      	b.n	80031d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a4:	4a60      	ldr	r2, [pc, #384]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe fd15 	bl	8001bdc <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b6:	f7fe fd11 	bl	8001bdc <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0ff      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c8:	4b57      	ldr	r3, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80f3 	beq.w	80033c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	f040 80c9 	bne.w	800337c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031ea:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0203 	and.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d12c      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	3b01      	subs	r3, #1
 800320a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d123      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d11b      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d113      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	3b01      	subs	r3, #1
 800323e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d109      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d06b      	beq.n	8003330 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d062      	beq.n	8003324 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800325e:	4b32      	ldr	r3, [pc, #200]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0ac      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003278:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800327a:	f7fe fcaf 	bl	8001bdc <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fcab 	bl	8001bdc <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e099      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_RCC_OscConfig+0x77c>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ba:	0212      	lsls	r2, r2, #8
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0552      	lsls	r2, r2, #21
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0652      	lsls	r2, r2, #25
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032da:	06d2      	lsls	r2, r2, #27
 80032dc:	430a      	orrs	r2, r1
 80032de:	4912      	ldr	r1, [pc, #72]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032fc:	f7fe fc6e 	bl	8001bdc <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe fc6a 	bl	8001bdc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e058      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003322:	e050      	b.n	80033c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04f      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
 8003328:	40021000 	.word	0x40021000
 800332c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d144      	bne.n	80033c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 800334e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003352:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003354:	f7fe fc42 	bl	8001bdc <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe fc3e 	bl	8001bdc <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e02c      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x7ac>
 800337a:	e024      	b.n	80033c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d01f      	beq.n	80033c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800338c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fe fc25 	bl	8001bdc <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003396:	f7fe fc21 	bl	8001bdc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e00f      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f0      	bne.n	8003396 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	4905      	ldr	r1, [pc, #20]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x824>)
 80033bc:	4013      	ands	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
 80033c0:	e001      	b.n	80033c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	feeefffc 	.word	0xfeeefffc

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0e7      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4970      	ldr	r1, [pc, #448]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cf      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003434:	429a      	cmp	r2, r3
 8003436:	d908      	bls.n	800344a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4960      	ldr	r1, [pc, #384]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04c      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d121      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0a6      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4b54      	ldr	r3, [pc, #336]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d115      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e09a      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348e:	4b4e      	ldr	r3, [pc, #312]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e08e      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349e:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e086      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4943      	ldr	r1, [pc, #268]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fe fb8c 	bl	8001bdc <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fe fb88 	bl	8001bdc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e06e      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003508:	429a      	cmp	r2, r3
 800350a:	d208      	bcs.n	800351e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	492b      	ldr	r1, [pc, #172]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d210      	bcs.n	800354e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 0207 	bic.w	r2, r3, #7
 8003534:	4923      	ldr	r1, [pc, #140]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e036      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4918      	ldr	r1, [pc, #96]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4910      	ldr	r1, [pc, #64]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800358c:	f000 f824 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	490b      	ldr	r1, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1f4>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1f8>)
 80035aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1fc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fac3 	bl	8001b3c <HAL_InitTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08008144 	.word	0x08008144
 80035d0:	20000004 	.word	0x20000004
 80035d4:	20000008 	.word	0x20000008

080035d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x34>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d121      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d11e      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800360c:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003618:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e005      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003634:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d102      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e004      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d101      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800365c:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_RCC_GetSysClockFreq+0x114>)
 800365e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d134      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0xa6>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d003      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xac>
 800367c:	e005      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003680:	617b      	str	r3, [r7, #20]
      break;
 8003682:	e005      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003686:	617b      	str	r3, [r7, #20]
      break;
 8003688:	e002      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	617b      	str	r3, [r7, #20]
      break;
 800368e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	3301      	adds	r3, #1
 800369c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	0e5b      	lsrs	r3, r3, #25
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	3301      	adds	r3, #1
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036d0:	69bb      	ldr	r3, [r7, #24]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800815c 	.word	0x0800815c
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	007a1200 	.word	0x007a1200

080036f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800370c:	f7ff fff0 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	08008154 	.word	0x08008154

08003734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003738:	f7ff ffda 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0adb      	lsrs	r3, r3, #11
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4904      	ldr	r1, [pc, #16]	; (800375c <HAL_RCC_GetPCLK2Freq+0x28>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	08008154 	.word	0x08008154

08003760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003768:	2300      	movs	r3, #0
 800376a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003778:	f7ff f9b6 	bl	8002ae8 <HAL_PWREx_GetVoltageRange>
 800377c:	6178      	str	r0, [r7, #20]
 800377e:	e014      	b.n	80037aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378a:	6593      	str	r3, [r2, #88]	; 0x58
 800378c:	4b22      	ldr	r3, [pc, #136]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003798:	f7ff f9a6 	bl	8002ae8 <HAL_PWREx_GetVoltageRange>
 800379c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b0:	d10b      	bne.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d919      	bls.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2ba0      	cmp	r3, #160	; 0xa0
 80037bc:	d902      	bls.n	80037c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037be:	2302      	movs	r3, #2
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	e013      	b.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037c4:	2301      	movs	r3, #1
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	e010      	b.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d902      	bls.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037d0:	2303      	movs	r3, #3
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e00a      	b.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d102      	bne.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037dc:	2302      	movs	r3, #2
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e004      	b.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b70      	cmp	r3, #112	; 0x70
 80037e6:	d101      	bne.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e8:	2301      	movs	r3, #1
 80037ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 0207 	bic.w	r2, r3, #7
 80037f4:	4909      	ldr	r1, [pc, #36]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	429a      	cmp	r2, r3
 8003808:	d001      	beq.n	800380e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	40022000 	.word	0x40022000

08003820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003828:	2300      	movs	r3, #0
 800382a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800382c:	2300      	movs	r3, #0
 800382e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003838:	2b00      	cmp	r3, #0
 800383a:	d031      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003844:	d01a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800384a:	d814      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003850:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003854:	d10f      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003856:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4a5c      	ldr	r2, [pc, #368]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003862:	e00c      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f9de 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003874:	e003      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	74fb      	strb	r3, [r7, #19]
      break;
 800387a:	e000      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800387c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003884:	4b51      	ldr	r3, [pc, #324]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	494e      	ldr	r1, [pc, #312]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800389a:	e001      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 809e 	beq.w	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038b2:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00d      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b40      	ldr	r3, [pc, #256]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	4a3f      	ldr	r2, [pc, #252]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	; 0x58
 80038d4:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e0:	2301      	movs	r3, #1
 80038e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e4:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a39      	ldr	r2, [pc, #228]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f0:	f7fe f974 	bl	8001bdc <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038f6:	e009      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f8:	f7fe f970 	bl	8001bdc <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	74fb      	strb	r3, [r7, #19]
        break;
 800390a:	e005      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800390c:	4b30      	ldr	r3, [pc, #192]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d15a      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800391e:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003928:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01e      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	429a      	cmp	r2, r3
 8003938:	d019      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003944:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003946:	4b21      	ldr	r3, [pc, #132]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003956:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003966:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d016      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe f930 	bl	8001bdc <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397e:	e00b      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe f92c 	bl	8001bdc <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d902      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	74fb      	strb	r3, [r7, #19]
            break;
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ec      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ba:	4904      	ldr	r1, [pc, #16]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039c2:	e009      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	74bb      	strb	r3, [r7, #18]
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d8:	7c7b      	ldrb	r3, [r7, #17]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4b8a      	ldr	r3, [pc, #552]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	4a89      	ldr	r2, [pc, #548]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f6:	4b84      	ldr	r3, [pc, #528]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f023 0203 	bic.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4980      	ldr	r1, [pc, #512]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a18:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 020c 	bic.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	4978      	ldr	r1, [pc, #480]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a3a:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	496f      	ldr	r1, [pc, #444]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	4967      	ldr	r1, [pc, #412]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a7e:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	495e      	ldr	r1, [pc, #376]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4956      	ldr	r1, [pc, #344]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac2:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	494d      	ldr	r1, [pc, #308]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d028      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae4:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4945      	ldr	r1, [pc, #276]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
 8003b10:	e011      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f882 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	492d      	ldr	r1, [pc, #180]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b60:	d106      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b62:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b6c:	60d3      	str	r3, [r2, #12]
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f853 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bbe:	d10c      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f830 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	4904      	ldr	r1, [pc, #16]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000

08003c0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6013      	str	r3, [r2, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000

08003c2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c3a:	4b74      	ldr	r3, [pc, #464]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c46:	4b71      	ldr	r3, [pc, #452]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d10d      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
       ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c5e:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d047      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e044      	b.n	8003d02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d018      	beq.n	8003cb2 <RCCEx_PLLSAI1_Config+0x86>
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d825      	bhi.n	8003cd0 <RCCEx_PLLSAI1_Config+0xa4>
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d002      	beq.n	8003c8e <RCCEx_PLLSAI1_Config+0x62>
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d009      	beq.n	8003ca0 <RCCEx_PLLSAI1_Config+0x74>
 8003c8c:	e020      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11d      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9e:	e01a      	b.n	8003cd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca0:	4b5a      	ldr	r3, [pc, #360]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d116      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb0:	e013      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cb2:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cbe:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cce:	e006      	b.n	8003cde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd4:	e004      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cde:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10d      	bne.n	8003d02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	4943      	ldr	r1, [pc, #268]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d17c      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d08:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3f      	ldr	r2, [pc, #252]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fd ff62 	bl	8001bdc <HAL_GetTick>
 8003d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d1a:	e009      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d1c:	f7fd ff5e 	bl	8001bdc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d902      	bls.n	8003d30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d2e:	e005      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ef      	bne.n	8003d1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d15f      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d110      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d48:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6892      	ldr	r2, [r2, #8]
 8003d58:	0211      	lsls	r1, r2, #8
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	06d2      	lsls	r2, r2, #27
 8003d60:	430a      	orrs	r2, r1
 8003d62:	492a      	ldr	r1, [pc, #168]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	610b      	str	r3, [r1, #16]
 8003d68:	e027      	b.n	8003dba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d112      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d70:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	0211      	lsls	r1, r2, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6912      	ldr	r2, [r2, #16]
 8003d86:	0852      	lsrs	r2, r2, #1
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	0552      	lsls	r2, r2, #21
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	491f      	ldr	r1, [pc, #124]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	610b      	str	r3, [r1, #16]
 8003d94:	e011      	b.n	8003dba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6892      	ldr	r2, [r2, #8]
 8003da6:	0211      	lsls	r1, r2, #8
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6952      	ldr	r2, [r2, #20]
 8003dac:	0852      	lsrs	r2, r2, #1
 8003dae:	3a01      	subs	r2, #1
 8003db0:	0652      	lsls	r2, r2, #25
 8003db2:	430a      	orrs	r2, r1
 8003db4:	4915      	ldr	r1, [pc, #84]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fd ff09 	bl	8001bdc <HAL_GetTick>
 8003dca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dcc:	e009      	b.n	8003de2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dce:	f7fd ff05 	bl	8001bdc <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d902      	bls.n	8003de2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	73fb      	strb	r3, [r7, #15]
          break;
 8003de0:	e005      	b.n	8003dee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ef      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4903      	ldr	r1, [pc, #12]	; (8003e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e049      	b.n	8003eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd fd76 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 f97c 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d122      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d11b      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f06f 0202 	mvn.w	r2, #2
 8003eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f905 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003f06:	e005      	b.n	8003f14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8f7 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f908 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d122      	bne.n	8003f6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d11b      	bne.n	8003f6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0204 	mvn.w	r2, #4
 8003f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8db 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003f5a:	e005      	b.n	8003f68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f8cd 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8de 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d122      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d11b      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0208 	mvn.w	r2, #8
 8003f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2204      	movs	r2, #4
 8003f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8b1 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003fae:	e005      	b.n	8003fbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8a3 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8b4 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d122      	bne.n	8004016 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d11b      	bne.n	8004016 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0210 	mvn.w	r2, #16
 8003fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2208      	movs	r2, #8
 8003fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f887 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8004002:	e005      	b.n	8004010 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f879 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f88a 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d10e      	bne.n	8004042 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0201 	mvn.w	r2, #1
 800403a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7fd f95d 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b80      	cmp	r3, #128	; 0x80
 800404e:	d10e      	bne.n	800406e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d107      	bne.n	800406e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f943 	bl	80042f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f936 	bl	8004308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f838 	bl	8004138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0220 	mvn.w	r2, #32
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8f6 	bl	80042e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <TIM_Base_SetConfig+0xbc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x20>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a21      	ldr	r2, [pc, #132]	; (8004208 <TIM_Base_SetConfig+0xbc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0x52>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0x52>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1e      	ldr	r2, [pc, #120]	; (800420c <TIM_Base_SetConfig+0xc0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0x52>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <TIM_Base_SetConfig+0xc4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <TIM_Base_SetConfig+0xbc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0xa0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0b      	ldr	r2, [pc, #44]	; (800420c <TIM_Base_SetConfig+0xc0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0xa0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <TIM_Base_SetConfig+0xc4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d103      	bne.n	80041f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	615a      	str	r2, [r3, #20]
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400

08004214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e04f      	b.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800425c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004294:	d004      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a10      	ldr	r2, [pc, #64]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10c      	bne.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40014000 	.word	0x40014000

080042e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e040      	b.n	80043b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd fb48 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fb2e 	bl	80049bc <UART_SetConfig>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e022      	b.n	80043b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fd4e 	bl	8004e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fdd5 	bl	8004f58 <UART_CheckIdleState>
 80043ae:	4603      	mov	r3, r0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0ba      	sub	sp, #232	; 0xe8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80043e6:	4013      	ands	r3, r2
 80043e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80043ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d115      	bne.n	8004420 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00f      	beq.n	8004420 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 82a6 	beq.w	8004962 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
      }
      return;
 800441e:	e2a0      	b.n	8004962 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8117 	beq.w	8004658 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800442a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004436:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800443a:	4b85      	ldr	r3, [pc, #532]	; (8004650 <HAL_UART_IRQHandler+0x298>)
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 810a 	beq.w	8004658 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d011      	beq.n	8004474 <HAL_UART_IRQHandler+0xbc>
 8004450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446a:	f043 0201 	orr.w	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d011      	beq.n	80044a4 <HAL_UART_IRQHandler+0xec>
 8004480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2202      	movs	r2, #2
 8004492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449a:	f043 0204 	orr.w	r2, r3, #4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d011      	beq.n	80044d4 <HAL_UART_IRQHandler+0x11c>
 80044b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2204      	movs	r2, #4
 80044c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ca:	f043 0202 	orr.w	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d017      	beq.n	8004510 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2208      	movs	r2, #8
 80044fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004506:	f043 0208 	orr.w	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d012      	beq.n	8004542 <HAL_UART_IRQHandler+0x18a>
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00c      	beq.n	8004542 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 820c 	beq.w	8004966 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800455a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800457c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d005      	beq.n	800459a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800458e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004592:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04f      	beq.n	800463a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fde9 	bl	8005172 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d141      	bne.n	8004632 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1d9      	bne.n	80045ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d013      	beq.n	800462a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	4a13      	ldr	r2, [pc, #76]	; (8004654 <HAL_UART_IRQHandler+0x29c>)
 8004608:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	4618      	mov	r0, r3
 8004610:	f7fd fc63 	bl	8001eda <HAL_DMA_Abort_IT>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004624:	4610      	mov	r0, r2
 8004626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	e00f      	b.n	800464a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f9b0 	bl	8004990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004630:	e00b      	b.n	800464a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9ac 	bl	8004990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	e007      	b.n	800464a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f9a8 	bl	8004990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004648:	e18d      	b.n	8004966 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464a:	bf00      	nop
    return;
 800464c:	e18b      	b.n	8004966 <HAL_UART_IRQHandler+0x5ae>
 800464e:	bf00      	nop
 8004650:	04000120 	.word	0x04000120
 8004654:	08005239 	.word	0x08005239

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	2b01      	cmp	r3, #1
 800465e:	f040 8146 	bne.w	80048ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 813f 	beq.w	80048ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8138 	beq.w	80048ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	f040 80b4 	bne.w	80047fe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 815f 	beq.w	800496a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046b6:	429a      	cmp	r2, r3
 80046b8:	f080 8157 	bcs.w	800496a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 8085 	bne.w	80047e2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004706:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800470e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800471a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1da      	bne.n	80046d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004746:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800474a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800474e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e1      	bne.n	8004722 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800476e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004784:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e3      	bne.n	800475e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b2:	f023 0310 	bic.w	r3, r3, #16
 80047b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e4      	bne.n	80047a2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fd fb3e 	bl	8001e5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8d4 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047fc:	e0b5      	b.n	800496a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800480a:	b29b      	uxth	r3, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80a7 	beq.w	800496e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a2 	beq.w	800496e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800483e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800484c:	647b      	str	r3, [r7, #68]	; 0x44
 800484e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e4      	bne.n	800482a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	623b      	str	r3, [r7, #32]
   return(result);
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004884:	633a      	str	r2, [r7, #48]	; 0x30
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800488a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e3      	bne.n	8004860 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	617b      	str	r3, [r7, #20]
   return(result);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e4      	bne.n	80048aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f85c 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048ec:	e03f      	b.n	800496e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <HAL_UART_IRQHandler+0x560>
 80048fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800490e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fcd1 	bl	80052b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004916:	e02d      	b.n	8004974 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00e      	beq.n	8004942 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01c      	beq.n	8004972 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
    }
    return;
 8004940:	e017      	b.n	8004972 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d012      	beq.n	8004974 <HAL_UART_IRQHandler+0x5bc>
 800494e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00c      	beq.n	8004974 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fc82 	bl	8005264 <UART_EndTransmit_IT>
    return;
 8004960:	e008      	b.n	8004974 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004962:	bf00      	nop
 8004964:	e006      	b.n	8004974 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004966:	bf00      	nop
 8004968:	e004      	b.n	8004974 <HAL_UART_IRQHandler+0x5bc>
      return;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <HAL_UART_IRQHandler+0x5bc>
      return;
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004972:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004974:	37e8      	adds	r7, #232	; 0xe8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop

0800497c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c0:	b08a      	sub	sp, #40	; 0x28
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	431a      	orrs	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4bb4      	ldr	r3, [pc, #720]	; (8004cbc <UART_SetConfig+0x300>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4aa9      	ldr	r2, [pc, #676]	; (8004cc0 <UART_SetConfig+0x304>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a24:	4313      	orrs	r3, r2
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4aa0      	ldr	r2, [pc, #640]	; (8004cc4 <UART_SetConfig+0x308>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d126      	bne.n	8004a94 <UART_SetConfig+0xd8>
 8004a46:	4ba0      	ldr	r3, [pc, #640]	; (8004cc8 <UART_SetConfig+0x30c>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d81b      	bhi.n	8004a8c <UART_SetConfig+0xd0>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0xa0>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a6d 	.word	0x08004a6d
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a85 	.word	0x08004a85
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e080      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004a74:	2302      	movs	r3, #2
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e07c      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e078      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8a:	e074      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a92:	e070      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a8c      	ldr	r2, [pc, #560]	; (8004ccc <UART_SetConfig+0x310>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d138      	bne.n	8004b10 <UART_SetConfig+0x154>
 8004a9e:	4b8a      	ldr	r3, [pc, #552]	; (8004cc8 <UART_SetConfig+0x30c>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	d82d      	bhi.n	8004b08 <UART_SetConfig+0x14c>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0xf8>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004b09 	.word	0x08004b09
 8004abc:	08004b09 	.word	0x08004b09
 8004ac0:	08004b09 	.word	0x08004b09
 8004ac4:	08004af9 	.word	0x08004af9
 8004ac8:	08004b09 	.word	0x08004b09
 8004acc:	08004b09 	.word	0x08004b09
 8004ad0:	08004b09 	.word	0x08004b09
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	08004b09 	.word	0x08004b09
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aee:	e042      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004af0:	2302      	movs	r3, #2
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e03e      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004af8:	2304      	movs	r3, #4
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e03a      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b00:	2308      	movs	r3, #8
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e036      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e032      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6a      	ldr	r2, [pc, #424]	; (8004cc0 <UART_SetConfig+0x304>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d12a      	bne.n	8004b70 <UART_SetConfig+0x1b4>
 8004b1a:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <UART_SetConfig+0x30c>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b28:	d01a      	beq.n	8004b60 <UART_SetConfig+0x1a4>
 8004b2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b2e:	d81b      	bhi.n	8004b68 <UART_SetConfig+0x1ac>
 8004b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b34:	d00c      	beq.n	8004b50 <UART_SetConfig+0x194>
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	d815      	bhi.n	8004b68 <UART_SetConfig+0x1ac>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <UART_SetConfig+0x18c>
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d008      	beq.n	8004b58 <UART_SetConfig+0x19c>
 8004b46:	e00f      	b.n	8004b68 <UART_SetConfig+0x1ac>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e012      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b50:	2302      	movs	r3, #2
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e00e      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e00a      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b60:	2308      	movs	r3, #8
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e006      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e002      	b.n	8004b76 <UART_SetConfig+0x1ba>
 8004b70:	2310      	movs	r3, #16
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a51      	ldr	r2, [pc, #324]	; (8004cc0 <UART_SetConfig+0x304>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d17a      	bne.n	8004c76 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d824      	bhi.n	8004bd2 <UART_SetConfig+0x216>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x1d4>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bd3 	.word	0x08004bd3
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bd3 	.word	0x08004bd3
 8004ba0:	08004bc3 	.word	0x08004bc3
 8004ba4:	08004bd3 	.word	0x08004bd3
 8004ba8:	08004bd3 	.word	0x08004bd3
 8004bac:	08004bd3 	.word	0x08004bd3
 8004bb0:	08004bcb 	.word	0x08004bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7fe fda8 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	61f8      	str	r0, [r7, #28]
        break;
 8004bba:	e010      	b.n	8004bde <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bbc:	4b44      	ldr	r3, [pc, #272]	; (8004cd0 <UART_SetConfig+0x314>)
 8004bbe:	61fb      	str	r3, [r7, #28]
        break;
 8004bc0:	e00d      	b.n	8004bde <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc2:	f7fe fd09 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8004bc6:	61f8      	str	r0, [r7, #28]
        break;
 8004bc8:	e009      	b.n	8004bde <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bce:	61fb      	str	r3, [r7, #28]
        break;
 8004bd0:	e005      	b.n	8004bde <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8107 	beq.w	8004df4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	4413      	add	r3, r2
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d305      	bcc.n	8004c02 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d903      	bls.n	8004c0a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c08:	e0f4      	b.n	8004df4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	461c      	mov	r4, r3
 8004c10:	4615      	mov	r5, r2
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	022b      	lsls	r3, r5, #8
 8004c1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c20:	0222      	lsls	r2, r4, #8
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	6849      	ldr	r1, [r1, #4]
 8004c26:	0849      	lsrs	r1, r1, #1
 8004c28:	2000      	movs	r0, #0
 8004c2a:	4688      	mov	r8, r1
 8004c2c:	4681      	mov	r9, r0
 8004c2e:	eb12 0a08 	adds.w	sl, r2, r8
 8004c32:	eb43 0b09 	adc.w	fp, r3, r9
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c44:	4650      	mov	r0, sl
 8004c46:	4659      	mov	r1, fp
 8004c48:	f7fb fffe 	bl	8000c48 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4613      	mov	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5a:	d308      	bcc.n	8004c6e <UART_SetConfig+0x2b2>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c62:	d204      	bcs.n	8004c6e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	e0c2      	b.n	8004df4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c74:	e0be      	b.n	8004df4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7e:	d16a      	bne.n	8004d56 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d834      	bhi.n	8004cf2 <UART_SetConfig+0x336>
 8004c88:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x2d4>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cd5 	.word	0x08004cd5
 8004c98:	08004cdd 	.word	0x08004cdd
 8004c9c:	08004cf3 	.word	0x08004cf3
 8004ca0:	08004ce3 	.word	0x08004ce3
 8004ca4:	08004cf3 	.word	0x08004cf3
 8004ca8:	08004cf3 	.word	0x08004cf3
 8004cac:	08004cf3 	.word	0x08004cf3
 8004cb0:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7fe fd28 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8004cb8:	61f8      	str	r0, [r7, #28]
        break;
 8004cba:	e020      	b.n	8004cfe <UART_SetConfig+0x342>
 8004cbc:	efff69f3 	.word	0xefff69f3
 8004cc0:	40008000 	.word	0x40008000
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40004400 	.word	0x40004400
 8004cd0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7fe fd2e 	bl	8003734 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	61f8      	str	r0, [r7, #28]
        break;
 8004cda:	e010      	b.n	8004cfe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b4c      	ldr	r3, [pc, #304]	; (8004e10 <UART_SetConfig+0x454>)
 8004cde:	61fb      	str	r3, [r7, #28]
        break;
 8004ce0:	e00d      	b.n	8004cfe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe fc79 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8004ce6:	61f8      	str	r0, [r7, #28]
        break;
 8004ce8:	e009      	b.n	8004cfe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	61fb      	str	r3, [r7, #28]
        break;
 8004cf0:	e005      	b.n	8004cfe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d077      	beq.n	8004df4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	005a      	lsls	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	441a      	add	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b0f      	cmp	r3, #15
 8004d1e:	d916      	bls.n	8004d4e <UART_SetConfig+0x392>
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d26:	d212      	bcs.n	8004d4e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f023 030f 	bic.w	r3, r3, #15
 8004d30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	8afb      	ldrh	r3, [r7, #22]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	8afa      	ldrh	r2, [r7, #22]
 8004d4a:	60da      	str	r2, [r3, #12]
 8004d4c:	e052      	b.n	8004df4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d54:	e04e      	b.n	8004df4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d827      	bhi.n	8004dae <UART_SetConfig+0x3f2>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x3a8>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004daf 	.word	0x08004daf
 8004d74:	08004d9f 	.word	0x08004d9f
 8004d78:	08004daf 	.word	0x08004daf
 8004d7c:	08004daf 	.word	0x08004daf
 8004d80:	08004daf 	.word	0x08004daf
 8004d84:	08004da7 	.word	0x08004da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe fcbe 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
        break;
 8004d8e:	e014      	b.n	8004dba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d90:	f7fe fcd0 	bl	8003734 <HAL_RCC_GetPCLK2Freq>
 8004d94:	61f8      	str	r0, [r7, #28]
        break;
 8004d96:	e010      	b.n	8004dba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <UART_SetConfig+0x454>)
 8004d9a:	61fb      	str	r3, [r7, #28]
        break;
 8004d9c:	e00d      	b.n	8004dba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9e:	f7fe fc1b 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8004da2:	61f8      	str	r0, [r7, #28]
        break;
 8004da4:	e009      	b.n	8004dba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	61fb      	str	r3, [r7, #28]
        break;
 8004dac:	e005      	b.n	8004dba <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004db8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d019      	beq.n	8004df4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	085a      	lsrs	r2, r3, #1
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d909      	bls.n	8004dee <UART_SetConfig+0x432>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d205      	bcs.n	8004dee <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e002      	b.n	8004df4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3728      	adds	r7, #40	; 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0e:	bf00      	nop
 8004e10:	00f42400 	.word	0x00f42400

08004e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f12:	d10a      	bne.n	8004f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f68:	f7fc fe38 	bl	8001bdc <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d10e      	bne.n	8004f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f82d 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e023      	b.n	8004fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d10e      	bne.n	8004fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f817 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00d      	b.n	8004fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b09c      	sub	sp, #112	; 0x70
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffa:	e0a5      	b.n	8005148 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	f000 80a1 	beq.w	8005148 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fc fde9 	bl	8001bdc <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <UART_WaitOnFlagUntilTimeout+0x32>
 8005016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005018:	2b00      	cmp	r3, #0
 800501a:	d13e      	bne.n	800509a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800502a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005030:	667b      	str	r3, [r7, #100]	; 0x64
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800503c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e6      	bne.n	800501c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	663b      	str	r3, [r7, #96]	; 0x60
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800506e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800507c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e5      	bne.n	800504e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e067      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d04f      	beq.n	8005148 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b6:	d147      	bne.n	8005148 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
 80050e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	613b      	str	r3, [r7, #16]
   return(result);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	66bb      	str	r3, [r7, #104]	; 0x68
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005114:	623a      	str	r2, [r7, #32]
 8005116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	61bb      	str	r3, [r7, #24]
   return(result);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e010      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4013      	ands	r3, r2
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	429a      	cmp	r2, r3
 8005164:	f43f af4a 	beq.w	8004ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3770      	adds	r7, #112	; 0x70
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005172:	b480      	push	{r7}
 8005174:	b095      	sub	sp, #84	; 0x54
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005198:	643b      	str	r3, [r7, #64]	; 0x40
 800519a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800519e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e6      	bne.n	800517a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e5      	bne.n	80051ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d118      	bne.n	800521a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6979      	ldr	r1, [r7, #20]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	613b      	str	r3, [r7, #16]
   return(result);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e6      	bne.n	80051e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800522c:	bf00      	nop
 800522e:	3754      	adds	r7, #84	; 0x54
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff fb9a 	bl	8004990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	60bb      	str	r3, [r7, #8]
   return(result);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6979      	ldr	r1, [r7, #20]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	613b      	str	r3, [r7, #16]
   return(result);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e6      	bne.n	800526c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fb66 	bl	800497c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b0:	bf00      	nop
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4d0d      	ldr	r5, [pc, #52]	; (8005310 <__libc_init_array+0x38>)
 80052dc:	4c0d      	ldr	r4, [pc, #52]	; (8005314 <__libc_init_array+0x3c>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	2600      	movs	r6, #0
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	4d0b      	ldr	r5, [pc, #44]	; (8005318 <__libc_init_array+0x40>)
 80052ea:	4c0c      	ldr	r4, [pc, #48]	; (800531c <__libc_init_array+0x44>)
 80052ec:	f002 ff04 	bl	80080f8 <_init>
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	2600      	movs	r6, #0
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	0800856c 	.word	0x0800856c
 8005314:	0800856c 	.word	0x0800856c
 8005318:	0800856c 	.word	0x0800856c
 800531c:	08008570 	.word	0x08008570

08005320 <memset>:
 8005320:	4402      	add	r2, r0
 8005322:	4603      	mov	r3, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	d100      	bne.n	800532a <memset+0xa>
 8005328:	4770      	bx	lr
 800532a:	f803 1b01 	strb.w	r1, [r3], #1
 800532e:	e7f9      	b.n	8005324 <memset+0x4>

08005330 <__cvt>:
 8005330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	ec55 4b10 	vmov	r4, r5, d0
 8005338:	2d00      	cmp	r5, #0
 800533a:	460e      	mov	r6, r1
 800533c:	4619      	mov	r1, r3
 800533e:	462b      	mov	r3, r5
 8005340:	bfbb      	ittet	lt
 8005342:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005346:	461d      	movlt	r5, r3
 8005348:	2300      	movge	r3, #0
 800534a:	232d      	movlt	r3, #45	; 0x2d
 800534c:	700b      	strb	r3, [r1, #0]
 800534e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005350:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005354:	4691      	mov	r9, r2
 8005356:	f023 0820 	bic.w	r8, r3, #32
 800535a:	bfbc      	itt	lt
 800535c:	4622      	movlt	r2, r4
 800535e:	4614      	movlt	r4, r2
 8005360:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005364:	d005      	beq.n	8005372 <__cvt+0x42>
 8005366:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800536a:	d100      	bne.n	800536e <__cvt+0x3e>
 800536c:	3601      	adds	r6, #1
 800536e:	2102      	movs	r1, #2
 8005370:	e000      	b.n	8005374 <__cvt+0x44>
 8005372:	2103      	movs	r1, #3
 8005374:	ab03      	add	r3, sp, #12
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	ab02      	add	r3, sp, #8
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	ec45 4b10 	vmov	d0, r4, r5
 8005380:	4653      	mov	r3, sl
 8005382:	4632      	mov	r2, r6
 8005384:	f000 fcec 	bl	8005d60 <_dtoa_r>
 8005388:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800538c:	4607      	mov	r7, r0
 800538e:	d102      	bne.n	8005396 <__cvt+0x66>
 8005390:	f019 0f01 	tst.w	r9, #1
 8005394:	d022      	beq.n	80053dc <__cvt+0xac>
 8005396:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800539a:	eb07 0906 	add.w	r9, r7, r6
 800539e:	d110      	bne.n	80053c2 <__cvt+0x92>
 80053a0:	783b      	ldrb	r3, [r7, #0]
 80053a2:	2b30      	cmp	r3, #48	; 0x30
 80053a4:	d10a      	bne.n	80053bc <__cvt+0x8c>
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fb fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80053b2:	b918      	cbnz	r0, 80053bc <__cvt+0x8c>
 80053b4:	f1c6 0601 	rsb	r6, r6, #1
 80053b8:	f8ca 6000 	str.w	r6, [sl]
 80053bc:	f8da 3000 	ldr.w	r3, [sl]
 80053c0:	4499      	add	r9, r3
 80053c2:	2200      	movs	r2, #0
 80053c4:	2300      	movs	r3, #0
 80053c6:	4620      	mov	r0, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	f7fb fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80053ce:	b108      	cbz	r0, 80053d4 <__cvt+0xa4>
 80053d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80053d4:	2230      	movs	r2, #48	; 0x30
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	454b      	cmp	r3, r9
 80053da:	d307      	bcc.n	80053ec <__cvt+0xbc>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053e0:	1bdb      	subs	r3, r3, r7
 80053e2:	4638      	mov	r0, r7
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	b004      	add	sp, #16
 80053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ec:	1c59      	adds	r1, r3, #1
 80053ee:	9103      	str	r1, [sp, #12]
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e7f0      	b.n	80053d6 <__cvt+0xa6>

080053f4 <__exponent>:
 80053f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f6:	4603      	mov	r3, r0
 80053f8:	2900      	cmp	r1, #0
 80053fa:	bfb8      	it	lt
 80053fc:	4249      	neglt	r1, r1
 80053fe:	f803 2b02 	strb.w	r2, [r3], #2
 8005402:	bfb4      	ite	lt
 8005404:	222d      	movlt	r2, #45	; 0x2d
 8005406:	222b      	movge	r2, #43	; 0x2b
 8005408:	2909      	cmp	r1, #9
 800540a:	7042      	strb	r2, [r0, #1]
 800540c:	dd2a      	ble.n	8005464 <__exponent+0x70>
 800540e:	f10d 0407 	add.w	r4, sp, #7
 8005412:	46a4      	mov	ip, r4
 8005414:	270a      	movs	r7, #10
 8005416:	46a6      	mov	lr, r4
 8005418:	460a      	mov	r2, r1
 800541a:	fb91 f6f7 	sdiv	r6, r1, r7
 800541e:	fb07 1516 	mls	r5, r7, r6, r1
 8005422:	3530      	adds	r5, #48	; 0x30
 8005424:	2a63      	cmp	r2, #99	; 0x63
 8005426:	f104 34ff 	add.w	r4, r4, #4294967295
 800542a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800542e:	4631      	mov	r1, r6
 8005430:	dcf1      	bgt.n	8005416 <__exponent+0x22>
 8005432:	3130      	adds	r1, #48	; 0x30
 8005434:	f1ae 0502 	sub.w	r5, lr, #2
 8005438:	f804 1c01 	strb.w	r1, [r4, #-1]
 800543c:	1c44      	adds	r4, r0, #1
 800543e:	4629      	mov	r1, r5
 8005440:	4561      	cmp	r1, ip
 8005442:	d30a      	bcc.n	800545a <__exponent+0x66>
 8005444:	f10d 0209 	add.w	r2, sp, #9
 8005448:	eba2 020e 	sub.w	r2, r2, lr
 800544c:	4565      	cmp	r5, ip
 800544e:	bf88      	it	hi
 8005450:	2200      	movhi	r2, #0
 8005452:	4413      	add	r3, r2
 8005454:	1a18      	subs	r0, r3, r0
 8005456:	b003      	add	sp, #12
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005462:	e7ed      	b.n	8005440 <__exponent+0x4c>
 8005464:	2330      	movs	r3, #48	; 0x30
 8005466:	3130      	adds	r1, #48	; 0x30
 8005468:	7083      	strb	r3, [r0, #2]
 800546a:	70c1      	strb	r1, [r0, #3]
 800546c:	1d03      	adds	r3, r0, #4
 800546e:	e7f1      	b.n	8005454 <__exponent+0x60>

08005470 <_printf_float>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	ed2d 8b02 	vpush	{d8}
 8005478:	b08d      	sub	sp, #52	; 0x34
 800547a:	460c      	mov	r4, r1
 800547c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005480:	4616      	mov	r6, r2
 8005482:	461f      	mov	r7, r3
 8005484:	4605      	mov	r5, r0
 8005486:	f001 fa59 	bl	800693c <_localeconv_r>
 800548a:	f8d0 a000 	ldr.w	sl, [r0]
 800548e:	4650      	mov	r0, sl
 8005490:	f7fa fe9e 	bl	80001d0 <strlen>
 8005494:	2300      	movs	r3, #0
 8005496:	930a      	str	r3, [sp, #40]	; 0x28
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	9305      	str	r3, [sp, #20]
 800549c:	f8d8 3000 	ldr.w	r3, [r8]
 80054a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80054a4:	3307      	adds	r3, #7
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	f103 0208 	add.w	r2, r3, #8
 80054ae:	f8c8 2000 	str.w	r2, [r8]
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80054be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054c2:	9307      	str	r3, [sp, #28]
 80054c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80054c8:	ee08 0a10 	vmov	s16, r0
 80054cc:	4b9f      	ldr	r3, [pc, #636]	; (800574c <_printf_float+0x2dc>)
 80054ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	f7fb fb29 	bl	8000b2c <__aeabi_dcmpun>
 80054da:	bb88      	cbnz	r0, 8005540 <_printf_float+0xd0>
 80054dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054e0:	4b9a      	ldr	r3, [pc, #616]	; (800574c <_printf_float+0x2dc>)
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295
 80054e6:	f7fb fb03 	bl	8000af0 <__aeabi_dcmple>
 80054ea:	bb48      	cbnz	r0, 8005540 <_printf_float+0xd0>
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fb faf2 	bl	8000adc <__aeabi_dcmplt>
 80054f8:	b110      	cbz	r0, 8005500 <_printf_float+0x90>
 80054fa:	232d      	movs	r3, #45	; 0x2d
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005500:	4b93      	ldr	r3, [pc, #588]	; (8005750 <_printf_float+0x2e0>)
 8005502:	4894      	ldr	r0, [pc, #592]	; (8005754 <_printf_float+0x2e4>)
 8005504:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005508:	bf94      	ite	ls
 800550a:	4698      	movls	r8, r3
 800550c:	4680      	movhi	r8, r0
 800550e:	2303      	movs	r3, #3
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	f023 0204 	bic.w	r2, r3, #4
 8005518:	6022      	str	r2, [r4, #0]
 800551a:	f04f 0900 	mov.w	r9, #0
 800551e:	9700      	str	r7, [sp, #0]
 8005520:	4633      	mov	r3, r6
 8005522:	aa0b      	add	r2, sp, #44	; 0x2c
 8005524:	4621      	mov	r1, r4
 8005526:	4628      	mov	r0, r5
 8005528:	f000 f9d8 	bl	80058dc <_printf_common>
 800552c:	3001      	adds	r0, #1
 800552e:	f040 8090 	bne.w	8005652 <_printf_float+0x1e2>
 8005532:	f04f 30ff 	mov.w	r0, #4294967295
 8005536:	b00d      	add	sp, #52	; 0x34
 8005538:	ecbd 8b02 	vpop	{d8}
 800553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	4640      	mov	r0, r8
 8005546:	4649      	mov	r1, r9
 8005548:	f7fb faf0 	bl	8000b2c <__aeabi_dcmpun>
 800554c:	b140      	cbz	r0, 8005560 <_printf_float+0xf0>
 800554e:	464b      	mov	r3, r9
 8005550:	2b00      	cmp	r3, #0
 8005552:	bfbc      	itt	lt
 8005554:	232d      	movlt	r3, #45	; 0x2d
 8005556:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800555a:	487f      	ldr	r0, [pc, #508]	; (8005758 <_printf_float+0x2e8>)
 800555c:	4b7f      	ldr	r3, [pc, #508]	; (800575c <_printf_float+0x2ec>)
 800555e:	e7d1      	b.n	8005504 <_printf_float+0x94>
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005566:	9206      	str	r2, [sp, #24]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	d13f      	bne.n	80055ec <_printf_float+0x17c>
 800556c:	2306      	movs	r3, #6
 800556e:	6063      	str	r3, [r4, #4]
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	6861      	ldr	r1, [r4, #4]
 8005574:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005578:	2300      	movs	r3, #0
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	ab0a      	add	r3, sp, #40	; 0x28
 800557e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005582:	ab09      	add	r3, sp, #36	; 0x24
 8005584:	ec49 8b10 	vmov	d0, r8, r9
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	6022      	str	r2, [r4, #0]
 800558c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005590:	4628      	mov	r0, r5
 8005592:	f7ff fecd 	bl	8005330 <__cvt>
 8005596:	9b06      	ldr	r3, [sp, #24]
 8005598:	9909      	ldr	r1, [sp, #36]	; 0x24
 800559a:	2b47      	cmp	r3, #71	; 0x47
 800559c:	4680      	mov	r8, r0
 800559e:	d108      	bne.n	80055b2 <_printf_float+0x142>
 80055a0:	1cc8      	adds	r0, r1, #3
 80055a2:	db02      	blt.n	80055aa <_printf_float+0x13a>
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	4299      	cmp	r1, r3
 80055a8:	dd41      	ble.n	800562e <_printf_float+0x1be>
 80055aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80055ae:	fa5f fb8b 	uxtb.w	fp, fp
 80055b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055b6:	d820      	bhi.n	80055fa <_printf_float+0x18a>
 80055b8:	3901      	subs	r1, #1
 80055ba:	465a      	mov	r2, fp
 80055bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055c0:	9109      	str	r1, [sp, #36]	; 0x24
 80055c2:	f7ff ff17 	bl	80053f4 <__exponent>
 80055c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055c8:	1813      	adds	r3, r2, r0
 80055ca:	2a01      	cmp	r2, #1
 80055cc:	4681      	mov	r9, r0
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	dc02      	bgt.n	80055d8 <_printf_float+0x168>
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	07d2      	lsls	r2, r2, #31
 80055d6:	d501      	bpl.n	80055dc <_printf_float+0x16c>
 80055d8:	3301      	adds	r3, #1
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d09c      	beq.n	800551e <_printf_float+0xae>
 80055e4:	232d      	movs	r3, #45	; 0x2d
 80055e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ea:	e798      	b.n	800551e <_printf_float+0xae>
 80055ec:	9a06      	ldr	r2, [sp, #24]
 80055ee:	2a47      	cmp	r2, #71	; 0x47
 80055f0:	d1be      	bne.n	8005570 <_printf_float+0x100>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1bc      	bne.n	8005570 <_printf_float+0x100>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e7b9      	b.n	800556e <_printf_float+0xfe>
 80055fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055fe:	d118      	bne.n	8005632 <_printf_float+0x1c2>
 8005600:	2900      	cmp	r1, #0
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	dd0b      	ble.n	800561e <_printf_float+0x1ae>
 8005606:	6121      	str	r1, [r4, #16]
 8005608:	b913      	cbnz	r3, 8005610 <_printf_float+0x1a0>
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	07d0      	lsls	r0, r2, #31
 800560e:	d502      	bpl.n	8005616 <_printf_float+0x1a6>
 8005610:	3301      	adds	r3, #1
 8005612:	440b      	add	r3, r1
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	65a1      	str	r1, [r4, #88]	; 0x58
 8005618:	f04f 0900 	mov.w	r9, #0
 800561c:	e7de      	b.n	80055dc <_printf_float+0x16c>
 800561e:	b913      	cbnz	r3, 8005626 <_printf_float+0x1b6>
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	07d2      	lsls	r2, r2, #31
 8005624:	d501      	bpl.n	800562a <_printf_float+0x1ba>
 8005626:	3302      	adds	r3, #2
 8005628:	e7f4      	b.n	8005614 <_printf_float+0x1a4>
 800562a:	2301      	movs	r3, #1
 800562c:	e7f2      	b.n	8005614 <_printf_float+0x1a4>
 800562e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005634:	4299      	cmp	r1, r3
 8005636:	db05      	blt.n	8005644 <_printf_float+0x1d4>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6121      	str	r1, [r4, #16]
 800563c:	07d8      	lsls	r0, r3, #31
 800563e:	d5ea      	bpl.n	8005616 <_printf_float+0x1a6>
 8005640:	1c4b      	adds	r3, r1, #1
 8005642:	e7e7      	b.n	8005614 <_printf_float+0x1a4>
 8005644:	2900      	cmp	r1, #0
 8005646:	bfd4      	ite	le
 8005648:	f1c1 0202 	rsble	r2, r1, #2
 800564c:	2201      	movgt	r2, #1
 800564e:	4413      	add	r3, r2
 8005650:	e7e0      	b.n	8005614 <_printf_float+0x1a4>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	055a      	lsls	r2, r3, #21
 8005656:	d407      	bmi.n	8005668 <_printf_float+0x1f8>
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	4642      	mov	r2, r8
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	d12c      	bne.n	80056c0 <_printf_float+0x250>
 8005666:	e764      	b.n	8005532 <_printf_float+0xc2>
 8005668:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800566c:	f240 80e0 	bls.w	8005830 <_printf_float+0x3c0>
 8005670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	f7fb fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800567c:	2800      	cmp	r0, #0
 800567e:	d034      	beq.n	80056ea <_printf_float+0x27a>
 8005680:	4a37      	ldr	r2, [pc, #220]	; (8005760 <_printf_float+0x2f0>)
 8005682:	2301      	movs	r3, #1
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f af51 	beq.w	8005532 <_printf_float+0xc2>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	429a      	cmp	r2, r3
 8005696:	db02      	blt.n	800569e <_printf_float+0x22e>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	07d8      	lsls	r0, r3, #31
 800569c:	d510      	bpl.n	80056c0 <_printf_float+0x250>
 800569e:	ee18 3a10 	vmov	r3, s16
 80056a2:	4652      	mov	r2, sl
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f af41 	beq.w	8005532 <_printf_float+0xc2>
 80056b0:	f04f 0800 	mov.w	r8, #0
 80056b4:	f104 091a 	add.w	r9, r4, #26
 80056b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4543      	cmp	r3, r8
 80056be:	dc09      	bgt.n	80056d4 <_printf_float+0x264>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	079b      	lsls	r3, r3, #30
 80056c4:	f100 8105 	bmi.w	80058d2 <_printf_float+0x462>
 80056c8:	68e0      	ldr	r0, [r4, #12]
 80056ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056cc:	4298      	cmp	r0, r3
 80056ce:	bfb8      	it	lt
 80056d0:	4618      	movlt	r0, r3
 80056d2:	e730      	b.n	8005536 <_printf_float+0xc6>
 80056d4:	2301      	movs	r3, #1
 80056d6:	464a      	mov	r2, r9
 80056d8:	4631      	mov	r1, r6
 80056da:	4628      	mov	r0, r5
 80056dc:	47b8      	blx	r7
 80056de:	3001      	adds	r0, #1
 80056e0:	f43f af27 	beq.w	8005532 <_printf_float+0xc2>
 80056e4:	f108 0801 	add.w	r8, r8, #1
 80056e8:	e7e6      	b.n	80056b8 <_printf_float+0x248>
 80056ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dc39      	bgt.n	8005764 <_printf_float+0x2f4>
 80056f0:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <_printf_float+0x2f0>)
 80056f2:	2301      	movs	r3, #1
 80056f4:	4631      	mov	r1, r6
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f af19 	beq.w	8005532 <_printf_float+0xc2>
 8005700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005704:	4313      	orrs	r3, r2
 8005706:	d102      	bne.n	800570e <_printf_float+0x29e>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	07d9      	lsls	r1, r3, #31
 800570c:	d5d8      	bpl.n	80056c0 <_printf_float+0x250>
 800570e:	ee18 3a10 	vmov	r3, s16
 8005712:	4652      	mov	r2, sl
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	f43f af09 	beq.w	8005532 <_printf_float+0xc2>
 8005720:	f04f 0900 	mov.w	r9, #0
 8005724:	f104 0a1a 	add.w	sl, r4, #26
 8005728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572a:	425b      	negs	r3, r3
 800572c:	454b      	cmp	r3, r9
 800572e:	dc01      	bgt.n	8005734 <_printf_float+0x2c4>
 8005730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005732:	e792      	b.n	800565a <_printf_float+0x1ea>
 8005734:	2301      	movs	r3, #1
 8005736:	4652      	mov	r2, sl
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f aef7 	beq.w	8005532 <_printf_float+0xc2>
 8005744:	f109 0901 	add.w	r9, r9, #1
 8005748:	e7ee      	b.n	8005728 <_printf_float+0x2b8>
 800574a:	bf00      	nop
 800574c:	7fefffff 	.word	0x7fefffff
 8005750:	08008190 	.word	0x08008190
 8005754:	08008194 	.word	0x08008194
 8005758:	0800819c 	.word	0x0800819c
 800575c:	08008198 	.word	0x08008198
 8005760:	080081a0 	.word	0x080081a0
 8005764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005768:	429a      	cmp	r2, r3
 800576a:	bfa8      	it	ge
 800576c:	461a      	movge	r2, r3
 800576e:	2a00      	cmp	r2, #0
 8005770:	4691      	mov	r9, r2
 8005772:	dc37      	bgt.n	80057e4 <_printf_float+0x374>
 8005774:	f04f 0b00 	mov.w	fp, #0
 8005778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800577c:	f104 021a 	add.w	r2, r4, #26
 8005780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	eba3 0309 	sub.w	r3, r3, r9
 8005788:	455b      	cmp	r3, fp
 800578a:	dc33      	bgt.n	80057f4 <_printf_float+0x384>
 800578c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005790:	429a      	cmp	r2, r3
 8005792:	db3b      	blt.n	800580c <_printf_float+0x39c>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	07da      	lsls	r2, r3, #31
 8005798:	d438      	bmi.n	800580c <_printf_float+0x39c>
 800579a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579c:	9a05      	ldr	r2, [sp, #20]
 800579e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057a0:	1a9a      	subs	r2, r3, r2
 80057a2:	eba3 0901 	sub.w	r9, r3, r1
 80057a6:	4591      	cmp	r9, r2
 80057a8:	bfa8      	it	ge
 80057aa:	4691      	movge	r9, r2
 80057ac:	f1b9 0f00 	cmp.w	r9, #0
 80057b0:	dc35      	bgt.n	800581e <_printf_float+0x3ae>
 80057b2:	f04f 0800 	mov.w	r8, #0
 80057b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ba:	f104 0a1a 	add.w	sl, r4, #26
 80057be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	eba3 0309 	sub.w	r3, r3, r9
 80057c8:	4543      	cmp	r3, r8
 80057ca:	f77f af79 	ble.w	80056c0 <_printf_float+0x250>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4652      	mov	r2, sl
 80057d2:	4631      	mov	r1, r6
 80057d4:	4628      	mov	r0, r5
 80057d6:	47b8      	blx	r7
 80057d8:	3001      	adds	r0, #1
 80057da:	f43f aeaa 	beq.w	8005532 <_printf_float+0xc2>
 80057de:	f108 0801 	add.w	r8, r8, #1
 80057e2:	e7ec      	b.n	80057be <_printf_float+0x34e>
 80057e4:	4613      	mov	r3, r2
 80057e6:	4631      	mov	r1, r6
 80057e8:	4642      	mov	r2, r8
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	d1c0      	bne.n	8005774 <_printf_float+0x304>
 80057f2:	e69e      	b.n	8005532 <_printf_float+0xc2>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	9205      	str	r2, [sp, #20]
 80057fc:	47b8      	blx	r7
 80057fe:	3001      	adds	r0, #1
 8005800:	f43f ae97 	beq.w	8005532 <_printf_float+0xc2>
 8005804:	9a05      	ldr	r2, [sp, #20]
 8005806:	f10b 0b01 	add.w	fp, fp, #1
 800580a:	e7b9      	b.n	8005780 <_printf_float+0x310>
 800580c:	ee18 3a10 	vmov	r3, s16
 8005810:	4652      	mov	r2, sl
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	d1be      	bne.n	800579a <_printf_float+0x32a>
 800581c:	e689      	b.n	8005532 <_printf_float+0xc2>
 800581e:	9a05      	ldr	r2, [sp, #20]
 8005820:	464b      	mov	r3, r9
 8005822:	4442      	add	r2, r8
 8005824:	4631      	mov	r1, r6
 8005826:	4628      	mov	r0, r5
 8005828:	47b8      	blx	r7
 800582a:	3001      	adds	r0, #1
 800582c:	d1c1      	bne.n	80057b2 <_printf_float+0x342>
 800582e:	e680      	b.n	8005532 <_printf_float+0xc2>
 8005830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005832:	2a01      	cmp	r2, #1
 8005834:	dc01      	bgt.n	800583a <_printf_float+0x3ca>
 8005836:	07db      	lsls	r3, r3, #31
 8005838:	d538      	bpl.n	80058ac <_printf_float+0x43c>
 800583a:	2301      	movs	r3, #1
 800583c:	4642      	mov	r2, r8
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f ae74 	beq.w	8005532 <_printf_float+0xc2>
 800584a:	ee18 3a10 	vmov	r3, s16
 800584e:	4652      	mov	r2, sl
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f ae6b 	beq.w	8005532 <_printf_float+0xc2>
 800585c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005860:	2200      	movs	r2, #0
 8005862:	2300      	movs	r3, #0
 8005864:	f7fb f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8005868:	b9d8      	cbnz	r0, 80058a2 <_printf_float+0x432>
 800586a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586c:	f108 0201 	add.w	r2, r8, #1
 8005870:	3b01      	subs	r3, #1
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	d10e      	bne.n	800589a <_printf_float+0x42a>
 800587c:	e659      	b.n	8005532 <_printf_float+0xc2>
 800587e:	2301      	movs	r3, #1
 8005880:	4652      	mov	r2, sl
 8005882:	4631      	mov	r1, r6
 8005884:	4628      	mov	r0, r5
 8005886:	47b8      	blx	r7
 8005888:	3001      	adds	r0, #1
 800588a:	f43f ae52 	beq.w	8005532 <_printf_float+0xc2>
 800588e:	f108 0801 	add.w	r8, r8, #1
 8005892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005894:	3b01      	subs	r3, #1
 8005896:	4543      	cmp	r3, r8
 8005898:	dcf1      	bgt.n	800587e <_printf_float+0x40e>
 800589a:	464b      	mov	r3, r9
 800589c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058a0:	e6dc      	b.n	800565c <_printf_float+0x1ec>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	f104 0a1a 	add.w	sl, r4, #26
 80058aa:	e7f2      	b.n	8005892 <_printf_float+0x422>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4642      	mov	r2, r8
 80058b0:	e7df      	b.n	8005872 <_printf_float+0x402>
 80058b2:	2301      	movs	r3, #1
 80058b4:	464a      	mov	r2, r9
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f ae38 	beq.w	8005532 <_printf_float+0xc2>
 80058c2:	f108 0801 	add.w	r8, r8, #1
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	4543      	cmp	r3, r8
 80058ce:	dcf0      	bgt.n	80058b2 <_printf_float+0x442>
 80058d0:	e6fa      	b.n	80056c8 <_printf_float+0x258>
 80058d2:	f04f 0800 	mov.w	r8, #0
 80058d6:	f104 0919 	add.w	r9, r4, #25
 80058da:	e7f4      	b.n	80058c6 <_printf_float+0x456>

080058dc <_printf_common>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	4616      	mov	r6, r2
 80058e2:	4699      	mov	r9, r3
 80058e4:	688a      	ldr	r2, [r1, #8]
 80058e6:	690b      	ldr	r3, [r1, #16]
 80058e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfb8      	it	lt
 80058f0:	4613      	movlt	r3, r2
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058f8:	4607      	mov	r7, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b10a      	cbz	r2, 8005902 <_printf_common+0x26>
 80058fe:	3301      	adds	r3, #1
 8005900:	6033      	str	r3, [r6, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	0699      	lsls	r1, r3, #26
 8005906:	bf42      	ittt	mi
 8005908:	6833      	ldrmi	r3, [r6, #0]
 800590a:	3302      	addmi	r3, #2
 800590c:	6033      	strmi	r3, [r6, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	f015 0506 	ands.w	r5, r5, #6
 8005914:	d106      	bne.n	8005924 <_printf_common+0x48>
 8005916:	f104 0a19 	add.w	sl, r4, #25
 800591a:	68e3      	ldr	r3, [r4, #12]
 800591c:	6832      	ldr	r2, [r6, #0]
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	42ab      	cmp	r3, r5
 8005922:	dc26      	bgt.n	8005972 <_printf_common+0x96>
 8005924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005928:	1e13      	subs	r3, r2, #0
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	bf18      	it	ne
 800592e:	2301      	movne	r3, #1
 8005930:	0692      	lsls	r2, r2, #26
 8005932:	d42b      	bmi.n	800598c <_printf_common+0xb0>
 8005934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005938:	4649      	mov	r1, r9
 800593a:	4638      	mov	r0, r7
 800593c:	47c0      	blx	r8
 800593e:	3001      	adds	r0, #1
 8005940:	d01e      	beq.n	8005980 <_printf_common+0xa4>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	68e5      	ldr	r5, [r4, #12]
 8005946:	6832      	ldr	r2, [r6, #0]
 8005948:	f003 0306 	and.w	r3, r3, #6
 800594c:	2b04      	cmp	r3, #4
 800594e:	bf08      	it	eq
 8005950:	1aad      	subeq	r5, r5, r2
 8005952:	68a3      	ldr	r3, [r4, #8]
 8005954:	6922      	ldr	r2, [r4, #16]
 8005956:	bf0c      	ite	eq
 8005958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800595c:	2500      	movne	r5, #0
 800595e:	4293      	cmp	r3, r2
 8005960:	bfc4      	itt	gt
 8005962:	1a9b      	subgt	r3, r3, r2
 8005964:	18ed      	addgt	r5, r5, r3
 8005966:	2600      	movs	r6, #0
 8005968:	341a      	adds	r4, #26
 800596a:	42b5      	cmp	r5, r6
 800596c:	d11a      	bne.n	80059a4 <_printf_common+0xc8>
 800596e:	2000      	movs	r0, #0
 8005970:	e008      	b.n	8005984 <_printf_common+0xa8>
 8005972:	2301      	movs	r3, #1
 8005974:	4652      	mov	r2, sl
 8005976:	4649      	mov	r1, r9
 8005978:	4638      	mov	r0, r7
 800597a:	47c0      	blx	r8
 800597c:	3001      	adds	r0, #1
 800597e:	d103      	bne.n	8005988 <_printf_common+0xac>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	3501      	adds	r5, #1
 800598a:	e7c6      	b.n	800591a <_printf_common+0x3e>
 800598c:	18e1      	adds	r1, r4, r3
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	2030      	movs	r0, #48	; 0x30
 8005992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005996:	4422      	add	r2, r4
 8005998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800599c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059a0:	3302      	adds	r3, #2
 80059a2:	e7c7      	b.n	8005934 <_printf_common+0x58>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4622      	mov	r2, r4
 80059a8:	4649      	mov	r1, r9
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	3001      	adds	r0, #1
 80059b0:	d0e6      	beq.n	8005980 <_printf_common+0xa4>
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7d9      	b.n	800596a <_printf_common+0x8e>
	...

080059b8 <_printf_i>:
 80059b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	7e0f      	ldrb	r7, [r1, #24]
 80059be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059c0:	2f78      	cmp	r7, #120	; 0x78
 80059c2:	4691      	mov	r9, r2
 80059c4:	4680      	mov	r8, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	469a      	mov	sl, r3
 80059ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ce:	d807      	bhi.n	80059e0 <_printf_i+0x28>
 80059d0:	2f62      	cmp	r7, #98	; 0x62
 80059d2:	d80a      	bhi.n	80059ea <_printf_i+0x32>
 80059d4:	2f00      	cmp	r7, #0
 80059d6:	f000 80d8 	beq.w	8005b8a <_printf_i+0x1d2>
 80059da:	2f58      	cmp	r7, #88	; 0x58
 80059dc:	f000 80a3 	beq.w	8005b26 <_printf_i+0x16e>
 80059e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059e8:	e03a      	b.n	8005a60 <_printf_i+0xa8>
 80059ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ee:	2b15      	cmp	r3, #21
 80059f0:	d8f6      	bhi.n	80059e0 <_printf_i+0x28>
 80059f2:	a101      	add	r1, pc, #4	; (adr r1, 80059f8 <_printf_i+0x40>)
 80059f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059f8:	08005a51 	.word	0x08005a51
 80059fc:	08005a65 	.word	0x08005a65
 8005a00:	080059e1 	.word	0x080059e1
 8005a04:	080059e1 	.word	0x080059e1
 8005a08:	080059e1 	.word	0x080059e1
 8005a0c:	080059e1 	.word	0x080059e1
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	080059e1 	.word	0x080059e1
 8005a18:	080059e1 	.word	0x080059e1
 8005a1c:	080059e1 	.word	0x080059e1
 8005a20:	080059e1 	.word	0x080059e1
 8005a24:	08005b71 	.word	0x08005b71
 8005a28:	08005a95 	.word	0x08005a95
 8005a2c:	08005b53 	.word	0x08005b53
 8005a30:	080059e1 	.word	0x080059e1
 8005a34:	080059e1 	.word	0x080059e1
 8005a38:	08005b93 	.word	0x08005b93
 8005a3c:	080059e1 	.word	0x080059e1
 8005a40:	08005a95 	.word	0x08005a95
 8005a44:	080059e1 	.word	0x080059e1
 8005a48:	080059e1 	.word	0x080059e1
 8005a4c:	08005b5b 	.word	0x08005b5b
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	1d1a      	adds	r2, r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	602a      	str	r2, [r5, #0]
 8005a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0a3      	b.n	8005bac <_printf_i+0x1f4>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	6829      	ldr	r1, [r5, #0]
 8005a68:	0606      	lsls	r6, r0, #24
 8005a6a:	f101 0304 	add.w	r3, r1, #4
 8005a6e:	d50a      	bpl.n	8005a86 <_printf_i+0xce>
 8005a70:	680e      	ldr	r6, [r1, #0]
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	da03      	bge.n	8005a80 <_printf_i+0xc8>
 8005a78:	232d      	movs	r3, #45	; 0x2d
 8005a7a:	4276      	negs	r6, r6
 8005a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a80:	485e      	ldr	r0, [pc, #376]	; (8005bfc <_printf_i+0x244>)
 8005a82:	230a      	movs	r3, #10
 8005a84:	e019      	b.n	8005aba <_printf_i+0x102>
 8005a86:	680e      	ldr	r6, [r1, #0]
 8005a88:	602b      	str	r3, [r5, #0]
 8005a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a8e:	bf18      	it	ne
 8005a90:	b236      	sxthne	r6, r6
 8005a92:	e7ef      	b.n	8005a74 <_printf_i+0xbc>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	6029      	str	r1, [r5, #0]
 8005a9c:	0601      	lsls	r1, r0, #24
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_i+0xec>
 8005aa0:	681e      	ldr	r6, [r3, #0]
 8005aa2:	e002      	b.n	8005aaa <_printf_i+0xf2>
 8005aa4:	0646      	lsls	r6, r0, #25
 8005aa6:	d5fb      	bpl.n	8005aa0 <_printf_i+0xe8>
 8005aa8:	881e      	ldrh	r6, [r3, #0]
 8005aaa:	4854      	ldr	r0, [pc, #336]	; (8005bfc <_printf_i+0x244>)
 8005aac:	2f6f      	cmp	r7, #111	; 0x6f
 8005aae:	bf0c      	ite	eq
 8005ab0:	2308      	moveq	r3, #8
 8005ab2:	230a      	movne	r3, #10
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aba:	6865      	ldr	r5, [r4, #4]
 8005abc:	60a5      	str	r5, [r4, #8]
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	bfa2      	ittt	ge
 8005ac2:	6821      	ldrge	r1, [r4, #0]
 8005ac4:	f021 0104 	bicge.w	r1, r1, #4
 8005ac8:	6021      	strge	r1, [r4, #0]
 8005aca:	b90e      	cbnz	r6, 8005ad0 <_printf_i+0x118>
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	d04d      	beq.n	8005b6c <_printf_i+0x1b4>
 8005ad0:	4615      	mov	r5, r2
 8005ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8005ada:	5dc7      	ldrb	r7, [r0, r7]
 8005adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ae0:	4637      	mov	r7, r6
 8005ae2:	42bb      	cmp	r3, r7
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	d9f4      	bls.n	8005ad2 <_printf_i+0x11a>
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d10b      	bne.n	8005b04 <_printf_i+0x14c>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	07de      	lsls	r6, r3, #31
 8005af0:	d508      	bpl.n	8005b04 <_printf_i+0x14c>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	6861      	ldr	r1, [r4, #4]
 8005af6:	4299      	cmp	r1, r3
 8005af8:	bfde      	ittt	le
 8005afa:	2330      	movle	r3, #48	; 0x30
 8005afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b04:	1b52      	subs	r2, r2, r5
 8005b06:	6122      	str	r2, [r4, #16]
 8005b08:	f8cd a000 	str.w	sl, [sp]
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	aa03      	add	r2, sp, #12
 8005b10:	4621      	mov	r1, r4
 8005b12:	4640      	mov	r0, r8
 8005b14:	f7ff fee2 	bl	80058dc <_printf_common>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d14c      	bne.n	8005bb6 <_printf_i+0x1fe>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	b004      	add	sp, #16
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b26:	4835      	ldr	r0, [pc, #212]	; (8005bfc <_printf_i+0x244>)
 8005b28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b2c:	6829      	ldr	r1, [r5, #0]
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b34:	6029      	str	r1, [r5, #0]
 8005b36:	061d      	lsls	r5, r3, #24
 8005b38:	d514      	bpl.n	8005b64 <_printf_i+0x1ac>
 8005b3a:	07df      	lsls	r7, r3, #31
 8005b3c:	bf44      	itt	mi
 8005b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b42:	6023      	strmi	r3, [r4, #0]
 8005b44:	b91e      	cbnz	r6, 8005b4e <_printf_i+0x196>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	f023 0320 	bic.w	r3, r3, #32
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	2310      	movs	r3, #16
 8005b50:	e7b0      	b.n	8005ab4 <_printf_i+0xfc>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	f043 0320 	orr.w	r3, r3, #32
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	2378      	movs	r3, #120	; 0x78
 8005b5c:	4828      	ldr	r0, [pc, #160]	; (8005c00 <_printf_i+0x248>)
 8005b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b62:	e7e3      	b.n	8005b2c <_printf_i+0x174>
 8005b64:	0659      	lsls	r1, r3, #25
 8005b66:	bf48      	it	mi
 8005b68:	b2b6      	uxthmi	r6, r6
 8005b6a:	e7e6      	b.n	8005b3a <_printf_i+0x182>
 8005b6c:	4615      	mov	r5, r2
 8005b6e:	e7bb      	b.n	8005ae8 <_printf_i+0x130>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	6826      	ldr	r6, [r4, #0]
 8005b74:	6961      	ldr	r1, [r4, #20]
 8005b76:	1d18      	adds	r0, r3, #4
 8005b78:	6028      	str	r0, [r5, #0]
 8005b7a:	0635      	lsls	r5, r6, #24
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0x1cc>
 8005b80:	6019      	str	r1, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <_printf_i+0x1d2>
 8005b84:	0670      	lsls	r0, r6, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0x1c8>
 8005b88:	8019      	strh	r1, [r3, #0]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	4615      	mov	r5, r2
 8005b90:	e7ba      	b.n	8005b08 <_printf_i+0x150>
 8005b92:	682b      	ldr	r3, [r5, #0]
 8005b94:	1d1a      	adds	r2, r3, #4
 8005b96:	602a      	str	r2, [r5, #0]
 8005b98:	681d      	ldr	r5, [r3, #0]
 8005b9a:	6862      	ldr	r2, [r4, #4]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f7fa fb1e 	bl	80001e0 <memchr>
 8005ba4:	b108      	cbz	r0, 8005baa <_printf_i+0x1f2>
 8005ba6:	1b40      	subs	r0, r0, r5
 8005ba8:	6060      	str	r0, [r4, #4]
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	6123      	str	r3, [r4, #16]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bb4:	e7a8      	b.n	8005b08 <_printf_i+0x150>
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	462a      	mov	r2, r5
 8005bba:	4649      	mov	r1, r9
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	47d0      	blx	sl
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d0ab      	beq.n	8005b1c <_printf_i+0x164>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	079b      	lsls	r3, r3, #30
 8005bc8:	d413      	bmi.n	8005bf2 <_printf_i+0x23a>
 8005bca:	68e0      	ldr	r0, [r4, #12]
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	4298      	cmp	r0, r3
 8005bd0:	bfb8      	it	lt
 8005bd2:	4618      	movlt	r0, r3
 8005bd4:	e7a4      	b.n	8005b20 <_printf_i+0x168>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4632      	mov	r2, r6
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4640      	mov	r0, r8
 8005bde:	47d0      	blx	sl
 8005be0:	3001      	adds	r0, #1
 8005be2:	d09b      	beq.n	8005b1c <_printf_i+0x164>
 8005be4:	3501      	adds	r5, #1
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	9903      	ldr	r1, [sp, #12]
 8005bea:	1a5b      	subs	r3, r3, r1
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	dcf2      	bgt.n	8005bd6 <_printf_i+0x21e>
 8005bf0:	e7eb      	b.n	8005bca <_printf_i+0x212>
 8005bf2:	2500      	movs	r5, #0
 8005bf4:	f104 0619 	add.w	r6, r4, #25
 8005bf8:	e7f5      	b.n	8005be6 <_printf_i+0x22e>
 8005bfa:	bf00      	nop
 8005bfc:	080081a2 	.word	0x080081a2
 8005c00:	080081b3 	.word	0x080081b3

08005c04 <siprintf>:
 8005c04:	b40e      	push	{r1, r2, r3}
 8005c06:	b500      	push	{lr}
 8005c08:	b09c      	sub	sp, #112	; 0x70
 8005c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c0c:	9002      	str	r0, [sp, #8]
 8005c0e:	9006      	str	r0, [sp, #24]
 8005c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c14:	4809      	ldr	r0, [pc, #36]	; (8005c3c <siprintf+0x38>)
 8005c16:	9107      	str	r1, [sp, #28]
 8005c18:	9104      	str	r1, [sp, #16]
 8005c1a:	4909      	ldr	r1, [pc, #36]	; (8005c40 <siprintf+0x3c>)
 8005c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c20:	9105      	str	r1, [sp, #20]
 8005c22:	6800      	ldr	r0, [r0, #0]
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	a902      	add	r1, sp, #8
 8005c28:	f001 fb78 	bl	800731c <_svfiprintf_r>
 8005c2c:	9b02      	ldr	r3, [sp, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	b01c      	add	sp, #112	; 0x70
 8005c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c38:	b003      	add	sp, #12
 8005c3a:	4770      	bx	lr
 8005c3c:	20000010 	.word	0x20000010
 8005c40:	ffff0208 	.word	0xffff0208

08005c44 <quorem>:
 8005c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	6903      	ldr	r3, [r0, #16]
 8005c4a:	690c      	ldr	r4, [r1, #16]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	4607      	mov	r7, r0
 8005c50:	f2c0 8081 	blt.w	8005d56 <quorem+0x112>
 8005c54:	3c01      	subs	r4, #1
 8005c56:	f101 0814 	add.w	r8, r1, #20
 8005c5a:	f100 0514 	add.w	r5, r0, #20
 8005c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c78:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c7c:	d331      	bcc.n	8005ce2 <quorem+0x9e>
 8005c7e:	f04f 0e00 	mov.w	lr, #0
 8005c82:	4640      	mov	r0, r8
 8005c84:	46ac      	mov	ip, r5
 8005c86:	46f2      	mov	sl, lr
 8005c88:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c8c:	b293      	uxth	r3, r2
 8005c8e:	fb06 e303 	mla	r3, r6, r3, lr
 8005c92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	ebaa 0303 	sub.w	r3, sl, r3
 8005c9c:	f8dc a000 	ldr.w	sl, [ip]
 8005ca0:	0c12      	lsrs	r2, r2, #16
 8005ca2:	fa13 f38a 	uxtah	r3, r3, sl
 8005ca6:	fb06 e202 	mla	r2, r6, r2, lr
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	9b00      	ldr	r3, [sp, #0]
 8005cae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005cc0:	4581      	cmp	r9, r0
 8005cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cc6:	f84c 3b04 	str.w	r3, [ip], #4
 8005cca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cce:	d2db      	bcs.n	8005c88 <quorem+0x44>
 8005cd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005cd4:	b92b      	cbnz	r3, 8005ce2 <quorem+0x9e>
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	3b04      	subs	r3, #4
 8005cda:	429d      	cmp	r5, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	d32e      	bcc.n	8005d3e <quorem+0xfa>
 8005ce0:	613c      	str	r4, [r7, #16]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f001 f8c6 	bl	8006e74 <__mcmp>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	db24      	blt.n	8005d36 <quorem+0xf2>
 8005cec:	3601      	adds	r6, #1
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f04f 0c00 	mov.w	ip, #0
 8005cf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cf8:	f8d0 e000 	ldr.w	lr, [r0]
 8005cfc:	b293      	uxth	r3, r2
 8005cfe:	ebac 0303 	sub.w	r3, ip, r3
 8005d02:	0c12      	lsrs	r2, r2, #16
 8005d04:	fa13 f38e 	uxtah	r3, r3, lr
 8005d08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d16:	45c1      	cmp	r9, r8
 8005d18:	f840 3b04 	str.w	r3, [r0], #4
 8005d1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d20:	d2e8      	bcs.n	8005cf4 <quorem+0xb0>
 8005d22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d2a:	b922      	cbnz	r2, 8005d36 <quorem+0xf2>
 8005d2c:	3b04      	subs	r3, #4
 8005d2e:	429d      	cmp	r5, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	d30a      	bcc.n	8005d4a <quorem+0x106>
 8005d34:	613c      	str	r4, [r7, #16]
 8005d36:	4630      	mov	r0, r6
 8005d38:	b003      	add	sp, #12
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	3b04      	subs	r3, #4
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	d1cc      	bne.n	8005ce0 <quorem+0x9c>
 8005d46:	3c01      	subs	r4, #1
 8005d48:	e7c7      	b.n	8005cda <quorem+0x96>
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	d1f0      	bne.n	8005d34 <quorem+0xf0>
 8005d52:	3c01      	subs	r4, #1
 8005d54:	e7eb      	b.n	8005d2e <quorem+0xea>
 8005d56:	2000      	movs	r0, #0
 8005d58:	e7ee      	b.n	8005d38 <quorem+0xf4>
 8005d5a:	0000      	movs	r0, r0
 8005d5c:	0000      	movs	r0, r0
	...

08005d60 <_dtoa_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	ed2d 8b04 	vpush	{d8-d9}
 8005d68:	ec57 6b10 	vmov	r6, r7, d0
 8005d6c:	b093      	sub	sp, #76	; 0x4c
 8005d6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d74:	9106      	str	r1, [sp, #24]
 8005d76:	ee10 aa10 	vmov	sl, s0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8005d80:	46bb      	mov	fp, r7
 8005d82:	b975      	cbnz	r5, 8005da2 <_dtoa_r+0x42>
 8005d84:	2010      	movs	r0, #16
 8005d86:	f000 fddd 	bl	8006944 <malloc>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d8e:	b920      	cbnz	r0, 8005d9a <_dtoa_r+0x3a>
 8005d90:	4ba7      	ldr	r3, [pc, #668]	; (8006030 <_dtoa_r+0x2d0>)
 8005d92:	21ea      	movs	r1, #234	; 0xea
 8005d94:	48a7      	ldr	r0, [pc, #668]	; (8006034 <_dtoa_r+0x2d4>)
 8005d96:	f001 fbd1 	bl	800753c <__assert_func>
 8005d9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d9e:	6005      	str	r5, [r0, #0]
 8005da0:	60c5      	str	r5, [r0, #12]
 8005da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	b151      	cbz	r1, 8005dbe <_dtoa_r+0x5e>
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	604a      	str	r2, [r1, #4]
 8005dac:	2301      	movs	r3, #1
 8005dae:	4093      	lsls	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 fe1c 	bl	80069f0 <_Bfree>
 8005db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	1e3b      	subs	r3, r7, #0
 8005dc0:	bfaa      	itet	ge
 8005dc2:	2300      	movge	r3, #0
 8005dc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005dc8:	f8c8 3000 	strge.w	r3, [r8]
 8005dcc:	4b9a      	ldr	r3, [pc, #616]	; (8006038 <_dtoa_r+0x2d8>)
 8005dce:	bfbc      	itt	lt
 8005dd0:	2201      	movlt	r2, #1
 8005dd2:	f8c8 2000 	strlt.w	r2, [r8]
 8005dd6:	ea33 030b 	bics.w	r3, r3, fp
 8005dda:	d11b      	bne.n	8005e14 <_dtoa_r+0xb4>
 8005ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dde:	f242 730f 	movw	r3, #9999	; 0x270f
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005de8:	4333      	orrs	r3, r6
 8005dea:	f000 8592 	beq.w	8006912 <_dtoa_r+0xbb2>
 8005dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df0:	b963      	cbnz	r3, 8005e0c <_dtoa_r+0xac>
 8005df2:	4b92      	ldr	r3, [pc, #584]	; (800603c <_dtoa_r+0x2dc>)
 8005df4:	e022      	b.n	8005e3c <_dtoa_r+0xdc>
 8005df6:	4b92      	ldr	r3, [pc, #584]	; (8006040 <_dtoa_r+0x2e0>)
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	9801      	ldr	r0, [sp, #4]
 8005e02:	b013      	add	sp, #76	; 0x4c
 8005e04:	ecbd 8b04 	vpop	{d8-d9}
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0c:	4b8b      	ldr	r3, [pc, #556]	; (800603c <_dtoa_r+0x2dc>)
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	3303      	adds	r3, #3
 8005e12:	e7f3      	b.n	8005dfc <_dtoa_r+0x9c>
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	4650      	mov	r0, sl
 8005e1a:	4659      	mov	r1, fp
 8005e1c:	f7fa fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e20:	ec4b ab19 	vmov	d9, sl, fp
 8005e24:	4680      	mov	r8, r0
 8005e26:	b158      	cbz	r0, 8005e40 <_dtoa_r+0xe0>
 8005e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 856b 	beq.w	800690c <_dtoa_r+0xbac>
 8005e36:	4883      	ldr	r0, [pc, #524]	; (8006044 <_dtoa_r+0x2e4>)
 8005e38:	6018      	str	r0, [r3, #0]
 8005e3a:	1e43      	subs	r3, r0, #1
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	e7df      	b.n	8005e00 <_dtoa_r+0xa0>
 8005e40:	ec4b ab10 	vmov	d0, sl, fp
 8005e44:	aa10      	add	r2, sp, #64	; 0x40
 8005e46:	a911      	add	r1, sp, #68	; 0x44
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f001 f8b9 	bl	8006fc0 <__d2b>
 8005e4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e52:	ee08 0a10 	vmov	s16, r0
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	f000 8084 	beq.w	8005f64 <_dtoa_r+0x204>
 8005e5c:	ee19 3a90 	vmov	r3, s19
 8005e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e68:	4656      	mov	r6, sl
 8005e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005e76:	4b74      	ldr	r3, [pc, #464]	; (8006048 <_dtoa_r+0x2e8>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	f7fa fa03 	bl	8000288 <__aeabi_dsub>
 8005e82:	a365      	add	r3, pc, #404	; (adr r3, 8006018 <_dtoa_r+0x2b8>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa fbb6 	bl	80005f8 <__aeabi_dmul>
 8005e8c:	a364      	add	r3, pc, #400	; (adr r3, 8006020 <_dtoa_r+0x2c0>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	f7fa f9fb 	bl	800028c <__adddf3>
 8005e96:	4606      	mov	r6, r0
 8005e98:	4628      	mov	r0, r5
 8005e9a:	460f      	mov	r7, r1
 8005e9c:	f7fa fb42 	bl	8000524 <__aeabi_i2d>
 8005ea0:	a361      	add	r3, pc, #388	; (adr r3, 8006028 <_dtoa_r+0x2c8>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa fba7 	bl	80005f8 <__aeabi_dmul>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4630      	mov	r0, r6
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	f7fa f9eb 	bl	800028c <__adddf3>
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	f7fa fe4d 	bl	8000b58 <__aeabi_d2iz>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	9000      	str	r0, [sp, #0]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	f7fa fe08 	bl	8000adc <__aeabi_dcmplt>
 8005ecc:	b150      	cbz	r0, 8005ee4 <_dtoa_r+0x184>
 8005ece:	9800      	ldr	r0, [sp, #0]
 8005ed0:	f7fa fb28 	bl	8000524 <__aeabi_i2d>
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	f7fa fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005edc:	b910      	cbnz	r0, 8005ee4 <_dtoa_r+0x184>
 8005ede:	9b00      	ldr	r3, [sp, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	2b16      	cmp	r3, #22
 8005ee8:	d85a      	bhi.n	8005fa0 <_dtoa_r+0x240>
 8005eea:	9a00      	ldr	r2, [sp, #0]
 8005eec:	4b57      	ldr	r3, [pc, #348]	; (800604c <_dtoa_r+0x2ec>)
 8005eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	ec51 0b19 	vmov	r0, r1, d9
 8005efa:	f7fa fdef 	bl	8000adc <__aeabi_dcmplt>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d050      	beq.n	8005fa4 <_dtoa_r+0x244>
 8005f02:	9b00      	ldr	r3, [sp, #0]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f0e:	1b5d      	subs	r5, r3, r5
 8005f10:	1e6b      	subs	r3, r5, #1
 8005f12:	9305      	str	r3, [sp, #20]
 8005f14:	bf45      	ittet	mi
 8005f16:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f1a:	9304      	strmi	r3, [sp, #16]
 8005f1c:	2300      	movpl	r3, #0
 8005f1e:	2300      	movmi	r3, #0
 8005f20:	bf4c      	ite	mi
 8005f22:	9305      	strmi	r3, [sp, #20]
 8005f24:	9304      	strpl	r3, [sp, #16]
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	db3d      	blt.n	8005fa8 <_dtoa_r+0x248>
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	9a00      	ldr	r2, [sp, #0]
 8005f30:	920a      	str	r2, [sp, #40]	; 0x28
 8005f32:	4413      	add	r3, r2
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	2300      	movs	r3, #0
 8005f38:	9307      	str	r3, [sp, #28]
 8005f3a:	9b06      	ldr	r3, [sp, #24]
 8005f3c:	2b09      	cmp	r3, #9
 8005f3e:	f200 8089 	bhi.w	8006054 <_dtoa_r+0x2f4>
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	bfc4      	itt	gt
 8005f46:	3b04      	subgt	r3, #4
 8005f48:	9306      	strgt	r3, [sp, #24]
 8005f4a:	9b06      	ldr	r3, [sp, #24]
 8005f4c:	f1a3 0302 	sub.w	r3, r3, #2
 8005f50:	bfcc      	ite	gt
 8005f52:	2500      	movgt	r5, #0
 8005f54:	2501      	movle	r5, #1
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	f200 8087 	bhi.w	800606a <_dtoa_r+0x30a>
 8005f5c:	e8df f003 	tbb	[pc, r3]
 8005f60:	59383a2d 	.word	0x59383a2d
 8005f64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f68:	441d      	add	r5, r3
 8005f6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	bfc1      	itttt	gt
 8005f72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f82:	bfda      	itte	le
 8005f84:	f1c3 0320 	rsble	r3, r3, #32
 8005f88:	fa06 f003 	lslle.w	r0, r6, r3
 8005f8c:	4318      	orrgt	r0, r3
 8005f8e:	f7fa fab9 	bl	8000504 <__aeabi_ui2d>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4606      	mov	r6, r0
 8005f96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f9a:	3d01      	subs	r5, #1
 8005f9c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f9e:	e76a      	b.n	8005e76 <_dtoa_r+0x116>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e7b2      	b.n	8005f0a <_dtoa_r+0x1aa>
 8005fa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fa6:	e7b1      	b.n	8005f0c <_dtoa_r+0x1ac>
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	9a00      	ldr	r2, [sp, #0]
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	4253      	negs	r3, r2
 8005fb2:	9307      	str	r3, [sp, #28]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb8:	e7bf      	b.n	8005f3a <_dtoa_r+0x1da>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9308      	str	r3, [sp, #32]
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dc55      	bgt.n	8006070 <_dtoa_r+0x310>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fce:	e00c      	b.n	8005fea <_dtoa_r+0x28a>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e7f3      	b.n	8005fbc <_dtoa_r+0x25c>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd8:	9308      	str	r3, [sp, #32]
 8005fda:	9b00      	ldr	r3, [sp, #0]
 8005fdc:	4413      	add	r3, r2
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	9303      	str	r3, [sp, #12]
 8005fe6:	bfb8      	it	lt
 8005fe8:	2301      	movlt	r3, #1
 8005fea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fec:	2200      	movs	r2, #0
 8005fee:	6042      	str	r2, [r0, #4]
 8005ff0:	2204      	movs	r2, #4
 8005ff2:	f102 0614 	add.w	r6, r2, #20
 8005ff6:	429e      	cmp	r6, r3
 8005ff8:	6841      	ldr	r1, [r0, #4]
 8005ffa:	d93d      	bls.n	8006078 <_dtoa_r+0x318>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 fcb7 	bl	8006970 <_Balloc>
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	2800      	cmp	r0, #0
 8006006:	d13b      	bne.n	8006080 <_dtoa_r+0x320>
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <_dtoa_r+0x2f0>)
 800600a:	4602      	mov	r2, r0
 800600c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006010:	e6c0      	b.n	8005d94 <_dtoa_r+0x34>
 8006012:	2301      	movs	r3, #1
 8006014:	e7df      	b.n	8005fd6 <_dtoa_r+0x276>
 8006016:	bf00      	nop
 8006018:	636f4361 	.word	0x636f4361
 800601c:	3fd287a7 	.word	0x3fd287a7
 8006020:	8b60c8b3 	.word	0x8b60c8b3
 8006024:	3fc68a28 	.word	0x3fc68a28
 8006028:	509f79fb 	.word	0x509f79fb
 800602c:	3fd34413 	.word	0x3fd34413
 8006030:	080081d1 	.word	0x080081d1
 8006034:	080081e8 	.word	0x080081e8
 8006038:	7ff00000 	.word	0x7ff00000
 800603c:	080081cd 	.word	0x080081cd
 8006040:	080081c4 	.word	0x080081c4
 8006044:	080081a1 	.word	0x080081a1
 8006048:	3ff80000 	.word	0x3ff80000
 800604c:	080082d8 	.word	0x080082d8
 8006050:	08008243 	.word	0x08008243
 8006054:	2501      	movs	r5, #1
 8006056:	2300      	movs	r3, #0
 8006058:	9306      	str	r3, [sp, #24]
 800605a:	9508      	str	r5, [sp, #32]
 800605c:	f04f 33ff 	mov.w	r3, #4294967295
 8006060:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006064:	2200      	movs	r2, #0
 8006066:	2312      	movs	r3, #18
 8006068:	e7b0      	b.n	8005fcc <_dtoa_r+0x26c>
 800606a:	2301      	movs	r3, #1
 800606c:	9308      	str	r3, [sp, #32]
 800606e:	e7f5      	b.n	800605c <_dtoa_r+0x2fc>
 8006070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006072:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006076:	e7b8      	b.n	8005fea <_dtoa_r+0x28a>
 8006078:	3101      	adds	r1, #1
 800607a:	6041      	str	r1, [r0, #4]
 800607c:	0052      	lsls	r2, r2, #1
 800607e:	e7b8      	b.n	8005ff2 <_dtoa_r+0x292>
 8006080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006082:	9a01      	ldr	r2, [sp, #4]
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	2b0e      	cmp	r3, #14
 800608a:	f200 809d 	bhi.w	80061c8 <_dtoa_r+0x468>
 800608e:	2d00      	cmp	r5, #0
 8006090:	f000 809a 	beq.w	80061c8 <_dtoa_r+0x468>
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dd32      	ble.n	8006100 <_dtoa_r+0x3a0>
 800609a:	4ab7      	ldr	r2, [pc, #732]	; (8006378 <_dtoa_r+0x618>)
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060a8:	9b00      	ldr	r3, [sp, #0]
 80060aa:	05d8      	lsls	r0, r3, #23
 80060ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80060b0:	d516      	bpl.n	80060e0 <_dtoa_r+0x380>
 80060b2:	4bb2      	ldr	r3, [pc, #712]	; (800637c <_dtoa_r+0x61c>)
 80060b4:	ec51 0b19 	vmov	r0, r1, d9
 80060b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060bc:	f7fa fbc6 	bl	800084c <__aeabi_ddiv>
 80060c0:	f007 070f 	and.w	r7, r7, #15
 80060c4:	4682      	mov	sl, r0
 80060c6:	468b      	mov	fp, r1
 80060c8:	2503      	movs	r5, #3
 80060ca:	4eac      	ldr	r6, [pc, #688]	; (800637c <_dtoa_r+0x61c>)
 80060cc:	b957      	cbnz	r7, 80060e4 <_dtoa_r+0x384>
 80060ce:	4642      	mov	r2, r8
 80060d0:	464b      	mov	r3, r9
 80060d2:	4650      	mov	r0, sl
 80060d4:	4659      	mov	r1, fp
 80060d6:	f7fa fbb9 	bl	800084c <__aeabi_ddiv>
 80060da:	4682      	mov	sl, r0
 80060dc:	468b      	mov	fp, r1
 80060de:	e028      	b.n	8006132 <_dtoa_r+0x3d2>
 80060e0:	2502      	movs	r5, #2
 80060e2:	e7f2      	b.n	80060ca <_dtoa_r+0x36a>
 80060e4:	07f9      	lsls	r1, r7, #31
 80060e6:	d508      	bpl.n	80060fa <_dtoa_r+0x39a>
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060f0:	f7fa fa82 	bl	80005f8 <__aeabi_dmul>
 80060f4:	3501      	adds	r5, #1
 80060f6:	4680      	mov	r8, r0
 80060f8:	4689      	mov	r9, r1
 80060fa:	107f      	asrs	r7, r7, #1
 80060fc:	3608      	adds	r6, #8
 80060fe:	e7e5      	b.n	80060cc <_dtoa_r+0x36c>
 8006100:	f000 809b 	beq.w	800623a <_dtoa_r+0x4da>
 8006104:	9b00      	ldr	r3, [sp, #0]
 8006106:	4f9d      	ldr	r7, [pc, #628]	; (800637c <_dtoa_r+0x61c>)
 8006108:	425e      	negs	r6, r3
 800610a:	4b9b      	ldr	r3, [pc, #620]	; (8006378 <_dtoa_r+0x618>)
 800610c:	f006 020f 	and.w	r2, r6, #15
 8006110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	ec51 0b19 	vmov	r0, r1, d9
 800611c:	f7fa fa6c 	bl	80005f8 <__aeabi_dmul>
 8006120:	1136      	asrs	r6, r6, #4
 8006122:	4682      	mov	sl, r0
 8006124:	468b      	mov	fp, r1
 8006126:	2300      	movs	r3, #0
 8006128:	2502      	movs	r5, #2
 800612a:	2e00      	cmp	r6, #0
 800612c:	d17a      	bne.n	8006224 <_dtoa_r+0x4c4>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1d3      	bne.n	80060da <_dtoa_r+0x37a>
 8006132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8082 	beq.w	800623e <_dtoa_r+0x4de>
 800613a:	4b91      	ldr	r3, [pc, #580]	; (8006380 <_dtoa_r+0x620>)
 800613c:	2200      	movs	r2, #0
 800613e:	4650      	mov	r0, sl
 8006140:	4659      	mov	r1, fp
 8006142:	f7fa fccb 	bl	8000adc <__aeabi_dcmplt>
 8006146:	2800      	cmp	r0, #0
 8006148:	d079      	beq.n	800623e <_dtoa_r+0x4de>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d076      	beq.n	800623e <_dtoa_r+0x4de>
 8006150:	9b02      	ldr	r3, [sp, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	dd36      	ble.n	80061c4 <_dtoa_r+0x464>
 8006156:	9b00      	ldr	r3, [sp, #0]
 8006158:	4650      	mov	r0, sl
 800615a:	4659      	mov	r1, fp
 800615c:	1e5f      	subs	r7, r3, #1
 800615e:	2200      	movs	r2, #0
 8006160:	4b88      	ldr	r3, [pc, #544]	; (8006384 <_dtoa_r+0x624>)
 8006162:	f7fa fa49 	bl	80005f8 <__aeabi_dmul>
 8006166:	9e02      	ldr	r6, [sp, #8]
 8006168:	4682      	mov	sl, r0
 800616a:	468b      	mov	fp, r1
 800616c:	3501      	adds	r5, #1
 800616e:	4628      	mov	r0, r5
 8006170:	f7fa f9d8 	bl	8000524 <__aeabi_i2d>
 8006174:	4652      	mov	r2, sl
 8006176:	465b      	mov	r3, fp
 8006178:	f7fa fa3e 	bl	80005f8 <__aeabi_dmul>
 800617c:	4b82      	ldr	r3, [pc, #520]	; (8006388 <_dtoa_r+0x628>)
 800617e:	2200      	movs	r2, #0
 8006180:	f7fa f884 	bl	800028c <__adddf3>
 8006184:	46d0      	mov	r8, sl
 8006186:	46d9      	mov	r9, fp
 8006188:	4682      	mov	sl, r0
 800618a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800618e:	2e00      	cmp	r6, #0
 8006190:	d158      	bne.n	8006244 <_dtoa_r+0x4e4>
 8006192:	4b7e      	ldr	r3, [pc, #504]	; (800638c <_dtoa_r+0x62c>)
 8006194:	2200      	movs	r2, #0
 8006196:	4640      	mov	r0, r8
 8006198:	4649      	mov	r1, r9
 800619a:	f7fa f875 	bl	8000288 <__aeabi_dsub>
 800619e:	4652      	mov	r2, sl
 80061a0:	465b      	mov	r3, fp
 80061a2:	4680      	mov	r8, r0
 80061a4:	4689      	mov	r9, r1
 80061a6:	f7fa fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	f040 8295 	bne.w	80066da <_dtoa_r+0x97a>
 80061b0:	4652      	mov	r2, sl
 80061b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061b6:	4640      	mov	r0, r8
 80061b8:	4649      	mov	r1, r9
 80061ba:	f7fa fc8f 	bl	8000adc <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f040 8289 	bne.w	80066d6 <_dtoa_r+0x976>
 80061c4:	ec5b ab19 	vmov	sl, fp, d9
 80061c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f2c0 8148 	blt.w	8006460 <_dtoa_r+0x700>
 80061d0:	9a00      	ldr	r2, [sp, #0]
 80061d2:	2a0e      	cmp	r2, #14
 80061d4:	f300 8144 	bgt.w	8006460 <_dtoa_r+0x700>
 80061d8:	4b67      	ldr	r3, [pc, #412]	; (8006378 <_dtoa_r+0x618>)
 80061da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f280 80d5 	bge.w	8006394 <_dtoa_r+0x634>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f300 80d1 	bgt.w	8006394 <_dtoa_r+0x634>
 80061f2:	f040 826f 	bne.w	80066d4 <_dtoa_r+0x974>
 80061f6:	4b65      	ldr	r3, [pc, #404]	; (800638c <_dtoa_r+0x62c>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	4640      	mov	r0, r8
 80061fc:	4649      	mov	r1, r9
 80061fe:	f7fa f9fb 	bl	80005f8 <__aeabi_dmul>
 8006202:	4652      	mov	r2, sl
 8006204:	465b      	mov	r3, fp
 8006206:	f7fa fc7d 	bl	8000b04 <__aeabi_dcmpge>
 800620a:	9e03      	ldr	r6, [sp, #12]
 800620c:	4637      	mov	r7, r6
 800620e:	2800      	cmp	r0, #0
 8006210:	f040 8245 	bne.w	800669e <_dtoa_r+0x93e>
 8006214:	9d01      	ldr	r5, [sp, #4]
 8006216:	2331      	movs	r3, #49	; 0x31
 8006218:	f805 3b01 	strb.w	r3, [r5], #1
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	3301      	adds	r3, #1
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	e240      	b.n	80066a6 <_dtoa_r+0x946>
 8006224:	07f2      	lsls	r2, r6, #31
 8006226:	d505      	bpl.n	8006234 <_dtoa_r+0x4d4>
 8006228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622c:	f7fa f9e4 	bl	80005f8 <__aeabi_dmul>
 8006230:	3501      	adds	r5, #1
 8006232:	2301      	movs	r3, #1
 8006234:	1076      	asrs	r6, r6, #1
 8006236:	3708      	adds	r7, #8
 8006238:	e777      	b.n	800612a <_dtoa_r+0x3ca>
 800623a:	2502      	movs	r5, #2
 800623c:	e779      	b.n	8006132 <_dtoa_r+0x3d2>
 800623e:	9f00      	ldr	r7, [sp, #0]
 8006240:	9e03      	ldr	r6, [sp, #12]
 8006242:	e794      	b.n	800616e <_dtoa_r+0x40e>
 8006244:	9901      	ldr	r1, [sp, #4]
 8006246:	4b4c      	ldr	r3, [pc, #304]	; (8006378 <_dtoa_r+0x618>)
 8006248:	4431      	add	r1, r6
 800624a:	910d      	str	r1, [sp, #52]	; 0x34
 800624c:	9908      	ldr	r1, [sp, #32]
 800624e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006252:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006256:	2900      	cmp	r1, #0
 8006258:	d043      	beq.n	80062e2 <_dtoa_r+0x582>
 800625a:	494d      	ldr	r1, [pc, #308]	; (8006390 <_dtoa_r+0x630>)
 800625c:	2000      	movs	r0, #0
 800625e:	f7fa faf5 	bl	800084c <__aeabi_ddiv>
 8006262:	4652      	mov	r2, sl
 8006264:	465b      	mov	r3, fp
 8006266:	f7fa f80f 	bl	8000288 <__aeabi_dsub>
 800626a:	9d01      	ldr	r5, [sp, #4]
 800626c:	4682      	mov	sl, r0
 800626e:	468b      	mov	fp, r1
 8006270:	4649      	mov	r1, r9
 8006272:	4640      	mov	r0, r8
 8006274:	f7fa fc70 	bl	8000b58 <__aeabi_d2iz>
 8006278:	4606      	mov	r6, r0
 800627a:	f7fa f953 	bl	8000524 <__aeabi_i2d>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f7f9 ffff 	bl	8000288 <__aeabi_dsub>
 800628a:	3630      	adds	r6, #48	; 0x30
 800628c:	f805 6b01 	strb.w	r6, [r5], #1
 8006290:	4652      	mov	r2, sl
 8006292:	465b      	mov	r3, fp
 8006294:	4680      	mov	r8, r0
 8006296:	4689      	mov	r9, r1
 8006298:	f7fa fc20 	bl	8000adc <__aeabi_dcmplt>
 800629c:	2800      	cmp	r0, #0
 800629e:	d163      	bne.n	8006368 <_dtoa_r+0x608>
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	4936      	ldr	r1, [pc, #216]	; (8006380 <_dtoa_r+0x620>)
 80062a6:	2000      	movs	r0, #0
 80062a8:	f7f9 ffee 	bl	8000288 <__aeabi_dsub>
 80062ac:	4652      	mov	r2, sl
 80062ae:	465b      	mov	r3, fp
 80062b0:	f7fa fc14 	bl	8000adc <__aeabi_dcmplt>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f040 80b5 	bne.w	8006424 <_dtoa_r+0x6c4>
 80062ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062bc:	429d      	cmp	r5, r3
 80062be:	d081      	beq.n	80061c4 <_dtoa_r+0x464>
 80062c0:	4b30      	ldr	r3, [pc, #192]	; (8006384 <_dtoa_r+0x624>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	4650      	mov	r0, sl
 80062c6:	4659      	mov	r1, fp
 80062c8:	f7fa f996 	bl	80005f8 <__aeabi_dmul>
 80062cc:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <_dtoa_r+0x624>)
 80062ce:	4682      	mov	sl, r0
 80062d0:	468b      	mov	fp, r1
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	2200      	movs	r2, #0
 80062d8:	f7fa f98e 	bl	80005f8 <__aeabi_dmul>
 80062dc:	4680      	mov	r8, r0
 80062de:	4689      	mov	r9, r1
 80062e0:	e7c6      	b.n	8006270 <_dtoa_r+0x510>
 80062e2:	4650      	mov	r0, sl
 80062e4:	4659      	mov	r1, fp
 80062e6:	f7fa f987 	bl	80005f8 <__aeabi_dmul>
 80062ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ec:	9d01      	ldr	r5, [sp, #4]
 80062ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80062f0:	4682      	mov	sl, r0
 80062f2:	468b      	mov	fp, r1
 80062f4:	4649      	mov	r1, r9
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7fa fc2e 	bl	8000b58 <__aeabi_d2iz>
 80062fc:	4606      	mov	r6, r0
 80062fe:	f7fa f911 	bl	8000524 <__aeabi_i2d>
 8006302:	3630      	adds	r6, #48	; 0x30
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4640      	mov	r0, r8
 800630a:	4649      	mov	r1, r9
 800630c:	f7f9 ffbc 	bl	8000288 <__aeabi_dsub>
 8006310:	f805 6b01 	strb.w	r6, [r5], #1
 8006314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006316:	429d      	cmp	r5, r3
 8006318:	4680      	mov	r8, r0
 800631a:	4689      	mov	r9, r1
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	d124      	bne.n	800636c <_dtoa_r+0x60c>
 8006322:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <_dtoa_r+0x630>)
 8006324:	4650      	mov	r0, sl
 8006326:	4659      	mov	r1, fp
 8006328:	f7f9 ffb0 	bl	800028c <__adddf3>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4640      	mov	r0, r8
 8006332:	4649      	mov	r1, r9
 8006334:	f7fa fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 8006338:	2800      	cmp	r0, #0
 800633a:	d173      	bne.n	8006424 <_dtoa_r+0x6c4>
 800633c:	4652      	mov	r2, sl
 800633e:	465b      	mov	r3, fp
 8006340:	4913      	ldr	r1, [pc, #76]	; (8006390 <_dtoa_r+0x630>)
 8006342:	2000      	movs	r0, #0
 8006344:	f7f9 ffa0 	bl	8000288 <__aeabi_dsub>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4640      	mov	r0, r8
 800634e:	4649      	mov	r1, r9
 8006350:	f7fa fbc4 	bl	8000adc <__aeabi_dcmplt>
 8006354:	2800      	cmp	r0, #0
 8006356:	f43f af35 	beq.w	80061c4 <_dtoa_r+0x464>
 800635a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800635c:	1e6b      	subs	r3, r5, #1
 800635e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006360:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d0f8      	beq.n	800635a <_dtoa_r+0x5fa>
 8006368:	9700      	str	r7, [sp, #0]
 800636a:	e049      	b.n	8006400 <_dtoa_r+0x6a0>
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <_dtoa_r+0x624>)
 800636e:	f7fa f943 	bl	80005f8 <__aeabi_dmul>
 8006372:	4680      	mov	r8, r0
 8006374:	4689      	mov	r9, r1
 8006376:	e7bd      	b.n	80062f4 <_dtoa_r+0x594>
 8006378:	080082d8 	.word	0x080082d8
 800637c:	080082b0 	.word	0x080082b0
 8006380:	3ff00000 	.word	0x3ff00000
 8006384:	40240000 	.word	0x40240000
 8006388:	401c0000 	.word	0x401c0000
 800638c:	40140000 	.word	0x40140000
 8006390:	3fe00000 	.word	0x3fe00000
 8006394:	9d01      	ldr	r5, [sp, #4]
 8006396:	4656      	mov	r6, sl
 8006398:	465f      	mov	r7, fp
 800639a:	4642      	mov	r2, r8
 800639c:	464b      	mov	r3, r9
 800639e:	4630      	mov	r0, r6
 80063a0:	4639      	mov	r1, r7
 80063a2:	f7fa fa53 	bl	800084c <__aeabi_ddiv>
 80063a6:	f7fa fbd7 	bl	8000b58 <__aeabi_d2iz>
 80063aa:	4682      	mov	sl, r0
 80063ac:	f7fa f8ba 	bl	8000524 <__aeabi_i2d>
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80063c4:	f7f9 ff60 	bl	8000288 <__aeabi_dsub>
 80063c8:	f805 6b01 	strb.w	r6, [r5], #1
 80063cc:	9e01      	ldr	r6, [sp, #4]
 80063ce:	9f03      	ldr	r7, [sp, #12]
 80063d0:	1bae      	subs	r6, r5, r6
 80063d2:	42b7      	cmp	r7, r6
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	d135      	bne.n	8006446 <_dtoa_r+0x6e6>
 80063da:	f7f9 ff57 	bl	800028c <__adddf3>
 80063de:	4642      	mov	r2, r8
 80063e0:	464b      	mov	r3, r9
 80063e2:	4606      	mov	r6, r0
 80063e4:	460f      	mov	r7, r1
 80063e6:	f7fa fb97 	bl	8000b18 <__aeabi_dcmpgt>
 80063ea:	b9d0      	cbnz	r0, 8006422 <_dtoa_r+0x6c2>
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7fa fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 80063f8:	b110      	cbz	r0, 8006400 <_dtoa_r+0x6a0>
 80063fa:	f01a 0f01 	tst.w	sl, #1
 80063fe:	d110      	bne.n	8006422 <_dtoa_r+0x6c2>
 8006400:	4620      	mov	r0, r4
 8006402:	ee18 1a10 	vmov	r1, s16
 8006406:	f000 faf3 	bl	80069f0 <_Bfree>
 800640a:	2300      	movs	r3, #0
 800640c:	9800      	ldr	r0, [sp, #0]
 800640e:	702b      	strb	r3, [r5, #0]
 8006410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006412:	3001      	adds	r0, #1
 8006414:	6018      	str	r0, [r3, #0]
 8006416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006418:	2b00      	cmp	r3, #0
 800641a:	f43f acf1 	beq.w	8005e00 <_dtoa_r+0xa0>
 800641e:	601d      	str	r5, [r3, #0]
 8006420:	e4ee      	b.n	8005e00 <_dtoa_r+0xa0>
 8006422:	9f00      	ldr	r7, [sp, #0]
 8006424:	462b      	mov	r3, r5
 8006426:	461d      	mov	r5, r3
 8006428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800642c:	2a39      	cmp	r2, #57	; 0x39
 800642e:	d106      	bne.n	800643e <_dtoa_r+0x6de>
 8006430:	9a01      	ldr	r2, [sp, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d1f7      	bne.n	8006426 <_dtoa_r+0x6c6>
 8006436:	9901      	ldr	r1, [sp, #4]
 8006438:	2230      	movs	r2, #48	; 0x30
 800643a:	3701      	adds	r7, #1
 800643c:	700a      	strb	r2, [r1, #0]
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	3201      	adds	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e790      	b.n	8006368 <_dtoa_r+0x608>
 8006446:	4ba6      	ldr	r3, [pc, #664]	; (80066e0 <_dtoa_r+0x980>)
 8006448:	2200      	movs	r2, #0
 800644a:	f7fa f8d5 	bl	80005f8 <__aeabi_dmul>
 800644e:	2200      	movs	r2, #0
 8006450:	2300      	movs	r3, #0
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	f7fa fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800645a:	2800      	cmp	r0, #0
 800645c:	d09d      	beq.n	800639a <_dtoa_r+0x63a>
 800645e:	e7cf      	b.n	8006400 <_dtoa_r+0x6a0>
 8006460:	9a08      	ldr	r2, [sp, #32]
 8006462:	2a00      	cmp	r2, #0
 8006464:	f000 80d7 	beq.w	8006616 <_dtoa_r+0x8b6>
 8006468:	9a06      	ldr	r2, [sp, #24]
 800646a:	2a01      	cmp	r2, #1
 800646c:	f300 80ba 	bgt.w	80065e4 <_dtoa_r+0x884>
 8006470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006472:	2a00      	cmp	r2, #0
 8006474:	f000 80b2 	beq.w	80065dc <_dtoa_r+0x87c>
 8006478:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800647c:	9e07      	ldr	r6, [sp, #28]
 800647e:	9d04      	ldr	r5, [sp, #16]
 8006480:	9a04      	ldr	r2, [sp, #16]
 8006482:	441a      	add	r2, r3
 8006484:	9204      	str	r2, [sp, #16]
 8006486:	9a05      	ldr	r2, [sp, #20]
 8006488:	2101      	movs	r1, #1
 800648a:	441a      	add	r2, r3
 800648c:	4620      	mov	r0, r4
 800648e:	9205      	str	r2, [sp, #20]
 8006490:	f000 fb66 	bl	8006b60 <__i2b>
 8006494:	4607      	mov	r7, r0
 8006496:	2d00      	cmp	r5, #0
 8006498:	dd0c      	ble.n	80064b4 <_dtoa_r+0x754>
 800649a:	9b05      	ldr	r3, [sp, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	dd09      	ble.n	80064b4 <_dtoa_r+0x754>
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	9a04      	ldr	r2, [sp, #16]
 80064a4:	bfa8      	it	ge
 80064a6:	462b      	movge	r3, r5
 80064a8:	1ad2      	subs	r2, r2, r3
 80064aa:	9204      	str	r2, [sp, #16]
 80064ac:	9a05      	ldr	r2, [sp, #20]
 80064ae:	1aed      	subs	r5, r5, r3
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	b31b      	cbz	r3, 8006500 <_dtoa_r+0x7a0>
 80064b8:	9b08      	ldr	r3, [sp, #32]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 80af 	beq.w	800661e <_dtoa_r+0x8be>
 80064c0:	2e00      	cmp	r6, #0
 80064c2:	dd13      	ble.n	80064ec <_dtoa_r+0x78c>
 80064c4:	4639      	mov	r1, r7
 80064c6:	4632      	mov	r2, r6
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fc09 	bl	8006ce0 <__pow5mult>
 80064ce:	ee18 2a10 	vmov	r2, s16
 80064d2:	4601      	mov	r1, r0
 80064d4:	4607      	mov	r7, r0
 80064d6:	4620      	mov	r0, r4
 80064d8:	f000 fb58 	bl	8006b8c <__multiply>
 80064dc:	ee18 1a10 	vmov	r1, s16
 80064e0:	4680      	mov	r8, r0
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fa84 	bl	80069f0 <_Bfree>
 80064e8:	ee08 8a10 	vmov	s16, r8
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	1b9a      	subs	r2, r3, r6
 80064f0:	d006      	beq.n	8006500 <_dtoa_r+0x7a0>
 80064f2:	ee18 1a10 	vmov	r1, s16
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 fbf2 	bl	8006ce0 <__pow5mult>
 80064fc:	ee08 0a10 	vmov	s16, r0
 8006500:	2101      	movs	r1, #1
 8006502:	4620      	mov	r0, r4
 8006504:	f000 fb2c 	bl	8006b60 <__i2b>
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	4606      	mov	r6, r0
 800650e:	f340 8088 	ble.w	8006622 <_dtoa_r+0x8c2>
 8006512:	461a      	mov	r2, r3
 8006514:	4601      	mov	r1, r0
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fbe2 	bl	8006ce0 <__pow5mult>
 800651c:	9b06      	ldr	r3, [sp, #24]
 800651e:	2b01      	cmp	r3, #1
 8006520:	4606      	mov	r6, r0
 8006522:	f340 8081 	ble.w	8006628 <_dtoa_r+0x8c8>
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	6933      	ldr	r3, [r6, #16]
 800652c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006530:	6918      	ldr	r0, [r3, #16]
 8006532:	f000 fac5 	bl	8006ac0 <__hi0bits>
 8006536:	f1c0 0020 	rsb	r0, r0, #32
 800653a:	9b05      	ldr	r3, [sp, #20]
 800653c:	4418      	add	r0, r3
 800653e:	f010 001f 	ands.w	r0, r0, #31
 8006542:	f000 8092 	beq.w	800666a <_dtoa_r+0x90a>
 8006546:	f1c0 0320 	rsb	r3, r0, #32
 800654a:	2b04      	cmp	r3, #4
 800654c:	f340 808a 	ble.w	8006664 <_dtoa_r+0x904>
 8006550:	f1c0 001c 	rsb	r0, r0, #28
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	4403      	add	r3, r0
 8006558:	9304      	str	r3, [sp, #16]
 800655a:	9b05      	ldr	r3, [sp, #20]
 800655c:	4403      	add	r3, r0
 800655e:	4405      	add	r5, r0
 8006560:	9305      	str	r3, [sp, #20]
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd07      	ble.n	8006578 <_dtoa_r+0x818>
 8006568:	ee18 1a10 	vmov	r1, s16
 800656c:	461a      	mov	r2, r3
 800656e:	4620      	mov	r0, r4
 8006570:	f000 fc10 	bl	8006d94 <__lshift>
 8006574:	ee08 0a10 	vmov	s16, r0
 8006578:	9b05      	ldr	r3, [sp, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	dd05      	ble.n	800658a <_dtoa_r+0x82a>
 800657e:	4631      	mov	r1, r6
 8006580:	461a      	mov	r2, r3
 8006582:	4620      	mov	r0, r4
 8006584:	f000 fc06 	bl	8006d94 <__lshift>
 8006588:	4606      	mov	r6, r0
 800658a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d06e      	beq.n	800666e <_dtoa_r+0x90e>
 8006590:	ee18 0a10 	vmov	r0, s16
 8006594:	4631      	mov	r1, r6
 8006596:	f000 fc6d 	bl	8006e74 <__mcmp>
 800659a:	2800      	cmp	r0, #0
 800659c:	da67      	bge.n	800666e <_dtoa_r+0x90e>
 800659e:	9b00      	ldr	r3, [sp, #0]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	ee18 1a10 	vmov	r1, s16
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	220a      	movs	r2, #10
 80065aa:	2300      	movs	r3, #0
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fa41 	bl	8006a34 <__multadd>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	ee08 0a10 	vmov	s16, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 81b1 	beq.w	8006920 <_dtoa_r+0xbc0>
 80065be:	2300      	movs	r3, #0
 80065c0:	4639      	mov	r1, r7
 80065c2:	220a      	movs	r2, #10
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 fa35 	bl	8006a34 <__multadd>
 80065ca:	9b02      	ldr	r3, [sp, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	4607      	mov	r7, r0
 80065d0:	f300 808e 	bgt.w	80066f0 <_dtoa_r+0x990>
 80065d4:	9b06      	ldr	r3, [sp, #24]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	dc51      	bgt.n	800667e <_dtoa_r+0x91e>
 80065da:	e089      	b.n	80066f0 <_dtoa_r+0x990>
 80065dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065e2:	e74b      	b.n	800647c <_dtoa_r+0x71c>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	1e5e      	subs	r6, r3, #1
 80065e8:	9b07      	ldr	r3, [sp, #28]
 80065ea:	42b3      	cmp	r3, r6
 80065ec:	bfbf      	itttt	lt
 80065ee:	9b07      	ldrlt	r3, [sp, #28]
 80065f0:	9607      	strlt	r6, [sp, #28]
 80065f2:	1af2      	sublt	r2, r6, r3
 80065f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065f6:	bfb6      	itet	lt
 80065f8:	189b      	addlt	r3, r3, r2
 80065fa:	1b9e      	subge	r6, r3, r6
 80065fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	bfb8      	it	lt
 8006602:	2600      	movlt	r6, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	bfb7      	itett	lt
 8006608:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800660c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006610:	1a9d      	sublt	r5, r3, r2
 8006612:	2300      	movlt	r3, #0
 8006614:	e734      	b.n	8006480 <_dtoa_r+0x720>
 8006616:	9e07      	ldr	r6, [sp, #28]
 8006618:	9d04      	ldr	r5, [sp, #16]
 800661a:	9f08      	ldr	r7, [sp, #32]
 800661c:	e73b      	b.n	8006496 <_dtoa_r+0x736>
 800661e:	9a07      	ldr	r2, [sp, #28]
 8006620:	e767      	b.n	80064f2 <_dtoa_r+0x792>
 8006622:	9b06      	ldr	r3, [sp, #24]
 8006624:	2b01      	cmp	r3, #1
 8006626:	dc18      	bgt.n	800665a <_dtoa_r+0x8fa>
 8006628:	f1ba 0f00 	cmp.w	sl, #0
 800662c:	d115      	bne.n	800665a <_dtoa_r+0x8fa>
 800662e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006632:	b993      	cbnz	r3, 800665a <_dtoa_r+0x8fa>
 8006634:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006638:	0d1b      	lsrs	r3, r3, #20
 800663a:	051b      	lsls	r3, r3, #20
 800663c:	b183      	cbz	r3, 8006660 <_dtoa_r+0x900>
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	3301      	adds	r3, #1
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	9b05      	ldr	r3, [sp, #20]
 8006646:	3301      	adds	r3, #1
 8006648:	9305      	str	r3, [sp, #20]
 800664a:	f04f 0801 	mov.w	r8, #1
 800664e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006650:	2b00      	cmp	r3, #0
 8006652:	f47f af6a 	bne.w	800652a <_dtoa_r+0x7ca>
 8006656:	2001      	movs	r0, #1
 8006658:	e76f      	b.n	800653a <_dtoa_r+0x7da>
 800665a:	f04f 0800 	mov.w	r8, #0
 800665e:	e7f6      	b.n	800664e <_dtoa_r+0x8ee>
 8006660:	4698      	mov	r8, r3
 8006662:	e7f4      	b.n	800664e <_dtoa_r+0x8ee>
 8006664:	f43f af7d 	beq.w	8006562 <_dtoa_r+0x802>
 8006668:	4618      	mov	r0, r3
 800666a:	301c      	adds	r0, #28
 800666c:	e772      	b.n	8006554 <_dtoa_r+0x7f4>
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	dc37      	bgt.n	80066e4 <_dtoa_r+0x984>
 8006674:	9b06      	ldr	r3, [sp, #24]
 8006676:	2b02      	cmp	r3, #2
 8006678:	dd34      	ble.n	80066e4 <_dtoa_r+0x984>
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	9302      	str	r3, [sp, #8]
 800667e:	9b02      	ldr	r3, [sp, #8]
 8006680:	b96b      	cbnz	r3, 800669e <_dtoa_r+0x93e>
 8006682:	4631      	mov	r1, r6
 8006684:	2205      	movs	r2, #5
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f9d4 	bl	8006a34 <__multadd>
 800668c:	4601      	mov	r1, r0
 800668e:	4606      	mov	r6, r0
 8006690:	ee18 0a10 	vmov	r0, s16
 8006694:	f000 fbee 	bl	8006e74 <__mcmp>
 8006698:	2800      	cmp	r0, #0
 800669a:	f73f adbb 	bgt.w	8006214 <_dtoa_r+0x4b4>
 800669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a0:	9d01      	ldr	r5, [sp, #4]
 80066a2:	43db      	mvns	r3, r3
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	4631      	mov	r1, r6
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 f99f 	bl	80069f0 <_Bfree>
 80066b2:	2f00      	cmp	r7, #0
 80066b4:	f43f aea4 	beq.w	8006400 <_dtoa_r+0x6a0>
 80066b8:	f1b8 0f00 	cmp.w	r8, #0
 80066bc:	d005      	beq.n	80066ca <_dtoa_r+0x96a>
 80066be:	45b8      	cmp	r8, r7
 80066c0:	d003      	beq.n	80066ca <_dtoa_r+0x96a>
 80066c2:	4641      	mov	r1, r8
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 f993 	bl	80069f0 <_Bfree>
 80066ca:	4639      	mov	r1, r7
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 f98f 	bl	80069f0 <_Bfree>
 80066d2:	e695      	b.n	8006400 <_dtoa_r+0x6a0>
 80066d4:	2600      	movs	r6, #0
 80066d6:	4637      	mov	r7, r6
 80066d8:	e7e1      	b.n	800669e <_dtoa_r+0x93e>
 80066da:	9700      	str	r7, [sp, #0]
 80066dc:	4637      	mov	r7, r6
 80066de:	e599      	b.n	8006214 <_dtoa_r+0x4b4>
 80066e0:	40240000 	.word	0x40240000
 80066e4:	9b08      	ldr	r3, [sp, #32]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80ca 	beq.w	8006880 <_dtoa_r+0xb20>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	9302      	str	r3, [sp, #8]
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	dd05      	ble.n	8006700 <_dtoa_r+0x9a0>
 80066f4:	4639      	mov	r1, r7
 80066f6:	462a      	mov	r2, r5
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fb4b 	bl	8006d94 <__lshift>
 80066fe:	4607      	mov	r7, r0
 8006700:	f1b8 0f00 	cmp.w	r8, #0
 8006704:	d05b      	beq.n	80067be <_dtoa_r+0xa5e>
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4620      	mov	r0, r4
 800670a:	f000 f931 	bl	8006970 <_Balloc>
 800670e:	4605      	mov	r5, r0
 8006710:	b928      	cbnz	r0, 800671e <_dtoa_r+0x9be>
 8006712:	4b87      	ldr	r3, [pc, #540]	; (8006930 <_dtoa_r+0xbd0>)
 8006714:	4602      	mov	r2, r0
 8006716:	f240 21ea 	movw	r1, #746	; 0x2ea
 800671a:	f7ff bb3b 	b.w	8005d94 <_dtoa_r+0x34>
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	3202      	adds	r2, #2
 8006722:	0092      	lsls	r2, r2, #2
 8006724:	f107 010c 	add.w	r1, r7, #12
 8006728:	300c      	adds	r0, #12
 800672a:	f000 f913 	bl	8006954 <memcpy>
 800672e:	2201      	movs	r2, #1
 8006730:	4629      	mov	r1, r5
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fb2e 	bl	8006d94 <__lshift>
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	f103 0901 	add.w	r9, r3, #1
 800673e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006742:	4413      	add	r3, r2
 8006744:	9305      	str	r3, [sp, #20]
 8006746:	f00a 0301 	and.w	r3, sl, #1
 800674a:	46b8      	mov	r8, r7
 800674c:	9304      	str	r3, [sp, #16]
 800674e:	4607      	mov	r7, r0
 8006750:	4631      	mov	r1, r6
 8006752:	ee18 0a10 	vmov	r0, s16
 8006756:	f7ff fa75 	bl	8005c44 <quorem>
 800675a:	4641      	mov	r1, r8
 800675c:	9002      	str	r0, [sp, #8]
 800675e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006762:	ee18 0a10 	vmov	r0, s16
 8006766:	f000 fb85 	bl	8006e74 <__mcmp>
 800676a:	463a      	mov	r2, r7
 800676c:	9003      	str	r0, [sp, #12]
 800676e:	4631      	mov	r1, r6
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fb9b 	bl	8006eac <__mdiff>
 8006776:	68c2      	ldr	r2, [r0, #12]
 8006778:	f109 3bff 	add.w	fp, r9, #4294967295
 800677c:	4605      	mov	r5, r0
 800677e:	bb02      	cbnz	r2, 80067c2 <_dtoa_r+0xa62>
 8006780:	4601      	mov	r1, r0
 8006782:	ee18 0a10 	vmov	r0, s16
 8006786:	f000 fb75 	bl	8006e74 <__mcmp>
 800678a:	4602      	mov	r2, r0
 800678c:	4629      	mov	r1, r5
 800678e:	4620      	mov	r0, r4
 8006790:	9207      	str	r2, [sp, #28]
 8006792:	f000 f92d 	bl	80069f0 <_Bfree>
 8006796:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800679a:	ea43 0102 	orr.w	r1, r3, r2
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	430b      	orrs	r3, r1
 80067a2:	464d      	mov	r5, r9
 80067a4:	d10f      	bne.n	80067c6 <_dtoa_r+0xa66>
 80067a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067aa:	d02a      	beq.n	8006802 <_dtoa_r+0xaa2>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	dd02      	ble.n	80067b8 <_dtoa_r+0xa58>
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80067b8:	f88b a000 	strb.w	sl, [fp]
 80067bc:	e775      	b.n	80066aa <_dtoa_r+0x94a>
 80067be:	4638      	mov	r0, r7
 80067c0:	e7ba      	b.n	8006738 <_dtoa_r+0x9d8>
 80067c2:	2201      	movs	r2, #1
 80067c4:	e7e2      	b.n	800678c <_dtoa_r+0xa2c>
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	db04      	blt.n	80067d6 <_dtoa_r+0xa76>
 80067cc:	9906      	ldr	r1, [sp, #24]
 80067ce:	430b      	orrs	r3, r1
 80067d0:	9904      	ldr	r1, [sp, #16]
 80067d2:	430b      	orrs	r3, r1
 80067d4:	d122      	bne.n	800681c <_dtoa_r+0xabc>
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	ddee      	ble.n	80067b8 <_dtoa_r+0xa58>
 80067da:	ee18 1a10 	vmov	r1, s16
 80067de:	2201      	movs	r2, #1
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 fad7 	bl	8006d94 <__lshift>
 80067e6:	4631      	mov	r1, r6
 80067e8:	ee08 0a10 	vmov	s16, r0
 80067ec:	f000 fb42 	bl	8006e74 <__mcmp>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	dc03      	bgt.n	80067fc <_dtoa_r+0xa9c>
 80067f4:	d1e0      	bne.n	80067b8 <_dtoa_r+0xa58>
 80067f6:	f01a 0f01 	tst.w	sl, #1
 80067fa:	d0dd      	beq.n	80067b8 <_dtoa_r+0xa58>
 80067fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006800:	d1d7      	bne.n	80067b2 <_dtoa_r+0xa52>
 8006802:	2339      	movs	r3, #57	; 0x39
 8006804:	f88b 3000 	strb.w	r3, [fp]
 8006808:	462b      	mov	r3, r5
 800680a:	461d      	mov	r5, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006812:	2a39      	cmp	r2, #57	; 0x39
 8006814:	d071      	beq.n	80068fa <_dtoa_r+0xb9a>
 8006816:	3201      	adds	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	e746      	b.n	80066aa <_dtoa_r+0x94a>
 800681c:	2a00      	cmp	r2, #0
 800681e:	dd07      	ble.n	8006830 <_dtoa_r+0xad0>
 8006820:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006824:	d0ed      	beq.n	8006802 <_dtoa_r+0xaa2>
 8006826:	f10a 0301 	add.w	r3, sl, #1
 800682a:	f88b 3000 	strb.w	r3, [fp]
 800682e:	e73c      	b.n	80066aa <_dtoa_r+0x94a>
 8006830:	9b05      	ldr	r3, [sp, #20]
 8006832:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006836:	4599      	cmp	r9, r3
 8006838:	d047      	beq.n	80068ca <_dtoa_r+0xb6a>
 800683a:	ee18 1a10 	vmov	r1, s16
 800683e:	2300      	movs	r3, #0
 8006840:	220a      	movs	r2, #10
 8006842:	4620      	mov	r0, r4
 8006844:	f000 f8f6 	bl	8006a34 <__multadd>
 8006848:	45b8      	cmp	r8, r7
 800684a:	ee08 0a10 	vmov	s16, r0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	f04f 020a 	mov.w	r2, #10
 8006856:	4641      	mov	r1, r8
 8006858:	4620      	mov	r0, r4
 800685a:	d106      	bne.n	800686a <_dtoa_r+0xb0a>
 800685c:	f000 f8ea 	bl	8006a34 <__multadd>
 8006860:	4680      	mov	r8, r0
 8006862:	4607      	mov	r7, r0
 8006864:	f109 0901 	add.w	r9, r9, #1
 8006868:	e772      	b.n	8006750 <_dtoa_r+0x9f0>
 800686a:	f000 f8e3 	bl	8006a34 <__multadd>
 800686e:	4639      	mov	r1, r7
 8006870:	4680      	mov	r8, r0
 8006872:	2300      	movs	r3, #0
 8006874:	220a      	movs	r2, #10
 8006876:	4620      	mov	r0, r4
 8006878:	f000 f8dc 	bl	8006a34 <__multadd>
 800687c:	4607      	mov	r7, r0
 800687e:	e7f1      	b.n	8006864 <_dtoa_r+0xb04>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	9d01      	ldr	r5, [sp, #4]
 8006886:	ee18 0a10 	vmov	r0, s16
 800688a:	4631      	mov	r1, r6
 800688c:	f7ff f9da 	bl	8005c44 <quorem>
 8006890:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	f805 ab01 	strb.w	sl, [r5], #1
 800689a:	1aea      	subs	r2, r5, r3
 800689c:	9b02      	ldr	r3, [sp, #8]
 800689e:	4293      	cmp	r3, r2
 80068a0:	dd09      	ble.n	80068b6 <_dtoa_r+0xb56>
 80068a2:	ee18 1a10 	vmov	r1, s16
 80068a6:	2300      	movs	r3, #0
 80068a8:	220a      	movs	r2, #10
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f8c2 	bl	8006a34 <__multadd>
 80068b0:	ee08 0a10 	vmov	s16, r0
 80068b4:	e7e7      	b.n	8006886 <_dtoa_r+0xb26>
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bfc8      	it	gt
 80068bc:	461d      	movgt	r5, r3
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	bfd8      	it	le
 80068c2:	2501      	movle	r5, #1
 80068c4:	441d      	add	r5, r3
 80068c6:	f04f 0800 	mov.w	r8, #0
 80068ca:	ee18 1a10 	vmov	r1, s16
 80068ce:	2201      	movs	r2, #1
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fa5f 	bl	8006d94 <__lshift>
 80068d6:	4631      	mov	r1, r6
 80068d8:	ee08 0a10 	vmov	s16, r0
 80068dc:	f000 faca 	bl	8006e74 <__mcmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	dc91      	bgt.n	8006808 <_dtoa_r+0xaa8>
 80068e4:	d102      	bne.n	80068ec <_dtoa_r+0xb8c>
 80068e6:	f01a 0f01 	tst.w	sl, #1
 80068ea:	d18d      	bne.n	8006808 <_dtoa_r+0xaa8>
 80068ec:	462b      	mov	r3, r5
 80068ee:	461d      	mov	r5, r3
 80068f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068f4:	2a30      	cmp	r2, #48	; 0x30
 80068f6:	d0fa      	beq.n	80068ee <_dtoa_r+0xb8e>
 80068f8:	e6d7      	b.n	80066aa <_dtoa_r+0x94a>
 80068fa:	9a01      	ldr	r2, [sp, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d184      	bne.n	800680a <_dtoa_r+0xaaa>
 8006900:	9b00      	ldr	r3, [sp, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	2331      	movs	r3, #49	; 0x31
 8006908:	7013      	strb	r3, [r2, #0]
 800690a:	e6ce      	b.n	80066aa <_dtoa_r+0x94a>
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <_dtoa_r+0xbd4>)
 800690e:	f7ff ba95 	b.w	8005e3c <_dtoa_r+0xdc>
 8006912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006914:	2b00      	cmp	r3, #0
 8006916:	f47f aa6e 	bne.w	8005df6 <_dtoa_r+0x96>
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <_dtoa_r+0xbd8>)
 800691c:	f7ff ba8e 	b.w	8005e3c <_dtoa_r+0xdc>
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	dcae      	bgt.n	8006884 <_dtoa_r+0xb24>
 8006926:	9b06      	ldr	r3, [sp, #24]
 8006928:	2b02      	cmp	r3, #2
 800692a:	f73f aea8 	bgt.w	800667e <_dtoa_r+0x91e>
 800692e:	e7a9      	b.n	8006884 <_dtoa_r+0xb24>
 8006930:	08008243 	.word	0x08008243
 8006934:	080081a0 	.word	0x080081a0
 8006938:	080081c4 	.word	0x080081c4

0800693c <_localeconv_r>:
 800693c:	4800      	ldr	r0, [pc, #0]	; (8006940 <_localeconv_r+0x4>)
 800693e:	4770      	bx	lr
 8006940:	20000164 	.word	0x20000164

08006944 <malloc>:
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <malloc+0xc>)
 8006946:	4601      	mov	r1, r0
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	f000 bc17 	b.w	800717c <_malloc_r>
 800694e:	bf00      	nop
 8006950:	20000010 	.word	0x20000010

08006954 <memcpy>:
 8006954:	440a      	add	r2, r1
 8006956:	4291      	cmp	r1, r2
 8006958:	f100 33ff 	add.w	r3, r0, #4294967295
 800695c:	d100      	bne.n	8006960 <memcpy+0xc>
 800695e:	4770      	bx	lr
 8006960:	b510      	push	{r4, lr}
 8006962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800696a:	4291      	cmp	r1, r2
 800696c:	d1f9      	bne.n	8006962 <memcpy+0xe>
 800696e:	bd10      	pop	{r4, pc}

08006970 <_Balloc>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006974:	4604      	mov	r4, r0
 8006976:	460d      	mov	r5, r1
 8006978:	b976      	cbnz	r6, 8006998 <_Balloc+0x28>
 800697a:	2010      	movs	r0, #16
 800697c:	f7ff ffe2 	bl	8006944 <malloc>
 8006980:	4602      	mov	r2, r0
 8006982:	6260      	str	r0, [r4, #36]	; 0x24
 8006984:	b920      	cbnz	r0, 8006990 <_Balloc+0x20>
 8006986:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <_Balloc+0x78>)
 8006988:	4818      	ldr	r0, [pc, #96]	; (80069ec <_Balloc+0x7c>)
 800698a:	2166      	movs	r1, #102	; 0x66
 800698c:	f000 fdd6 	bl	800753c <__assert_func>
 8006990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006994:	6006      	str	r6, [r0, #0]
 8006996:	60c6      	str	r6, [r0, #12]
 8006998:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800699a:	68f3      	ldr	r3, [r6, #12]
 800699c:	b183      	cbz	r3, 80069c0 <_Balloc+0x50>
 800699e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069a6:	b9b8      	cbnz	r0, 80069d8 <_Balloc+0x68>
 80069a8:	2101      	movs	r1, #1
 80069aa:	fa01 f605 	lsl.w	r6, r1, r5
 80069ae:	1d72      	adds	r2, r6, #5
 80069b0:	0092      	lsls	r2, r2, #2
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 fb60 	bl	8007078 <_calloc_r>
 80069b8:	b160      	cbz	r0, 80069d4 <_Balloc+0x64>
 80069ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069be:	e00e      	b.n	80069de <_Balloc+0x6e>
 80069c0:	2221      	movs	r2, #33	; 0x21
 80069c2:	2104      	movs	r1, #4
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 fb57 	bl	8007078 <_calloc_r>
 80069ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069cc:	60f0      	str	r0, [r6, #12]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e4      	bne.n	800699e <_Balloc+0x2e>
 80069d4:	2000      	movs	r0, #0
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	6802      	ldr	r2, [r0, #0]
 80069da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069de:	2300      	movs	r3, #0
 80069e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069e4:	e7f7      	b.n	80069d6 <_Balloc+0x66>
 80069e6:	bf00      	nop
 80069e8:	080081d1 	.word	0x080081d1
 80069ec:	08008254 	.word	0x08008254

080069f0 <_Bfree>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069f4:	4605      	mov	r5, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b976      	cbnz	r6, 8006a18 <_Bfree+0x28>
 80069fa:	2010      	movs	r0, #16
 80069fc:	f7ff ffa2 	bl	8006944 <malloc>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6268      	str	r0, [r5, #36]	; 0x24
 8006a04:	b920      	cbnz	r0, 8006a10 <_Bfree+0x20>
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <_Bfree+0x3c>)
 8006a08:	4809      	ldr	r0, [pc, #36]	; (8006a30 <_Bfree+0x40>)
 8006a0a:	218a      	movs	r1, #138	; 0x8a
 8006a0c:	f000 fd96 	bl	800753c <__assert_func>
 8006a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a14:	6006      	str	r6, [r0, #0]
 8006a16:	60c6      	str	r6, [r0, #12]
 8006a18:	b13c      	cbz	r4, 8006a2a <_Bfree+0x3a>
 8006a1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a1c:	6862      	ldr	r2, [r4, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a24:	6021      	str	r1, [r4, #0]
 8006a26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	080081d1 	.word	0x080081d1
 8006a30:	08008254 	.word	0x08008254

08006a34 <__multadd>:
 8006a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a38:	690d      	ldr	r5, [r1, #16]
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	461e      	mov	r6, r3
 8006a40:	f101 0c14 	add.w	ip, r1, #20
 8006a44:	2000      	movs	r0, #0
 8006a46:	f8dc 3000 	ldr.w	r3, [ip]
 8006a4a:	b299      	uxth	r1, r3
 8006a4c:	fb02 6101 	mla	r1, r2, r1, r6
 8006a50:	0c1e      	lsrs	r6, r3, #16
 8006a52:	0c0b      	lsrs	r3, r1, #16
 8006a54:	fb02 3306 	mla	r3, r2, r6, r3
 8006a58:	b289      	uxth	r1, r1
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a60:	4285      	cmp	r5, r0
 8006a62:	f84c 1b04 	str.w	r1, [ip], #4
 8006a66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a6a:	dcec      	bgt.n	8006a46 <__multadd+0x12>
 8006a6c:	b30e      	cbz	r6, 8006ab2 <__multadd+0x7e>
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	dc19      	bgt.n	8006aa8 <__multadd+0x74>
 8006a74:	6861      	ldr	r1, [r4, #4]
 8006a76:	4638      	mov	r0, r7
 8006a78:	3101      	adds	r1, #1
 8006a7a:	f7ff ff79 	bl	8006970 <_Balloc>
 8006a7e:	4680      	mov	r8, r0
 8006a80:	b928      	cbnz	r0, 8006a8e <__multadd+0x5a>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <__multadd+0x84>)
 8006a86:	480d      	ldr	r0, [pc, #52]	; (8006abc <__multadd+0x88>)
 8006a88:	21b5      	movs	r1, #181	; 0xb5
 8006a8a:	f000 fd57 	bl	800753c <__assert_func>
 8006a8e:	6922      	ldr	r2, [r4, #16]
 8006a90:	3202      	adds	r2, #2
 8006a92:	f104 010c 	add.w	r1, r4, #12
 8006a96:	0092      	lsls	r2, r2, #2
 8006a98:	300c      	adds	r0, #12
 8006a9a:	f7ff ff5b 	bl	8006954 <memcpy>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	f7ff ffa5 	bl	80069f0 <_Bfree>
 8006aa6:	4644      	mov	r4, r8
 8006aa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006aac:	3501      	adds	r5, #1
 8006aae:	615e      	str	r6, [r3, #20]
 8006ab0:	6125      	str	r5, [r4, #16]
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab8:	08008243 	.word	0x08008243
 8006abc:	08008254 	.word	0x08008254

08006ac0 <__hi0bits>:
 8006ac0:	0c03      	lsrs	r3, r0, #16
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	b9d3      	cbnz	r3, 8006afc <__hi0bits+0x3c>
 8006ac6:	0400      	lsls	r0, r0, #16
 8006ac8:	2310      	movs	r3, #16
 8006aca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ace:	bf04      	itt	eq
 8006ad0:	0200      	lsleq	r0, r0, #8
 8006ad2:	3308      	addeq	r3, #8
 8006ad4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ad8:	bf04      	itt	eq
 8006ada:	0100      	lsleq	r0, r0, #4
 8006adc:	3304      	addeq	r3, #4
 8006ade:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ae2:	bf04      	itt	eq
 8006ae4:	0080      	lsleq	r0, r0, #2
 8006ae6:	3302      	addeq	r3, #2
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	db05      	blt.n	8006af8 <__hi0bits+0x38>
 8006aec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006af0:	f103 0301 	add.w	r3, r3, #1
 8006af4:	bf08      	it	eq
 8006af6:	2320      	moveq	r3, #32
 8006af8:	4618      	mov	r0, r3
 8006afa:	4770      	bx	lr
 8006afc:	2300      	movs	r3, #0
 8006afe:	e7e4      	b.n	8006aca <__hi0bits+0xa>

08006b00 <__lo0bits>:
 8006b00:	6803      	ldr	r3, [r0, #0]
 8006b02:	f013 0207 	ands.w	r2, r3, #7
 8006b06:	4601      	mov	r1, r0
 8006b08:	d00b      	beq.n	8006b22 <__lo0bits+0x22>
 8006b0a:	07da      	lsls	r2, r3, #31
 8006b0c:	d423      	bmi.n	8006b56 <__lo0bits+0x56>
 8006b0e:	0798      	lsls	r0, r3, #30
 8006b10:	bf49      	itett	mi
 8006b12:	085b      	lsrmi	r3, r3, #1
 8006b14:	089b      	lsrpl	r3, r3, #2
 8006b16:	2001      	movmi	r0, #1
 8006b18:	600b      	strmi	r3, [r1, #0]
 8006b1a:	bf5c      	itt	pl
 8006b1c:	600b      	strpl	r3, [r1, #0]
 8006b1e:	2002      	movpl	r0, #2
 8006b20:	4770      	bx	lr
 8006b22:	b298      	uxth	r0, r3
 8006b24:	b9a8      	cbnz	r0, 8006b52 <__lo0bits+0x52>
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	2010      	movs	r0, #16
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	b90a      	cbnz	r2, 8006b32 <__lo0bits+0x32>
 8006b2e:	3008      	adds	r0, #8
 8006b30:	0a1b      	lsrs	r3, r3, #8
 8006b32:	071a      	lsls	r2, r3, #28
 8006b34:	bf04      	itt	eq
 8006b36:	091b      	lsreq	r3, r3, #4
 8006b38:	3004      	addeq	r0, #4
 8006b3a:	079a      	lsls	r2, r3, #30
 8006b3c:	bf04      	itt	eq
 8006b3e:	089b      	lsreq	r3, r3, #2
 8006b40:	3002      	addeq	r0, #2
 8006b42:	07da      	lsls	r2, r3, #31
 8006b44:	d403      	bmi.n	8006b4e <__lo0bits+0x4e>
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	f100 0001 	add.w	r0, r0, #1
 8006b4c:	d005      	beq.n	8006b5a <__lo0bits+0x5a>
 8006b4e:	600b      	str	r3, [r1, #0]
 8006b50:	4770      	bx	lr
 8006b52:	4610      	mov	r0, r2
 8006b54:	e7e9      	b.n	8006b2a <__lo0bits+0x2a>
 8006b56:	2000      	movs	r0, #0
 8006b58:	4770      	bx	lr
 8006b5a:	2020      	movs	r0, #32
 8006b5c:	4770      	bx	lr
	...

08006b60 <__i2b>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	2101      	movs	r1, #1
 8006b66:	f7ff ff03 	bl	8006970 <_Balloc>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	b928      	cbnz	r0, 8006b7a <__i2b+0x1a>
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <__i2b+0x24>)
 8006b70:	4805      	ldr	r0, [pc, #20]	; (8006b88 <__i2b+0x28>)
 8006b72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b76:	f000 fce1 	bl	800753c <__assert_func>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	6144      	str	r4, [r0, #20]
 8006b7e:	6103      	str	r3, [r0, #16]
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	bf00      	nop
 8006b84:	08008243 	.word	0x08008243
 8006b88:	08008254 	.word	0x08008254

08006b8c <__multiply>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	4691      	mov	r9, r2
 8006b92:	690a      	ldr	r2, [r1, #16]
 8006b94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bfb8      	it	lt
 8006b9c:	460b      	movlt	r3, r1
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	bfbc      	itt	lt
 8006ba2:	464c      	movlt	r4, r9
 8006ba4:	4699      	movlt	r9, r3
 8006ba6:	6927      	ldr	r7, [r4, #16]
 8006ba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bac:	68a3      	ldr	r3, [r4, #8]
 8006bae:	6861      	ldr	r1, [r4, #4]
 8006bb0:	eb07 060a 	add.w	r6, r7, sl
 8006bb4:	42b3      	cmp	r3, r6
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	bfb8      	it	lt
 8006bba:	3101      	addlt	r1, #1
 8006bbc:	f7ff fed8 	bl	8006970 <_Balloc>
 8006bc0:	b930      	cbnz	r0, 8006bd0 <__multiply+0x44>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b44      	ldr	r3, [pc, #272]	; (8006cd8 <__multiply+0x14c>)
 8006bc6:	4845      	ldr	r0, [pc, #276]	; (8006cdc <__multiply+0x150>)
 8006bc8:	f240 115d 	movw	r1, #349	; 0x15d
 8006bcc:	f000 fcb6 	bl	800753c <__assert_func>
 8006bd0:	f100 0514 	add.w	r5, r0, #20
 8006bd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bd8:	462b      	mov	r3, r5
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4543      	cmp	r3, r8
 8006bde:	d321      	bcc.n	8006c24 <__multiply+0x98>
 8006be0:	f104 0314 	add.w	r3, r4, #20
 8006be4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006be8:	f109 0314 	add.w	r3, r9, #20
 8006bec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006bf0:	9202      	str	r2, [sp, #8]
 8006bf2:	1b3a      	subs	r2, r7, r4
 8006bf4:	3a15      	subs	r2, #21
 8006bf6:	f022 0203 	bic.w	r2, r2, #3
 8006bfa:	3204      	adds	r2, #4
 8006bfc:	f104 0115 	add.w	r1, r4, #21
 8006c00:	428f      	cmp	r7, r1
 8006c02:	bf38      	it	cc
 8006c04:	2204      	movcc	r2, #4
 8006c06:	9201      	str	r2, [sp, #4]
 8006c08:	9a02      	ldr	r2, [sp, #8]
 8006c0a:	9303      	str	r3, [sp, #12]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d80c      	bhi.n	8006c2a <__multiply+0x9e>
 8006c10:	2e00      	cmp	r6, #0
 8006c12:	dd03      	ble.n	8006c1c <__multiply+0x90>
 8006c14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d05a      	beq.n	8006cd2 <__multiply+0x146>
 8006c1c:	6106      	str	r6, [r0, #16]
 8006c1e:	b005      	add	sp, #20
 8006c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c24:	f843 2b04 	str.w	r2, [r3], #4
 8006c28:	e7d8      	b.n	8006bdc <__multiply+0x50>
 8006c2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c2e:	f1ba 0f00 	cmp.w	sl, #0
 8006c32:	d024      	beq.n	8006c7e <__multiply+0xf2>
 8006c34:	f104 0e14 	add.w	lr, r4, #20
 8006c38:	46a9      	mov	r9, r5
 8006c3a:	f04f 0c00 	mov.w	ip, #0
 8006c3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c42:	f8d9 1000 	ldr.w	r1, [r9]
 8006c46:	fa1f fb82 	uxth.w	fp, r2
 8006c4a:	b289      	uxth	r1, r1
 8006c4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c54:	f8d9 2000 	ldr.w	r2, [r9]
 8006c58:	4461      	add	r1, ip
 8006c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c66:	b289      	uxth	r1, r1
 8006c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c6c:	4577      	cmp	r7, lr
 8006c6e:	f849 1b04 	str.w	r1, [r9], #4
 8006c72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c76:	d8e2      	bhi.n	8006c3e <__multiply+0xb2>
 8006c78:	9a01      	ldr	r2, [sp, #4]
 8006c7a:	f845 c002 	str.w	ip, [r5, r2]
 8006c7e:	9a03      	ldr	r2, [sp, #12]
 8006c80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c84:	3304      	adds	r3, #4
 8006c86:	f1b9 0f00 	cmp.w	r9, #0
 8006c8a:	d020      	beq.n	8006cce <__multiply+0x142>
 8006c8c:	6829      	ldr	r1, [r5, #0]
 8006c8e:	f104 0c14 	add.w	ip, r4, #20
 8006c92:	46ae      	mov	lr, r5
 8006c94:	f04f 0a00 	mov.w	sl, #0
 8006c98:	f8bc b000 	ldrh.w	fp, [ip]
 8006c9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ca0:	fb09 220b 	mla	r2, r9, fp, r2
 8006ca4:	4492      	add	sl, r2
 8006ca6:	b289      	uxth	r1, r1
 8006ca8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006cac:	f84e 1b04 	str.w	r1, [lr], #4
 8006cb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cb4:	f8be 1000 	ldrh.w	r1, [lr]
 8006cb8:	0c12      	lsrs	r2, r2, #16
 8006cba:	fb09 1102 	mla	r1, r9, r2, r1
 8006cbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006cc2:	4567      	cmp	r7, ip
 8006cc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cc8:	d8e6      	bhi.n	8006c98 <__multiply+0x10c>
 8006cca:	9a01      	ldr	r2, [sp, #4]
 8006ccc:	50a9      	str	r1, [r5, r2]
 8006cce:	3504      	adds	r5, #4
 8006cd0:	e79a      	b.n	8006c08 <__multiply+0x7c>
 8006cd2:	3e01      	subs	r6, #1
 8006cd4:	e79c      	b.n	8006c10 <__multiply+0x84>
 8006cd6:	bf00      	nop
 8006cd8:	08008243 	.word	0x08008243
 8006cdc:	08008254 	.word	0x08008254

08006ce0 <__pow5mult>:
 8006ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	4615      	mov	r5, r2
 8006ce6:	f012 0203 	ands.w	r2, r2, #3
 8006cea:	4606      	mov	r6, r0
 8006cec:	460f      	mov	r7, r1
 8006cee:	d007      	beq.n	8006d00 <__pow5mult+0x20>
 8006cf0:	4c25      	ldr	r4, [pc, #148]	; (8006d88 <__pow5mult+0xa8>)
 8006cf2:	3a01      	subs	r2, #1
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cfa:	f7ff fe9b 	bl	8006a34 <__multadd>
 8006cfe:	4607      	mov	r7, r0
 8006d00:	10ad      	asrs	r5, r5, #2
 8006d02:	d03d      	beq.n	8006d80 <__pow5mult+0xa0>
 8006d04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d06:	b97c      	cbnz	r4, 8006d28 <__pow5mult+0x48>
 8006d08:	2010      	movs	r0, #16
 8006d0a:	f7ff fe1b 	bl	8006944 <malloc>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6270      	str	r0, [r6, #36]	; 0x24
 8006d12:	b928      	cbnz	r0, 8006d20 <__pow5mult+0x40>
 8006d14:	4b1d      	ldr	r3, [pc, #116]	; (8006d8c <__pow5mult+0xac>)
 8006d16:	481e      	ldr	r0, [pc, #120]	; (8006d90 <__pow5mult+0xb0>)
 8006d18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d1c:	f000 fc0e 	bl	800753c <__assert_func>
 8006d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d24:	6004      	str	r4, [r0, #0]
 8006d26:	60c4      	str	r4, [r0, #12]
 8006d28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d30:	b94c      	cbnz	r4, 8006d46 <__pow5mult+0x66>
 8006d32:	f240 2171 	movw	r1, #625	; 0x271
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff ff12 	bl	8006b60 <__i2b>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d42:	4604      	mov	r4, r0
 8006d44:	6003      	str	r3, [r0, #0]
 8006d46:	f04f 0900 	mov.w	r9, #0
 8006d4a:	07eb      	lsls	r3, r5, #31
 8006d4c:	d50a      	bpl.n	8006d64 <__pow5mult+0x84>
 8006d4e:	4639      	mov	r1, r7
 8006d50:	4622      	mov	r2, r4
 8006d52:	4630      	mov	r0, r6
 8006d54:	f7ff ff1a 	bl	8006b8c <__multiply>
 8006d58:	4639      	mov	r1, r7
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7ff fe47 	bl	80069f0 <_Bfree>
 8006d62:	4647      	mov	r7, r8
 8006d64:	106d      	asrs	r5, r5, #1
 8006d66:	d00b      	beq.n	8006d80 <__pow5mult+0xa0>
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	b938      	cbnz	r0, 8006d7c <__pow5mult+0x9c>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7ff ff0b 	bl	8006b8c <__multiply>
 8006d76:	6020      	str	r0, [r4, #0]
 8006d78:	f8c0 9000 	str.w	r9, [r0]
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	e7e4      	b.n	8006d4a <__pow5mult+0x6a>
 8006d80:	4638      	mov	r0, r7
 8006d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d86:	bf00      	nop
 8006d88:	080083a0 	.word	0x080083a0
 8006d8c:	080081d1 	.word	0x080081d1
 8006d90:	08008254 	.word	0x08008254

08006d94 <__lshift>:
 8006d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	460c      	mov	r4, r1
 8006d9a:	6849      	ldr	r1, [r1, #4]
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	4607      	mov	r7, r0
 8006da6:	4691      	mov	r9, r2
 8006da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dac:	f108 0601 	add.w	r6, r8, #1
 8006db0:	42b3      	cmp	r3, r6
 8006db2:	db0b      	blt.n	8006dcc <__lshift+0x38>
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff fddb 	bl	8006970 <_Balloc>
 8006dba:	4605      	mov	r5, r0
 8006dbc:	b948      	cbnz	r0, 8006dd2 <__lshift+0x3e>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	4b2a      	ldr	r3, [pc, #168]	; (8006e6c <__lshift+0xd8>)
 8006dc2:	482b      	ldr	r0, [pc, #172]	; (8006e70 <__lshift+0xdc>)
 8006dc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006dc8:	f000 fbb8 	bl	800753c <__assert_func>
 8006dcc:	3101      	adds	r1, #1
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	e7ee      	b.n	8006db0 <__lshift+0x1c>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f100 0114 	add.w	r1, r0, #20
 8006dd8:	f100 0210 	add.w	r2, r0, #16
 8006ddc:	4618      	mov	r0, r3
 8006dde:	4553      	cmp	r3, sl
 8006de0:	db37      	blt.n	8006e52 <__lshift+0xbe>
 8006de2:	6920      	ldr	r0, [r4, #16]
 8006de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006de8:	f104 0314 	add.w	r3, r4, #20
 8006dec:	f019 091f 	ands.w	r9, r9, #31
 8006df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006df4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006df8:	d02f      	beq.n	8006e5a <__lshift+0xc6>
 8006dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8006dfe:	468a      	mov	sl, r1
 8006e00:	f04f 0c00 	mov.w	ip, #0
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	fa02 f209 	lsl.w	r2, r2, r9
 8006e0a:	ea42 020c 	orr.w	r2, r2, ip
 8006e0e:	f84a 2b04 	str.w	r2, [sl], #4
 8006e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e16:	4298      	cmp	r0, r3
 8006e18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e1c:	d8f2      	bhi.n	8006e04 <__lshift+0x70>
 8006e1e:	1b03      	subs	r3, r0, r4
 8006e20:	3b15      	subs	r3, #21
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	3304      	adds	r3, #4
 8006e28:	f104 0215 	add.w	r2, r4, #21
 8006e2c:	4290      	cmp	r0, r2
 8006e2e:	bf38      	it	cc
 8006e30:	2304      	movcc	r3, #4
 8006e32:	f841 c003 	str.w	ip, [r1, r3]
 8006e36:	f1bc 0f00 	cmp.w	ip, #0
 8006e3a:	d001      	beq.n	8006e40 <__lshift+0xac>
 8006e3c:	f108 0602 	add.w	r6, r8, #2
 8006e40:	3e01      	subs	r6, #1
 8006e42:	4638      	mov	r0, r7
 8006e44:	612e      	str	r6, [r5, #16]
 8006e46:	4621      	mov	r1, r4
 8006e48:	f7ff fdd2 	bl	80069f0 <_Bfree>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e52:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e56:	3301      	adds	r3, #1
 8006e58:	e7c1      	b.n	8006dde <__lshift+0x4a>
 8006e5a:	3904      	subs	r1, #4
 8006e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e60:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e64:	4298      	cmp	r0, r3
 8006e66:	d8f9      	bhi.n	8006e5c <__lshift+0xc8>
 8006e68:	e7ea      	b.n	8006e40 <__lshift+0xac>
 8006e6a:	bf00      	nop
 8006e6c:	08008243 	.word	0x08008243
 8006e70:	08008254 	.word	0x08008254

08006e74 <__mcmp>:
 8006e74:	b530      	push	{r4, r5, lr}
 8006e76:	6902      	ldr	r2, [r0, #16]
 8006e78:	690c      	ldr	r4, [r1, #16]
 8006e7a:	1b12      	subs	r2, r2, r4
 8006e7c:	d10e      	bne.n	8006e9c <__mcmp+0x28>
 8006e7e:	f100 0314 	add.w	r3, r0, #20
 8006e82:	3114      	adds	r1, #20
 8006e84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e94:	42a5      	cmp	r5, r4
 8006e96:	d003      	beq.n	8006ea0 <__mcmp+0x2c>
 8006e98:	d305      	bcc.n	8006ea6 <__mcmp+0x32>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	bd30      	pop	{r4, r5, pc}
 8006ea0:	4283      	cmp	r3, r0
 8006ea2:	d3f3      	bcc.n	8006e8c <__mcmp+0x18>
 8006ea4:	e7fa      	b.n	8006e9c <__mcmp+0x28>
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	e7f7      	b.n	8006e9c <__mcmp+0x28>

08006eac <__mdiff>:
 8006eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4690      	mov	r8, r2
 8006eba:	f7ff ffdb 	bl	8006e74 <__mcmp>
 8006ebe:	1e05      	subs	r5, r0, #0
 8006ec0:	d110      	bne.n	8006ee4 <__mdiff+0x38>
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff fd53 	bl	8006970 <_Balloc>
 8006eca:	b930      	cbnz	r0, 8006eda <__mdiff+0x2e>
 8006ecc:	4b3a      	ldr	r3, [pc, #232]	; (8006fb8 <__mdiff+0x10c>)
 8006ece:	4602      	mov	r2, r0
 8006ed0:	f240 2132 	movw	r1, #562	; 0x232
 8006ed4:	4839      	ldr	r0, [pc, #228]	; (8006fbc <__mdiff+0x110>)
 8006ed6:	f000 fb31 	bl	800753c <__assert_func>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee4:	bfa4      	itt	ge
 8006ee6:	4643      	movge	r3, r8
 8006ee8:	46a0      	movge	r8, r4
 8006eea:	4630      	mov	r0, r6
 8006eec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ef0:	bfa6      	itte	ge
 8006ef2:	461c      	movge	r4, r3
 8006ef4:	2500      	movge	r5, #0
 8006ef6:	2501      	movlt	r5, #1
 8006ef8:	f7ff fd3a 	bl	8006970 <_Balloc>
 8006efc:	b920      	cbnz	r0, 8006f08 <__mdiff+0x5c>
 8006efe:	4b2e      	ldr	r3, [pc, #184]	; (8006fb8 <__mdiff+0x10c>)
 8006f00:	4602      	mov	r2, r0
 8006f02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f06:	e7e5      	b.n	8006ed4 <__mdiff+0x28>
 8006f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f0c:	6926      	ldr	r6, [r4, #16]
 8006f0e:	60c5      	str	r5, [r0, #12]
 8006f10:	f104 0914 	add.w	r9, r4, #20
 8006f14:	f108 0514 	add.w	r5, r8, #20
 8006f18:	f100 0e14 	add.w	lr, r0, #20
 8006f1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f24:	f108 0210 	add.w	r2, r8, #16
 8006f28:	46f2      	mov	sl, lr
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f34:	fa1f f883 	uxth.w	r8, r3
 8006f38:	fa11 f18b 	uxtah	r1, r1, fp
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	eba1 0808 	sub.w	r8, r1, r8
 8006f42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f4a:	fa1f f888 	uxth.w	r8, r8
 8006f4e:	1419      	asrs	r1, r3, #16
 8006f50:	454e      	cmp	r6, r9
 8006f52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f56:	f84a 3b04 	str.w	r3, [sl], #4
 8006f5a:	d8e7      	bhi.n	8006f2c <__mdiff+0x80>
 8006f5c:	1b33      	subs	r3, r6, r4
 8006f5e:	3b15      	subs	r3, #21
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	3304      	adds	r3, #4
 8006f66:	3415      	adds	r4, #21
 8006f68:	42a6      	cmp	r6, r4
 8006f6a:	bf38      	it	cc
 8006f6c:	2304      	movcc	r3, #4
 8006f6e:	441d      	add	r5, r3
 8006f70:	4473      	add	r3, lr
 8006f72:	469e      	mov	lr, r3
 8006f74:	462e      	mov	r6, r5
 8006f76:	4566      	cmp	r6, ip
 8006f78:	d30e      	bcc.n	8006f98 <__mdiff+0xec>
 8006f7a:	f10c 0203 	add.w	r2, ip, #3
 8006f7e:	1b52      	subs	r2, r2, r5
 8006f80:	f022 0203 	bic.w	r2, r2, #3
 8006f84:	3d03      	subs	r5, #3
 8006f86:	45ac      	cmp	ip, r5
 8006f88:	bf38      	it	cc
 8006f8a:	2200      	movcc	r2, #0
 8006f8c:	441a      	add	r2, r3
 8006f8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f92:	b17b      	cbz	r3, 8006fb4 <__mdiff+0x108>
 8006f94:	6107      	str	r7, [r0, #16]
 8006f96:	e7a3      	b.n	8006ee0 <__mdiff+0x34>
 8006f98:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f9c:	fa11 f288 	uxtah	r2, r1, r8
 8006fa0:	1414      	asrs	r4, r2, #16
 8006fa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fa6:	b292      	uxth	r2, r2
 8006fa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006fac:	f84e 2b04 	str.w	r2, [lr], #4
 8006fb0:	1421      	asrs	r1, r4, #16
 8006fb2:	e7e0      	b.n	8006f76 <__mdiff+0xca>
 8006fb4:	3f01      	subs	r7, #1
 8006fb6:	e7ea      	b.n	8006f8e <__mdiff+0xe2>
 8006fb8:	08008243 	.word	0x08008243
 8006fbc:	08008254 	.word	0x08008254

08006fc0 <__d2b>:
 8006fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	ec57 6b10 	vmov	r6, r7, d0
 8006fcc:	4690      	mov	r8, r2
 8006fce:	f7ff fccf 	bl	8006970 <_Balloc>
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	b930      	cbnz	r0, 8006fe4 <__d2b+0x24>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <__d2b+0xb0>)
 8006fda:	4826      	ldr	r0, [pc, #152]	; (8007074 <__d2b+0xb4>)
 8006fdc:	f240 310a 	movw	r1, #778	; 0x30a
 8006fe0:	f000 faac 	bl	800753c <__assert_func>
 8006fe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fec:	bb35      	cbnz	r5, 800703c <__d2b+0x7c>
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	d028      	beq.n	8007046 <__d2b+0x86>
 8006ff4:	4668      	mov	r0, sp
 8006ff6:	9600      	str	r6, [sp, #0]
 8006ff8:	f7ff fd82 	bl	8006b00 <__lo0bits>
 8006ffc:	9900      	ldr	r1, [sp, #0]
 8006ffe:	b300      	cbz	r0, 8007042 <__d2b+0x82>
 8007000:	9a01      	ldr	r2, [sp, #4]
 8007002:	f1c0 0320 	rsb	r3, r0, #32
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	430b      	orrs	r3, r1
 800700c:	40c2      	lsrs	r2, r0
 800700e:	6163      	str	r3, [r4, #20]
 8007010:	9201      	str	r2, [sp, #4]
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	61a3      	str	r3, [r4, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf14      	ite	ne
 800701a:	2202      	movne	r2, #2
 800701c:	2201      	moveq	r2, #1
 800701e:	6122      	str	r2, [r4, #16]
 8007020:	b1d5      	cbz	r5, 8007058 <__d2b+0x98>
 8007022:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007026:	4405      	add	r5, r0
 8007028:	f8c9 5000 	str.w	r5, [r9]
 800702c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007030:	f8c8 0000 	str.w	r0, [r8]
 8007034:	4620      	mov	r0, r4
 8007036:	b003      	add	sp, #12
 8007038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800703c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007040:	e7d5      	b.n	8006fee <__d2b+0x2e>
 8007042:	6161      	str	r1, [r4, #20]
 8007044:	e7e5      	b.n	8007012 <__d2b+0x52>
 8007046:	a801      	add	r0, sp, #4
 8007048:	f7ff fd5a 	bl	8006b00 <__lo0bits>
 800704c:	9b01      	ldr	r3, [sp, #4]
 800704e:	6163      	str	r3, [r4, #20]
 8007050:	2201      	movs	r2, #1
 8007052:	6122      	str	r2, [r4, #16]
 8007054:	3020      	adds	r0, #32
 8007056:	e7e3      	b.n	8007020 <__d2b+0x60>
 8007058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800705c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007060:	f8c9 0000 	str.w	r0, [r9]
 8007064:	6918      	ldr	r0, [r3, #16]
 8007066:	f7ff fd2b 	bl	8006ac0 <__hi0bits>
 800706a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800706e:	e7df      	b.n	8007030 <__d2b+0x70>
 8007070:	08008243 	.word	0x08008243
 8007074:	08008254 	.word	0x08008254

08007078 <_calloc_r>:
 8007078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800707a:	fba1 2402 	umull	r2, r4, r1, r2
 800707e:	b94c      	cbnz	r4, 8007094 <_calloc_r+0x1c>
 8007080:	4611      	mov	r1, r2
 8007082:	9201      	str	r2, [sp, #4]
 8007084:	f000 f87a 	bl	800717c <_malloc_r>
 8007088:	9a01      	ldr	r2, [sp, #4]
 800708a:	4605      	mov	r5, r0
 800708c:	b930      	cbnz	r0, 800709c <_calloc_r+0x24>
 800708e:	4628      	mov	r0, r5
 8007090:	b003      	add	sp, #12
 8007092:	bd30      	pop	{r4, r5, pc}
 8007094:	220c      	movs	r2, #12
 8007096:	6002      	str	r2, [r0, #0]
 8007098:	2500      	movs	r5, #0
 800709a:	e7f8      	b.n	800708e <_calloc_r+0x16>
 800709c:	4621      	mov	r1, r4
 800709e:	f7fe f93f 	bl	8005320 <memset>
 80070a2:	e7f4      	b.n	800708e <_calloc_r+0x16>

080070a4 <_free_r>:
 80070a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d044      	beq.n	8007134 <_free_r+0x90>
 80070aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ae:	9001      	str	r0, [sp, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f1a1 0404 	sub.w	r4, r1, #4
 80070b6:	bfb8      	it	lt
 80070b8:	18e4      	addlt	r4, r4, r3
 80070ba:	f000 fa9b 	bl	80075f4 <__malloc_lock>
 80070be:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <_free_r+0x94>)
 80070c0:	9801      	ldr	r0, [sp, #4]
 80070c2:	6813      	ldr	r3, [r2, #0]
 80070c4:	b933      	cbnz	r3, 80070d4 <_free_r+0x30>
 80070c6:	6063      	str	r3, [r4, #4]
 80070c8:	6014      	str	r4, [r2, #0]
 80070ca:	b003      	add	sp, #12
 80070cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070d0:	f000 ba96 	b.w	8007600 <__malloc_unlock>
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d908      	bls.n	80070ea <_free_r+0x46>
 80070d8:	6825      	ldr	r5, [r4, #0]
 80070da:	1961      	adds	r1, r4, r5
 80070dc:	428b      	cmp	r3, r1
 80070de:	bf01      	itttt	eq
 80070e0:	6819      	ldreq	r1, [r3, #0]
 80070e2:	685b      	ldreq	r3, [r3, #4]
 80070e4:	1949      	addeq	r1, r1, r5
 80070e6:	6021      	streq	r1, [r4, #0]
 80070e8:	e7ed      	b.n	80070c6 <_free_r+0x22>
 80070ea:	461a      	mov	r2, r3
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	b10b      	cbz	r3, 80070f4 <_free_r+0x50>
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	d9fa      	bls.n	80070ea <_free_r+0x46>
 80070f4:	6811      	ldr	r1, [r2, #0]
 80070f6:	1855      	adds	r5, r2, r1
 80070f8:	42a5      	cmp	r5, r4
 80070fa:	d10b      	bne.n	8007114 <_free_r+0x70>
 80070fc:	6824      	ldr	r4, [r4, #0]
 80070fe:	4421      	add	r1, r4
 8007100:	1854      	adds	r4, r2, r1
 8007102:	42a3      	cmp	r3, r4
 8007104:	6011      	str	r1, [r2, #0]
 8007106:	d1e0      	bne.n	80070ca <_free_r+0x26>
 8007108:	681c      	ldr	r4, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	6053      	str	r3, [r2, #4]
 800710e:	4421      	add	r1, r4
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	e7da      	b.n	80070ca <_free_r+0x26>
 8007114:	d902      	bls.n	800711c <_free_r+0x78>
 8007116:	230c      	movs	r3, #12
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	e7d6      	b.n	80070ca <_free_r+0x26>
 800711c:	6825      	ldr	r5, [r4, #0]
 800711e:	1961      	adds	r1, r4, r5
 8007120:	428b      	cmp	r3, r1
 8007122:	bf04      	itt	eq
 8007124:	6819      	ldreq	r1, [r3, #0]
 8007126:	685b      	ldreq	r3, [r3, #4]
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	bf04      	itt	eq
 800712c:	1949      	addeq	r1, r1, r5
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	6054      	str	r4, [r2, #4]
 8007132:	e7ca      	b.n	80070ca <_free_r+0x26>
 8007134:	b003      	add	sp, #12
 8007136:	bd30      	pop	{r4, r5, pc}
 8007138:	20000370 	.word	0x20000370

0800713c <sbrk_aligned>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4e0e      	ldr	r6, [pc, #56]	; (8007178 <sbrk_aligned+0x3c>)
 8007140:	460c      	mov	r4, r1
 8007142:	6831      	ldr	r1, [r6, #0]
 8007144:	4605      	mov	r5, r0
 8007146:	b911      	cbnz	r1, 800714e <sbrk_aligned+0x12>
 8007148:	f000 f9e8 	bl	800751c <_sbrk_r>
 800714c:	6030      	str	r0, [r6, #0]
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f9e3 	bl	800751c <_sbrk_r>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d00a      	beq.n	8007170 <sbrk_aligned+0x34>
 800715a:	1cc4      	adds	r4, r0, #3
 800715c:	f024 0403 	bic.w	r4, r4, #3
 8007160:	42a0      	cmp	r0, r4
 8007162:	d007      	beq.n	8007174 <sbrk_aligned+0x38>
 8007164:	1a21      	subs	r1, r4, r0
 8007166:	4628      	mov	r0, r5
 8007168:	f000 f9d8 	bl	800751c <_sbrk_r>
 800716c:	3001      	adds	r0, #1
 800716e:	d101      	bne.n	8007174 <sbrk_aligned+0x38>
 8007170:	f04f 34ff 	mov.w	r4, #4294967295
 8007174:	4620      	mov	r0, r4
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	20000374 	.word	0x20000374

0800717c <_malloc_r>:
 800717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007180:	1ccd      	adds	r5, r1, #3
 8007182:	f025 0503 	bic.w	r5, r5, #3
 8007186:	3508      	adds	r5, #8
 8007188:	2d0c      	cmp	r5, #12
 800718a:	bf38      	it	cc
 800718c:	250c      	movcc	r5, #12
 800718e:	2d00      	cmp	r5, #0
 8007190:	4607      	mov	r7, r0
 8007192:	db01      	blt.n	8007198 <_malloc_r+0x1c>
 8007194:	42a9      	cmp	r1, r5
 8007196:	d905      	bls.n	80071a4 <_malloc_r+0x28>
 8007198:	230c      	movs	r3, #12
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	2600      	movs	r6, #0
 800719e:	4630      	mov	r0, r6
 80071a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a4:	4e2e      	ldr	r6, [pc, #184]	; (8007260 <_malloc_r+0xe4>)
 80071a6:	f000 fa25 	bl	80075f4 <__malloc_lock>
 80071aa:	6833      	ldr	r3, [r6, #0]
 80071ac:	461c      	mov	r4, r3
 80071ae:	bb34      	cbnz	r4, 80071fe <_malloc_r+0x82>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	f7ff ffc2 	bl	800713c <sbrk_aligned>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	4604      	mov	r4, r0
 80071bc:	d14d      	bne.n	800725a <_malloc_r+0xde>
 80071be:	6834      	ldr	r4, [r6, #0]
 80071c0:	4626      	mov	r6, r4
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	d140      	bne.n	8007248 <_malloc_r+0xcc>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	4631      	mov	r1, r6
 80071ca:	4638      	mov	r0, r7
 80071cc:	eb04 0803 	add.w	r8, r4, r3
 80071d0:	f000 f9a4 	bl	800751c <_sbrk_r>
 80071d4:	4580      	cmp	r8, r0
 80071d6:	d13a      	bne.n	800724e <_malloc_r+0xd2>
 80071d8:	6821      	ldr	r1, [r4, #0]
 80071da:	3503      	adds	r5, #3
 80071dc:	1a6d      	subs	r5, r5, r1
 80071de:	f025 0503 	bic.w	r5, r5, #3
 80071e2:	3508      	adds	r5, #8
 80071e4:	2d0c      	cmp	r5, #12
 80071e6:	bf38      	it	cc
 80071e8:	250c      	movcc	r5, #12
 80071ea:	4629      	mov	r1, r5
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff ffa5 	bl	800713c <sbrk_aligned>
 80071f2:	3001      	adds	r0, #1
 80071f4:	d02b      	beq.n	800724e <_malloc_r+0xd2>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	442b      	add	r3, r5
 80071fa:	6023      	str	r3, [r4, #0]
 80071fc:	e00e      	b.n	800721c <_malloc_r+0xa0>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	1b52      	subs	r2, r2, r5
 8007202:	d41e      	bmi.n	8007242 <_malloc_r+0xc6>
 8007204:	2a0b      	cmp	r2, #11
 8007206:	d916      	bls.n	8007236 <_malloc_r+0xba>
 8007208:	1961      	adds	r1, r4, r5
 800720a:	42a3      	cmp	r3, r4
 800720c:	6025      	str	r5, [r4, #0]
 800720e:	bf18      	it	ne
 8007210:	6059      	strne	r1, [r3, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	bf08      	it	eq
 8007216:	6031      	streq	r1, [r6, #0]
 8007218:	5162      	str	r2, [r4, r5]
 800721a:	604b      	str	r3, [r1, #4]
 800721c:	4638      	mov	r0, r7
 800721e:	f104 060b 	add.w	r6, r4, #11
 8007222:	f000 f9ed 	bl	8007600 <__malloc_unlock>
 8007226:	f026 0607 	bic.w	r6, r6, #7
 800722a:	1d23      	adds	r3, r4, #4
 800722c:	1af2      	subs	r2, r6, r3
 800722e:	d0b6      	beq.n	800719e <_malloc_r+0x22>
 8007230:	1b9b      	subs	r3, r3, r6
 8007232:	50a3      	str	r3, [r4, r2]
 8007234:	e7b3      	b.n	800719e <_malloc_r+0x22>
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	42a3      	cmp	r3, r4
 800723a:	bf0c      	ite	eq
 800723c:	6032      	streq	r2, [r6, #0]
 800723e:	605a      	strne	r2, [r3, #4]
 8007240:	e7ec      	b.n	800721c <_malloc_r+0xa0>
 8007242:	4623      	mov	r3, r4
 8007244:	6864      	ldr	r4, [r4, #4]
 8007246:	e7b2      	b.n	80071ae <_malloc_r+0x32>
 8007248:	4634      	mov	r4, r6
 800724a:	6876      	ldr	r6, [r6, #4]
 800724c:	e7b9      	b.n	80071c2 <_malloc_r+0x46>
 800724e:	230c      	movs	r3, #12
 8007250:	603b      	str	r3, [r7, #0]
 8007252:	4638      	mov	r0, r7
 8007254:	f000 f9d4 	bl	8007600 <__malloc_unlock>
 8007258:	e7a1      	b.n	800719e <_malloc_r+0x22>
 800725a:	6025      	str	r5, [r4, #0]
 800725c:	e7de      	b.n	800721c <_malloc_r+0xa0>
 800725e:	bf00      	nop
 8007260:	20000370 	.word	0x20000370

08007264 <__ssputs_r>:
 8007264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007268:	688e      	ldr	r6, [r1, #8]
 800726a:	429e      	cmp	r6, r3
 800726c:	4682      	mov	sl, r0
 800726e:	460c      	mov	r4, r1
 8007270:	4690      	mov	r8, r2
 8007272:	461f      	mov	r7, r3
 8007274:	d838      	bhi.n	80072e8 <__ssputs_r+0x84>
 8007276:	898a      	ldrh	r2, [r1, #12]
 8007278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800727c:	d032      	beq.n	80072e4 <__ssputs_r+0x80>
 800727e:	6825      	ldr	r5, [r4, #0]
 8007280:	6909      	ldr	r1, [r1, #16]
 8007282:	eba5 0901 	sub.w	r9, r5, r1
 8007286:	6965      	ldr	r5, [r4, #20]
 8007288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800728c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007290:	3301      	adds	r3, #1
 8007292:	444b      	add	r3, r9
 8007294:	106d      	asrs	r5, r5, #1
 8007296:	429d      	cmp	r5, r3
 8007298:	bf38      	it	cc
 800729a:	461d      	movcc	r5, r3
 800729c:	0553      	lsls	r3, r2, #21
 800729e:	d531      	bpl.n	8007304 <__ssputs_r+0xa0>
 80072a0:	4629      	mov	r1, r5
 80072a2:	f7ff ff6b 	bl	800717c <_malloc_r>
 80072a6:	4606      	mov	r6, r0
 80072a8:	b950      	cbnz	r0, 80072c0 <__ssputs_r+0x5c>
 80072aa:	230c      	movs	r3, #12
 80072ac:	f8ca 3000 	str.w	r3, [sl]
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c0:	6921      	ldr	r1, [r4, #16]
 80072c2:	464a      	mov	r2, r9
 80072c4:	f7ff fb46 	bl	8006954 <memcpy>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	6126      	str	r6, [r4, #16]
 80072d6:	6165      	str	r5, [r4, #20]
 80072d8:	444e      	add	r6, r9
 80072da:	eba5 0509 	sub.w	r5, r5, r9
 80072de:	6026      	str	r6, [r4, #0]
 80072e0:	60a5      	str	r5, [r4, #8]
 80072e2:	463e      	mov	r6, r7
 80072e4:	42be      	cmp	r6, r7
 80072e6:	d900      	bls.n	80072ea <__ssputs_r+0x86>
 80072e8:	463e      	mov	r6, r7
 80072ea:	6820      	ldr	r0, [r4, #0]
 80072ec:	4632      	mov	r2, r6
 80072ee:	4641      	mov	r1, r8
 80072f0:	f000 f966 	bl	80075c0 <memmove>
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	1b9b      	subs	r3, r3, r6
 80072f8:	60a3      	str	r3, [r4, #8]
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4433      	add	r3, r6
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	2000      	movs	r0, #0
 8007302:	e7db      	b.n	80072bc <__ssputs_r+0x58>
 8007304:	462a      	mov	r2, r5
 8007306:	f000 f981 	bl	800760c <_realloc_r>
 800730a:	4606      	mov	r6, r0
 800730c:	2800      	cmp	r0, #0
 800730e:	d1e1      	bne.n	80072d4 <__ssputs_r+0x70>
 8007310:	6921      	ldr	r1, [r4, #16]
 8007312:	4650      	mov	r0, sl
 8007314:	f7ff fec6 	bl	80070a4 <_free_r>
 8007318:	e7c7      	b.n	80072aa <__ssputs_r+0x46>
	...

0800731c <_svfiprintf_r>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	4698      	mov	r8, r3
 8007322:	898b      	ldrh	r3, [r1, #12]
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	b09d      	sub	sp, #116	; 0x74
 8007328:	4607      	mov	r7, r0
 800732a:	460d      	mov	r5, r1
 800732c:	4614      	mov	r4, r2
 800732e:	d50e      	bpl.n	800734e <_svfiprintf_r+0x32>
 8007330:	690b      	ldr	r3, [r1, #16]
 8007332:	b963      	cbnz	r3, 800734e <_svfiprintf_r+0x32>
 8007334:	2140      	movs	r1, #64	; 0x40
 8007336:	f7ff ff21 	bl	800717c <_malloc_r>
 800733a:	6028      	str	r0, [r5, #0]
 800733c:	6128      	str	r0, [r5, #16]
 800733e:	b920      	cbnz	r0, 800734a <_svfiprintf_r+0x2e>
 8007340:	230c      	movs	r3, #12
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	e0d1      	b.n	80074ee <_svfiprintf_r+0x1d2>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	616b      	str	r3, [r5, #20]
 800734e:	2300      	movs	r3, #0
 8007350:	9309      	str	r3, [sp, #36]	; 0x24
 8007352:	2320      	movs	r3, #32
 8007354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007358:	f8cd 800c 	str.w	r8, [sp, #12]
 800735c:	2330      	movs	r3, #48	; 0x30
 800735e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007508 <_svfiprintf_r+0x1ec>
 8007362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007366:	f04f 0901 	mov.w	r9, #1
 800736a:	4623      	mov	r3, r4
 800736c:	469a      	mov	sl, r3
 800736e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007372:	b10a      	cbz	r2, 8007378 <_svfiprintf_r+0x5c>
 8007374:	2a25      	cmp	r2, #37	; 0x25
 8007376:	d1f9      	bne.n	800736c <_svfiprintf_r+0x50>
 8007378:	ebba 0b04 	subs.w	fp, sl, r4
 800737c:	d00b      	beq.n	8007396 <_svfiprintf_r+0x7a>
 800737e:	465b      	mov	r3, fp
 8007380:	4622      	mov	r2, r4
 8007382:	4629      	mov	r1, r5
 8007384:	4638      	mov	r0, r7
 8007386:	f7ff ff6d 	bl	8007264 <__ssputs_r>
 800738a:	3001      	adds	r0, #1
 800738c:	f000 80aa 	beq.w	80074e4 <_svfiprintf_r+0x1c8>
 8007390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007392:	445a      	add	r2, fp
 8007394:	9209      	str	r2, [sp, #36]	; 0x24
 8007396:	f89a 3000 	ldrb.w	r3, [sl]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80a2 	beq.w	80074e4 <_svfiprintf_r+0x1c8>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295
 80073a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073aa:	f10a 0a01 	add.w	sl, sl, #1
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b6:	931a      	str	r3, [sp, #104]	; 0x68
 80073b8:	4654      	mov	r4, sl
 80073ba:	2205      	movs	r2, #5
 80073bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c0:	4851      	ldr	r0, [pc, #324]	; (8007508 <_svfiprintf_r+0x1ec>)
 80073c2:	f7f8 ff0d 	bl	80001e0 <memchr>
 80073c6:	9a04      	ldr	r2, [sp, #16]
 80073c8:	b9d8      	cbnz	r0, 8007402 <_svfiprintf_r+0xe6>
 80073ca:	06d0      	lsls	r0, r2, #27
 80073cc:	bf44      	itt	mi
 80073ce:	2320      	movmi	r3, #32
 80073d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d4:	0711      	lsls	r1, r2, #28
 80073d6:	bf44      	itt	mi
 80073d8:	232b      	movmi	r3, #43	; 0x2b
 80073da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073de:	f89a 3000 	ldrb.w	r3, [sl]
 80073e2:	2b2a      	cmp	r3, #42	; 0x2a
 80073e4:	d015      	beq.n	8007412 <_svfiprintf_r+0xf6>
 80073e6:	9a07      	ldr	r2, [sp, #28]
 80073e8:	4654      	mov	r4, sl
 80073ea:	2000      	movs	r0, #0
 80073ec:	f04f 0c0a 	mov.w	ip, #10
 80073f0:	4621      	mov	r1, r4
 80073f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f6:	3b30      	subs	r3, #48	; 0x30
 80073f8:	2b09      	cmp	r3, #9
 80073fa:	d94e      	bls.n	800749a <_svfiprintf_r+0x17e>
 80073fc:	b1b0      	cbz	r0, 800742c <_svfiprintf_r+0x110>
 80073fe:	9207      	str	r2, [sp, #28]
 8007400:	e014      	b.n	800742c <_svfiprintf_r+0x110>
 8007402:	eba0 0308 	sub.w	r3, r0, r8
 8007406:	fa09 f303 	lsl.w	r3, r9, r3
 800740a:	4313      	orrs	r3, r2
 800740c:	9304      	str	r3, [sp, #16]
 800740e:	46a2      	mov	sl, r4
 8007410:	e7d2      	b.n	80073b8 <_svfiprintf_r+0x9c>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	1d19      	adds	r1, r3, #4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	9103      	str	r1, [sp, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfbb      	ittet	lt
 800741e:	425b      	neglt	r3, r3
 8007420:	f042 0202 	orrlt.w	r2, r2, #2
 8007424:	9307      	strge	r3, [sp, #28]
 8007426:	9307      	strlt	r3, [sp, #28]
 8007428:	bfb8      	it	lt
 800742a:	9204      	strlt	r2, [sp, #16]
 800742c:	7823      	ldrb	r3, [r4, #0]
 800742e:	2b2e      	cmp	r3, #46	; 0x2e
 8007430:	d10c      	bne.n	800744c <_svfiprintf_r+0x130>
 8007432:	7863      	ldrb	r3, [r4, #1]
 8007434:	2b2a      	cmp	r3, #42	; 0x2a
 8007436:	d135      	bne.n	80074a4 <_svfiprintf_r+0x188>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	1d1a      	adds	r2, r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	9203      	str	r2, [sp, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	bfb8      	it	lt
 8007444:	f04f 33ff 	movlt.w	r3, #4294967295
 8007448:	3402      	adds	r4, #2
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007518 <_svfiprintf_r+0x1fc>
 8007450:	7821      	ldrb	r1, [r4, #0]
 8007452:	2203      	movs	r2, #3
 8007454:	4650      	mov	r0, sl
 8007456:	f7f8 fec3 	bl	80001e0 <memchr>
 800745a:	b140      	cbz	r0, 800746e <_svfiprintf_r+0x152>
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	eba0 000a 	sub.w	r0, r0, sl
 8007462:	fa03 f000 	lsl.w	r0, r3, r0
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	4303      	orrs	r3, r0
 800746a:	3401      	adds	r4, #1
 800746c:	9304      	str	r3, [sp, #16]
 800746e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007472:	4826      	ldr	r0, [pc, #152]	; (800750c <_svfiprintf_r+0x1f0>)
 8007474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007478:	2206      	movs	r2, #6
 800747a:	f7f8 feb1 	bl	80001e0 <memchr>
 800747e:	2800      	cmp	r0, #0
 8007480:	d038      	beq.n	80074f4 <_svfiprintf_r+0x1d8>
 8007482:	4b23      	ldr	r3, [pc, #140]	; (8007510 <_svfiprintf_r+0x1f4>)
 8007484:	bb1b      	cbnz	r3, 80074ce <_svfiprintf_r+0x1b2>
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	3307      	adds	r3, #7
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	3308      	adds	r3, #8
 8007490:	9303      	str	r3, [sp, #12]
 8007492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007494:	4433      	add	r3, r6
 8007496:	9309      	str	r3, [sp, #36]	; 0x24
 8007498:	e767      	b.n	800736a <_svfiprintf_r+0x4e>
 800749a:	fb0c 3202 	mla	r2, ip, r2, r3
 800749e:	460c      	mov	r4, r1
 80074a0:	2001      	movs	r0, #1
 80074a2:	e7a5      	b.n	80073f0 <_svfiprintf_r+0xd4>
 80074a4:	2300      	movs	r3, #0
 80074a6:	3401      	adds	r4, #1
 80074a8:	9305      	str	r3, [sp, #20]
 80074aa:	4619      	mov	r1, r3
 80074ac:	f04f 0c0a 	mov.w	ip, #10
 80074b0:	4620      	mov	r0, r4
 80074b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b6:	3a30      	subs	r2, #48	; 0x30
 80074b8:	2a09      	cmp	r2, #9
 80074ba:	d903      	bls.n	80074c4 <_svfiprintf_r+0x1a8>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0c5      	beq.n	800744c <_svfiprintf_r+0x130>
 80074c0:	9105      	str	r1, [sp, #20]
 80074c2:	e7c3      	b.n	800744c <_svfiprintf_r+0x130>
 80074c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80074c8:	4604      	mov	r4, r0
 80074ca:	2301      	movs	r3, #1
 80074cc:	e7f0      	b.n	80074b0 <_svfiprintf_r+0x194>
 80074ce:	ab03      	add	r3, sp, #12
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	462a      	mov	r2, r5
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <_svfiprintf_r+0x1f8>)
 80074d6:	a904      	add	r1, sp, #16
 80074d8:	4638      	mov	r0, r7
 80074da:	f7fd ffc9 	bl	8005470 <_printf_float>
 80074de:	1c42      	adds	r2, r0, #1
 80074e0:	4606      	mov	r6, r0
 80074e2:	d1d6      	bne.n	8007492 <_svfiprintf_r+0x176>
 80074e4:	89ab      	ldrh	r3, [r5, #12]
 80074e6:	065b      	lsls	r3, r3, #25
 80074e8:	f53f af2c 	bmi.w	8007344 <_svfiprintf_r+0x28>
 80074ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ee:	b01d      	add	sp, #116	; 0x74
 80074f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f4:	ab03      	add	r3, sp, #12
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	462a      	mov	r2, r5
 80074fa:	4b06      	ldr	r3, [pc, #24]	; (8007514 <_svfiprintf_r+0x1f8>)
 80074fc:	a904      	add	r1, sp, #16
 80074fe:	4638      	mov	r0, r7
 8007500:	f7fe fa5a 	bl	80059b8 <_printf_i>
 8007504:	e7eb      	b.n	80074de <_svfiprintf_r+0x1c2>
 8007506:	bf00      	nop
 8007508:	080083ac 	.word	0x080083ac
 800750c:	080083b6 	.word	0x080083b6
 8007510:	08005471 	.word	0x08005471
 8007514:	08007265 	.word	0x08007265
 8007518:	080083b2 	.word	0x080083b2

0800751c <_sbrk_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d06      	ldr	r5, [pc, #24]	; (8007538 <_sbrk_r+0x1c>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7fa f97e 	bl	8001828 <_sbrk>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_sbrk_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_sbrk_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20000378 	.word	0x20000378

0800753c <__assert_func>:
 800753c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800753e:	4614      	mov	r4, r2
 8007540:	461a      	mov	r2, r3
 8007542:	4b09      	ldr	r3, [pc, #36]	; (8007568 <__assert_func+0x2c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4605      	mov	r5, r0
 8007548:	68d8      	ldr	r0, [r3, #12]
 800754a:	b14c      	cbz	r4, 8007560 <__assert_func+0x24>
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <__assert_func+0x30>)
 800754e:	9100      	str	r1, [sp, #0]
 8007550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007554:	4906      	ldr	r1, [pc, #24]	; (8007570 <__assert_func+0x34>)
 8007556:	462b      	mov	r3, r5
 8007558:	f000 f80e 	bl	8007578 <fiprintf>
 800755c:	f000 faac 	bl	8007ab8 <abort>
 8007560:	4b04      	ldr	r3, [pc, #16]	; (8007574 <__assert_func+0x38>)
 8007562:	461c      	mov	r4, r3
 8007564:	e7f3      	b.n	800754e <__assert_func+0x12>
 8007566:	bf00      	nop
 8007568:	20000010 	.word	0x20000010
 800756c:	080083bd 	.word	0x080083bd
 8007570:	080083ca 	.word	0x080083ca
 8007574:	080083f8 	.word	0x080083f8

08007578 <fiprintf>:
 8007578:	b40e      	push	{r1, r2, r3}
 800757a:	b503      	push	{r0, r1, lr}
 800757c:	4601      	mov	r1, r0
 800757e:	ab03      	add	r3, sp, #12
 8007580:	4805      	ldr	r0, [pc, #20]	; (8007598 <fiprintf+0x20>)
 8007582:	f853 2b04 	ldr.w	r2, [r3], #4
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	f000 f897 	bl	80076bc <_vfiprintf_r>
 800758e:	b002      	add	sp, #8
 8007590:	f85d eb04 	ldr.w	lr, [sp], #4
 8007594:	b003      	add	sp, #12
 8007596:	4770      	bx	lr
 8007598:	20000010 	.word	0x20000010

0800759c <__ascii_mbtowc>:
 800759c:	b082      	sub	sp, #8
 800759e:	b901      	cbnz	r1, 80075a2 <__ascii_mbtowc+0x6>
 80075a0:	a901      	add	r1, sp, #4
 80075a2:	b142      	cbz	r2, 80075b6 <__ascii_mbtowc+0x1a>
 80075a4:	b14b      	cbz	r3, 80075ba <__ascii_mbtowc+0x1e>
 80075a6:	7813      	ldrb	r3, [r2, #0]
 80075a8:	600b      	str	r3, [r1, #0]
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	1e10      	subs	r0, r2, #0
 80075ae:	bf18      	it	ne
 80075b0:	2001      	movne	r0, #1
 80075b2:	b002      	add	sp, #8
 80075b4:	4770      	bx	lr
 80075b6:	4610      	mov	r0, r2
 80075b8:	e7fb      	b.n	80075b2 <__ascii_mbtowc+0x16>
 80075ba:	f06f 0001 	mvn.w	r0, #1
 80075be:	e7f8      	b.n	80075b2 <__ascii_mbtowc+0x16>

080075c0 <memmove>:
 80075c0:	4288      	cmp	r0, r1
 80075c2:	b510      	push	{r4, lr}
 80075c4:	eb01 0402 	add.w	r4, r1, r2
 80075c8:	d902      	bls.n	80075d0 <memmove+0x10>
 80075ca:	4284      	cmp	r4, r0
 80075cc:	4623      	mov	r3, r4
 80075ce:	d807      	bhi.n	80075e0 <memmove+0x20>
 80075d0:	1e43      	subs	r3, r0, #1
 80075d2:	42a1      	cmp	r1, r4
 80075d4:	d008      	beq.n	80075e8 <memmove+0x28>
 80075d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075de:	e7f8      	b.n	80075d2 <memmove+0x12>
 80075e0:	4402      	add	r2, r0
 80075e2:	4601      	mov	r1, r0
 80075e4:	428a      	cmp	r2, r1
 80075e6:	d100      	bne.n	80075ea <memmove+0x2a>
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075f2:	e7f7      	b.n	80075e4 <memmove+0x24>

080075f4 <__malloc_lock>:
 80075f4:	4801      	ldr	r0, [pc, #4]	; (80075fc <__malloc_lock+0x8>)
 80075f6:	f000 bc1f 	b.w	8007e38 <__retarget_lock_acquire_recursive>
 80075fa:	bf00      	nop
 80075fc:	2000037c 	.word	0x2000037c

08007600 <__malloc_unlock>:
 8007600:	4801      	ldr	r0, [pc, #4]	; (8007608 <__malloc_unlock+0x8>)
 8007602:	f000 bc1a 	b.w	8007e3a <__retarget_lock_release_recursive>
 8007606:	bf00      	nop
 8007608:	2000037c 	.word	0x2000037c

0800760c <_realloc_r>:
 800760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	4680      	mov	r8, r0
 8007612:	4614      	mov	r4, r2
 8007614:	460e      	mov	r6, r1
 8007616:	b921      	cbnz	r1, 8007622 <_realloc_r+0x16>
 8007618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	4611      	mov	r1, r2
 800761e:	f7ff bdad 	b.w	800717c <_malloc_r>
 8007622:	b92a      	cbnz	r2, 8007630 <_realloc_r+0x24>
 8007624:	f7ff fd3e 	bl	80070a4 <_free_r>
 8007628:	4625      	mov	r5, r4
 800762a:	4628      	mov	r0, r5
 800762c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007630:	f000 fc6a 	bl	8007f08 <_malloc_usable_size_r>
 8007634:	4284      	cmp	r4, r0
 8007636:	4607      	mov	r7, r0
 8007638:	d802      	bhi.n	8007640 <_realloc_r+0x34>
 800763a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800763e:	d812      	bhi.n	8007666 <_realloc_r+0x5a>
 8007640:	4621      	mov	r1, r4
 8007642:	4640      	mov	r0, r8
 8007644:	f7ff fd9a 	bl	800717c <_malloc_r>
 8007648:	4605      	mov	r5, r0
 800764a:	2800      	cmp	r0, #0
 800764c:	d0ed      	beq.n	800762a <_realloc_r+0x1e>
 800764e:	42bc      	cmp	r4, r7
 8007650:	4622      	mov	r2, r4
 8007652:	4631      	mov	r1, r6
 8007654:	bf28      	it	cs
 8007656:	463a      	movcs	r2, r7
 8007658:	f7ff f97c 	bl	8006954 <memcpy>
 800765c:	4631      	mov	r1, r6
 800765e:	4640      	mov	r0, r8
 8007660:	f7ff fd20 	bl	80070a4 <_free_r>
 8007664:	e7e1      	b.n	800762a <_realloc_r+0x1e>
 8007666:	4635      	mov	r5, r6
 8007668:	e7df      	b.n	800762a <_realloc_r+0x1e>

0800766a <__sfputc_r>:
 800766a:	6893      	ldr	r3, [r2, #8]
 800766c:	3b01      	subs	r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	b410      	push	{r4}
 8007672:	6093      	str	r3, [r2, #8]
 8007674:	da08      	bge.n	8007688 <__sfputc_r+0x1e>
 8007676:	6994      	ldr	r4, [r2, #24]
 8007678:	42a3      	cmp	r3, r4
 800767a:	db01      	blt.n	8007680 <__sfputc_r+0x16>
 800767c:	290a      	cmp	r1, #10
 800767e:	d103      	bne.n	8007688 <__sfputc_r+0x1e>
 8007680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007684:	f000 b94a 	b.w	800791c <__swbuf_r>
 8007688:	6813      	ldr	r3, [r2, #0]
 800768a:	1c58      	adds	r0, r3, #1
 800768c:	6010      	str	r0, [r2, #0]
 800768e:	7019      	strb	r1, [r3, #0]
 8007690:	4608      	mov	r0, r1
 8007692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007696:	4770      	bx	lr

08007698 <__sfputs_r>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	4614      	mov	r4, r2
 80076a0:	18d5      	adds	r5, r2, r3
 80076a2:	42ac      	cmp	r4, r5
 80076a4:	d101      	bne.n	80076aa <__sfputs_r+0x12>
 80076a6:	2000      	movs	r0, #0
 80076a8:	e007      	b.n	80076ba <__sfputs_r+0x22>
 80076aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ae:	463a      	mov	r2, r7
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff ffda 	bl	800766a <__sfputc_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d1f3      	bne.n	80076a2 <__sfputs_r+0xa>
 80076ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076bc <_vfiprintf_r>:
 80076bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	460d      	mov	r5, r1
 80076c2:	b09d      	sub	sp, #116	; 0x74
 80076c4:	4614      	mov	r4, r2
 80076c6:	4698      	mov	r8, r3
 80076c8:	4606      	mov	r6, r0
 80076ca:	b118      	cbz	r0, 80076d4 <_vfiprintf_r+0x18>
 80076cc:	6983      	ldr	r3, [r0, #24]
 80076ce:	b90b      	cbnz	r3, 80076d4 <_vfiprintf_r+0x18>
 80076d0:	f000 fb14 	bl	8007cfc <__sinit>
 80076d4:	4b89      	ldr	r3, [pc, #548]	; (80078fc <_vfiprintf_r+0x240>)
 80076d6:	429d      	cmp	r5, r3
 80076d8:	d11b      	bne.n	8007712 <_vfiprintf_r+0x56>
 80076da:	6875      	ldr	r5, [r6, #4]
 80076dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076de:	07d9      	lsls	r1, r3, #31
 80076e0:	d405      	bmi.n	80076ee <_vfiprintf_r+0x32>
 80076e2:	89ab      	ldrh	r3, [r5, #12]
 80076e4:	059a      	lsls	r2, r3, #22
 80076e6:	d402      	bmi.n	80076ee <_vfiprintf_r+0x32>
 80076e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ea:	f000 fba5 	bl	8007e38 <__retarget_lock_acquire_recursive>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	071b      	lsls	r3, r3, #28
 80076f2:	d501      	bpl.n	80076f8 <_vfiprintf_r+0x3c>
 80076f4:	692b      	ldr	r3, [r5, #16]
 80076f6:	b9eb      	cbnz	r3, 8007734 <_vfiprintf_r+0x78>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4630      	mov	r0, r6
 80076fc:	f000 f96e 	bl	80079dc <__swsetup_r>
 8007700:	b1c0      	cbz	r0, 8007734 <_vfiprintf_r+0x78>
 8007702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007704:	07dc      	lsls	r4, r3, #31
 8007706:	d50e      	bpl.n	8007726 <_vfiprintf_r+0x6a>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	b01d      	add	sp, #116	; 0x74
 800770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007712:	4b7b      	ldr	r3, [pc, #492]	; (8007900 <_vfiprintf_r+0x244>)
 8007714:	429d      	cmp	r5, r3
 8007716:	d101      	bne.n	800771c <_vfiprintf_r+0x60>
 8007718:	68b5      	ldr	r5, [r6, #8]
 800771a:	e7df      	b.n	80076dc <_vfiprintf_r+0x20>
 800771c:	4b79      	ldr	r3, [pc, #484]	; (8007904 <_vfiprintf_r+0x248>)
 800771e:	429d      	cmp	r5, r3
 8007720:	bf08      	it	eq
 8007722:	68f5      	ldreq	r5, [r6, #12]
 8007724:	e7da      	b.n	80076dc <_vfiprintf_r+0x20>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	0598      	lsls	r0, r3, #22
 800772a:	d4ed      	bmi.n	8007708 <_vfiprintf_r+0x4c>
 800772c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800772e:	f000 fb84 	bl	8007e3a <__retarget_lock_release_recursive>
 8007732:	e7e9      	b.n	8007708 <_vfiprintf_r+0x4c>
 8007734:	2300      	movs	r3, #0
 8007736:	9309      	str	r3, [sp, #36]	; 0x24
 8007738:	2320      	movs	r3, #32
 800773a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800773e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007742:	2330      	movs	r3, #48	; 0x30
 8007744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007908 <_vfiprintf_r+0x24c>
 8007748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800774c:	f04f 0901 	mov.w	r9, #1
 8007750:	4623      	mov	r3, r4
 8007752:	469a      	mov	sl, r3
 8007754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007758:	b10a      	cbz	r2, 800775e <_vfiprintf_r+0xa2>
 800775a:	2a25      	cmp	r2, #37	; 0x25
 800775c:	d1f9      	bne.n	8007752 <_vfiprintf_r+0x96>
 800775e:	ebba 0b04 	subs.w	fp, sl, r4
 8007762:	d00b      	beq.n	800777c <_vfiprintf_r+0xc0>
 8007764:	465b      	mov	r3, fp
 8007766:	4622      	mov	r2, r4
 8007768:	4629      	mov	r1, r5
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ff94 	bl	8007698 <__sfputs_r>
 8007770:	3001      	adds	r0, #1
 8007772:	f000 80aa 	beq.w	80078ca <_vfiprintf_r+0x20e>
 8007776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007778:	445a      	add	r2, fp
 800777a:	9209      	str	r2, [sp, #36]	; 0x24
 800777c:	f89a 3000 	ldrb.w	r3, [sl]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80a2 	beq.w	80078ca <_vfiprintf_r+0x20e>
 8007786:	2300      	movs	r3, #0
 8007788:	f04f 32ff 	mov.w	r2, #4294967295
 800778c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007790:	f10a 0a01 	add.w	sl, sl, #1
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800779c:	931a      	str	r3, [sp, #104]	; 0x68
 800779e:	4654      	mov	r4, sl
 80077a0:	2205      	movs	r2, #5
 80077a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a6:	4858      	ldr	r0, [pc, #352]	; (8007908 <_vfiprintf_r+0x24c>)
 80077a8:	f7f8 fd1a 	bl	80001e0 <memchr>
 80077ac:	9a04      	ldr	r2, [sp, #16]
 80077ae:	b9d8      	cbnz	r0, 80077e8 <_vfiprintf_r+0x12c>
 80077b0:	06d1      	lsls	r1, r2, #27
 80077b2:	bf44      	itt	mi
 80077b4:	2320      	movmi	r3, #32
 80077b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ba:	0713      	lsls	r3, r2, #28
 80077bc:	bf44      	itt	mi
 80077be:	232b      	movmi	r3, #43	; 0x2b
 80077c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c4:	f89a 3000 	ldrb.w	r3, [sl]
 80077c8:	2b2a      	cmp	r3, #42	; 0x2a
 80077ca:	d015      	beq.n	80077f8 <_vfiprintf_r+0x13c>
 80077cc:	9a07      	ldr	r2, [sp, #28]
 80077ce:	4654      	mov	r4, sl
 80077d0:	2000      	movs	r0, #0
 80077d2:	f04f 0c0a 	mov.w	ip, #10
 80077d6:	4621      	mov	r1, r4
 80077d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077dc:	3b30      	subs	r3, #48	; 0x30
 80077de:	2b09      	cmp	r3, #9
 80077e0:	d94e      	bls.n	8007880 <_vfiprintf_r+0x1c4>
 80077e2:	b1b0      	cbz	r0, 8007812 <_vfiprintf_r+0x156>
 80077e4:	9207      	str	r2, [sp, #28]
 80077e6:	e014      	b.n	8007812 <_vfiprintf_r+0x156>
 80077e8:	eba0 0308 	sub.w	r3, r0, r8
 80077ec:	fa09 f303 	lsl.w	r3, r9, r3
 80077f0:	4313      	orrs	r3, r2
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	46a2      	mov	sl, r4
 80077f6:	e7d2      	b.n	800779e <_vfiprintf_r+0xe2>
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	1d19      	adds	r1, r3, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	9103      	str	r1, [sp, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfbb      	ittet	lt
 8007804:	425b      	neglt	r3, r3
 8007806:	f042 0202 	orrlt.w	r2, r2, #2
 800780a:	9307      	strge	r3, [sp, #28]
 800780c:	9307      	strlt	r3, [sp, #28]
 800780e:	bfb8      	it	lt
 8007810:	9204      	strlt	r2, [sp, #16]
 8007812:	7823      	ldrb	r3, [r4, #0]
 8007814:	2b2e      	cmp	r3, #46	; 0x2e
 8007816:	d10c      	bne.n	8007832 <_vfiprintf_r+0x176>
 8007818:	7863      	ldrb	r3, [r4, #1]
 800781a:	2b2a      	cmp	r3, #42	; 0x2a
 800781c:	d135      	bne.n	800788a <_vfiprintf_r+0x1ce>
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	1d1a      	adds	r2, r3, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	9203      	str	r2, [sp, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfb8      	it	lt
 800782a:	f04f 33ff 	movlt.w	r3, #4294967295
 800782e:	3402      	adds	r4, #2
 8007830:	9305      	str	r3, [sp, #20]
 8007832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007918 <_vfiprintf_r+0x25c>
 8007836:	7821      	ldrb	r1, [r4, #0]
 8007838:	2203      	movs	r2, #3
 800783a:	4650      	mov	r0, sl
 800783c:	f7f8 fcd0 	bl	80001e0 <memchr>
 8007840:	b140      	cbz	r0, 8007854 <_vfiprintf_r+0x198>
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	eba0 000a 	sub.w	r0, r0, sl
 8007848:	fa03 f000 	lsl.w	r0, r3, r0
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	4303      	orrs	r3, r0
 8007850:	3401      	adds	r4, #1
 8007852:	9304      	str	r3, [sp, #16]
 8007854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007858:	482c      	ldr	r0, [pc, #176]	; (800790c <_vfiprintf_r+0x250>)
 800785a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800785e:	2206      	movs	r2, #6
 8007860:	f7f8 fcbe 	bl	80001e0 <memchr>
 8007864:	2800      	cmp	r0, #0
 8007866:	d03f      	beq.n	80078e8 <_vfiprintf_r+0x22c>
 8007868:	4b29      	ldr	r3, [pc, #164]	; (8007910 <_vfiprintf_r+0x254>)
 800786a:	bb1b      	cbnz	r3, 80078b4 <_vfiprintf_r+0x1f8>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	3307      	adds	r3, #7
 8007870:	f023 0307 	bic.w	r3, r3, #7
 8007874:	3308      	adds	r3, #8
 8007876:	9303      	str	r3, [sp, #12]
 8007878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787a:	443b      	add	r3, r7
 800787c:	9309      	str	r3, [sp, #36]	; 0x24
 800787e:	e767      	b.n	8007750 <_vfiprintf_r+0x94>
 8007880:	fb0c 3202 	mla	r2, ip, r2, r3
 8007884:	460c      	mov	r4, r1
 8007886:	2001      	movs	r0, #1
 8007888:	e7a5      	b.n	80077d6 <_vfiprintf_r+0x11a>
 800788a:	2300      	movs	r3, #0
 800788c:	3401      	adds	r4, #1
 800788e:	9305      	str	r3, [sp, #20]
 8007890:	4619      	mov	r1, r3
 8007892:	f04f 0c0a 	mov.w	ip, #10
 8007896:	4620      	mov	r0, r4
 8007898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800789c:	3a30      	subs	r2, #48	; 0x30
 800789e:	2a09      	cmp	r2, #9
 80078a0:	d903      	bls.n	80078aa <_vfiprintf_r+0x1ee>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0c5      	beq.n	8007832 <_vfiprintf_r+0x176>
 80078a6:	9105      	str	r1, [sp, #20]
 80078a8:	e7c3      	b.n	8007832 <_vfiprintf_r+0x176>
 80078aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ae:	4604      	mov	r4, r0
 80078b0:	2301      	movs	r3, #1
 80078b2:	e7f0      	b.n	8007896 <_vfiprintf_r+0x1da>
 80078b4:	ab03      	add	r3, sp, #12
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	462a      	mov	r2, r5
 80078ba:	4b16      	ldr	r3, [pc, #88]	; (8007914 <_vfiprintf_r+0x258>)
 80078bc:	a904      	add	r1, sp, #16
 80078be:	4630      	mov	r0, r6
 80078c0:	f7fd fdd6 	bl	8005470 <_printf_float>
 80078c4:	4607      	mov	r7, r0
 80078c6:	1c78      	adds	r0, r7, #1
 80078c8:	d1d6      	bne.n	8007878 <_vfiprintf_r+0x1bc>
 80078ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078cc:	07d9      	lsls	r1, r3, #31
 80078ce:	d405      	bmi.n	80078dc <_vfiprintf_r+0x220>
 80078d0:	89ab      	ldrh	r3, [r5, #12]
 80078d2:	059a      	lsls	r2, r3, #22
 80078d4:	d402      	bmi.n	80078dc <_vfiprintf_r+0x220>
 80078d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078d8:	f000 faaf 	bl	8007e3a <__retarget_lock_release_recursive>
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	065b      	lsls	r3, r3, #25
 80078e0:	f53f af12 	bmi.w	8007708 <_vfiprintf_r+0x4c>
 80078e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e6:	e711      	b.n	800770c <_vfiprintf_r+0x50>
 80078e8:	ab03      	add	r3, sp, #12
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	462a      	mov	r2, r5
 80078ee:	4b09      	ldr	r3, [pc, #36]	; (8007914 <_vfiprintf_r+0x258>)
 80078f0:	a904      	add	r1, sp, #16
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7fe f860 	bl	80059b8 <_printf_i>
 80078f8:	e7e4      	b.n	80078c4 <_vfiprintf_r+0x208>
 80078fa:	bf00      	nop
 80078fc:	08008524 	.word	0x08008524
 8007900:	08008544 	.word	0x08008544
 8007904:	08008504 	.word	0x08008504
 8007908:	080083ac 	.word	0x080083ac
 800790c:	080083b6 	.word	0x080083b6
 8007910:	08005471 	.word	0x08005471
 8007914:	08007699 	.word	0x08007699
 8007918:	080083b2 	.word	0x080083b2

0800791c <__swbuf_r>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	460e      	mov	r6, r1
 8007920:	4614      	mov	r4, r2
 8007922:	4605      	mov	r5, r0
 8007924:	b118      	cbz	r0, 800792e <__swbuf_r+0x12>
 8007926:	6983      	ldr	r3, [r0, #24]
 8007928:	b90b      	cbnz	r3, 800792e <__swbuf_r+0x12>
 800792a:	f000 f9e7 	bl	8007cfc <__sinit>
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <__swbuf_r+0x98>)
 8007930:	429c      	cmp	r4, r3
 8007932:	d12b      	bne.n	800798c <__swbuf_r+0x70>
 8007934:	686c      	ldr	r4, [r5, #4]
 8007936:	69a3      	ldr	r3, [r4, #24]
 8007938:	60a3      	str	r3, [r4, #8]
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	071a      	lsls	r2, r3, #28
 800793e:	d52f      	bpl.n	80079a0 <__swbuf_r+0x84>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	b36b      	cbz	r3, 80079a0 <__swbuf_r+0x84>
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	1ac0      	subs	r0, r0, r3
 800794a:	6963      	ldr	r3, [r4, #20]
 800794c:	b2f6      	uxtb	r6, r6
 800794e:	4283      	cmp	r3, r0
 8007950:	4637      	mov	r7, r6
 8007952:	dc04      	bgt.n	800795e <__swbuf_r+0x42>
 8007954:	4621      	mov	r1, r4
 8007956:	4628      	mov	r0, r5
 8007958:	f000 f93c 	bl	8007bd4 <_fflush_r>
 800795c:	bb30      	cbnz	r0, 80079ac <__swbuf_r+0x90>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	3b01      	subs	r3, #1
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	701e      	strb	r6, [r3, #0]
 800796c:	6963      	ldr	r3, [r4, #20]
 800796e:	3001      	adds	r0, #1
 8007970:	4283      	cmp	r3, r0
 8007972:	d004      	beq.n	800797e <__swbuf_r+0x62>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	07db      	lsls	r3, r3, #31
 8007978:	d506      	bpl.n	8007988 <__swbuf_r+0x6c>
 800797a:	2e0a      	cmp	r6, #10
 800797c:	d104      	bne.n	8007988 <__swbuf_r+0x6c>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 f927 	bl	8007bd4 <_fflush_r>
 8007986:	b988      	cbnz	r0, 80079ac <__swbuf_r+0x90>
 8007988:	4638      	mov	r0, r7
 800798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <__swbuf_r+0x9c>)
 800798e:	429c      	cmp	r4, r3
 8007990:	d101      	bne.n	8007996 <__swbuf_r+0x7a>
 8007992:	68ac      	ldr	r4, [r5, #8]
 8007994:	e7cf      	b.n	8007936 <__swbuf_r+0x1a>
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <__swbuf_r+0xa0>)
 8007998:	429c      	cmp	r4, r3
 800799a:	bf08      	it	eq
 800799c:	68ec      	ldreq	r4, [r5, #12]
 800799e:	e7ca      	b.n	8007936 <__swbuf_r+0x1a>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f81a 	bl	80079dc <__swsetup_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d0cb      	beq.n	8007944 <__swbuf_r+0x28>
 80079ac:	f04f 37ff 	mov.w	r7, #4294967295
 80079b0:	e7ea      	b.n	8007988 <__swbuf_r+0x6c>
 80079b2:	bf00      	nop
 80079b4:	08008524 	.word	0x08008524
 80079b8:	08008544 	.word	0x08008544
 80079bc:	08008504 	.word	0x08008504

080079c0 <__ascii_wctomb>:
 80079c0:	b149      	cbz	r1, 80079d6 <__ascii_wctomb+0x16>
 80079c2:	2aff      	cmp	r2, #255	; 0xff
 80079c4:	bf85      	ittet	hi
 80079c6:	238a      	movhi	r3, #138	; 0x8a
 80079c8:	6003      	strhi	r3, [r0, #0]
 80079ca:	700a      	strbls	r2, [r1, #0]
 80079cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80079d0:	bf98      	it	ls
 80079d2:	2001      	movls	r0, #1
 80079d4:	4770      	bx	lr
 80079d6:	4608      	mov	r0, r1
 80079d8:	4770      	bx	lr
	...

080079dc <__swsetup_r>:
 80079dc:	4b32      	ldr	r3, [pc, #200]	; (8007aa8 <__swsetup_r+0xcc>)
 80079de:	b570      	push	{r4, r5, r6, lr}
 80079e0:	681d      	ldr	r5, [r3, #0]
 80079e2:	4606      	mov	r6, r0
 80079e4:	460c      	mov	r4, r1
 80079e6:	b125      	cbz	r5, 80079f2 <__swsetup_r+0x16>
 80079e8:	69ab      	ldr	r3, [r5, #24]
 80079ea:	b913      	cbnz	r3, 80079f2 <__swsetup_r+0x16>
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 f985 	bl	8007cfc <__sinit>
 80079f2:	4b2e      	ldr	r3, [pc, #184]	; (8007aac <__swsetup_r+0xd0>)
 80079f4:	429c      	cmp	r4, r3
 80079f6:	d10f      	bne.n	8007a18 <__swsetup_r+0x3c>
 80079f8:	686c      	ldr	r4, [r5, #4]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a00:	0719      	lsls	r1, r3, #28
 8007a02:	d42c      	bmi.n	8007a5e <__swsetup_r+0x82>
 8007a04:	06dd      	lsls	r5, r3, #27
 8007a06:	d411      	bmi.n	8007a2c <__swsetup_r+0x50>
 8007a08:	2309      	movs	r3, #9
 8007a0a:	6033      	str	r3, [r6, #0]
 8007a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	e03e      	b.n	8007a96 <__swsetup_r+0xba>
 8007a18:	4b25      	ldr	r3, [pc, #148]	; (8007ab0 <__swsetup_r+0xd4>)
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	d101      	bne.n	8007a22 <__swsetup_r+0x46>
 8007a1e:	68ac      	ldr	r4, [r5, #8]
 8007a20:	e7eb      	b.n	80079fa <__swsetup_r+0x1e>
 8007a22:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <__swsetup_r+0xd8>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	bf08      	it	eq
 8007a28:	68ec      	ldreq	r4, [r5, #12]
 8007a2a:	e7e6      	b.n	80079fa <__swsetup_r+0x1e>
 8007a2c:	0758      	lsls	r0, r3, #29
 8007a2e:	d512      	bpl.n	8007a56 <__swsetup_r+0x7a>
 8007a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a32:	b141      	cbz	r1, 8007a46 <__swsetup_r+0x6a>
 8007a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a38:	4299      	cmp	r1, r3
 8007a3a:	d002      	beq.n	8007a42 <__swsetup_r+0x66>
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff fb31 	bl	80070a4 <_free_r>
 8007a42:	2300      	movs	r3, #0
 8007a44:	6363      	str	r3, [r4, #52]	; 0x34
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	6063      	str	r3, [r4, #4]
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	f043 0308 	orr.w	r3, r3, #8
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	b94b      	cbnz	r3, 8007a76 <__swsetup_r+0x9a>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a6c:	d003      	beq.n	8007a76 <__swsetup_r+0x9a>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4630      	mov	r0, r6
 8007a72:	f000 fa09 	bl	8007e88 <__smakebuf_r>
 8007a76:	89a0      	ldrh	r0, [r4, #12]
 8007a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a7c:	f010 0301 	ands.w	r3, r0, #1
 8007a80:	d00a      	beq.n	8007a98 <__swsetup_r+0xbc>
 8007a82:	2300      	movs	r3, #0
 8007a84:	60a3      	str	r3, [r4, #8]
 8007a86:	6963      	ldr	r3, [r4, #20]
 8007a88:	425b      	negs	r3, r3
 8007a8a:	61a3      	str	r3, [r4, #24]
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	b943      	cbnz	r3, 8007aa2 <__swsetup_r+0xc6>
 8007a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a94:	d1ba      	bne.n	8007a0c <__swsetup_r+0x30>
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	0781      	lsls	r1, r0, #30
 8007a9a:	bf58      	it	pl
 8007a9c:	6963      	ldrpl	r3, [r4, #20]
 8007a9e:	60a3      	str	r3, [r4, #8]
 8007aa0:	e7f4      	b.n	8007a8c <__swsetup_r+0xb0>
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e7f7      	b.n	8007a96 <__swsetup_r+0xba>
 8007aa6:	bf00      	nop
 8007aa8:	20000010 	.word	0x20000010
 8007aac:	08008524 	.word	0x08008524
 8007ab0:	08008544 	.word	0x08008544
 8007ab4:	08008504 	.word	0x08008504

08007ab8 <abort>:
 8007ab8:	b508      	push	{r3, lr}
 8007aba:	2006      	movs	r0, #6
 8007abc:	f000 fa54 	bl	8007f68 <raise>
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	f7f9 fe39 	bl	8001738 <_exit>
	...

08007ac8 <__sflush_r>:
 8007ac8:	898a      	ldrh	r2, [r1, #12]
 8007aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ace:	4605      	mov	r5, r0
 8007ad0:	0710      	lsls	r0, r2, #28
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	d458      	bmi.n	8007b88 <__sflush_r+0xc0>
 8007ad6:	684b      	ldr	r3, [r1, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dc05      	bgt.n	8007ae8 <__sflush_r+0x20>
 8007adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	dc02      	bgt.n	8007ae8 <__sflush_r+0x20>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aea:	2e00      	cmp	r6, #0
 8007aec:	d0f9      	beq.n	8007ae2 <__sflush_r+0x1a>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007af4:	682f      	ldr	r7, [r5, #0]
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	d032      	beq.n	8007b60 <__sflush_r+0x98>
 8007afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	075a      	lsls	r2, r3, #29
 8007b00:	d505      	bpl.n	8007b0e <__sflush_r+0x46>
 8007b02:	6863      	ldr	r3, [r4, #4]
 8007b04:	1ac0      	subs	r0, r0, r3
 8007b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b08:	b10b      	cbz	r3, 8007b0e <__sflush_r+0x46>
 8007b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b0c:	1ac0      	subs	r0, r0, r3
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4602      	mov	r2, r0
 8007b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b14:	6a21      	ldr	r1, [r4, #32]
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b0      	blx	r6
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	d106      	bne.n	8007b2e <__sflush_r+0x66>
 8007b20:	6829      	ldr	r1, [r5, #0]
 8007b22:	291d      	cmp	r1, #29
 8007b24:	d82c      	bhi.n	8007b80 <__sflush_r+0xb8>
 8007b26:	4a2a      	ldr	r2, [pc, #168]	; (8007bd0 <__sflush_r+0x108>)
 8007b28:	40ca      	lsrs	r2, r1
 8007b2a:	07d6      	lsls	r6, r2, #31
 8007b2c:	d528      	bpl.n	8007b80 <__sflush_r+0xb8>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	6062      	str	r2, [r4, #4]
 8007b32:	04d9      	lsls	r1, r3, #19
 8007b34:	6922      	ldr	r2, [r4, #16]
 8007b36:	6022      	str	r2, [r4, #0]
 8007b38:	d504      	bpl.n	8007b44 <__sflush_r+0x7c>
 8007b3a:	1c42      	adds	r2, r0, #1
 8007b3c:	d101      	bne.n	8007b42 <__sflush_r+0x7a>
 8007b3e:	682b      	ldr	r3, [r5, #0]
 8007b40:	b903      	cbnz	r3, 8007b44 <__sflush_r+0x7c>
 8007b42:	6560      	str	r0, [r4, #84]	; 0x54
 8007b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b46:	602f      	str	r7, [r5, #0]
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	d0ca      	beq.n	8007ae2 <__sflush_r+0x1a>
 8007b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b50:	4299      	cmp	r1, r3
 8007b52:	d002      	beq.n	8007b5a <__sflush_r+0x92>
 8007b54:	4628      	mov	r0, r5
 8007b56:	f7ff faa5 	bl	80070a4 <_free_r>
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007b5e:	e7c1      	b.n	8007ae4 <__sflush_r+0x1c>
 8007b60:	6a21      	ldr	r1, [r4, #32]
 8007b62:	2301      	movs	r3, #1
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b0      	blx	r6
 8007b68:	1c41      	adds	r1, r0, #1
 8007b6a:	d1c7      	bne.n	8007afc <__sflush_r+0x34>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0c4      	beq.n	8007afc <__sflush_r+0x34>
 8007b72:	2b1d      	cmp	r3, #29
 8007b74:	d001      	beq.n	8007b7a <__sflush_r+0xb2>
 8007b76:	2b16      	cmp	r3, #22
 8007b78:	d101      	bne.n	8007b7e <__sflush_r+0xb6>
 8007b7a:	602f      	str	r7, [r5, #0]
 8007b7c:	e7b1      	b.n	8007ae2 <__sflush_r+0x1a>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	e7ad      	b.n	8007ae4 <__sflush_r+0x1c>
 8007b88:	690f      	ldr	r7, [r1, #16]
 8007b8a:	2f00      	cmp	r7, #0
 8007b8c:	d0a9      	beq.n	8007ae2 <__sflush_r+0x1a>
 8007b8e:	0793      	lsls	r3, r2, #30
 8007b90:	680e      	ldr	r6, [r1, #0]
 8007b92:	bf08      	it	eq
 8007b94:	694b      	ldreq	r3, [r1, #20]
 8007b96:	600f      	str	r7, [r1, #0]
 8007b98:	bf18      	it	ne
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	eba6 0807 	sub.w	r8, r6, r7
 8007ba0:	608b      	str	r3, [r1, #8]
 8007ba2:	f1b8 0f00 	cmp.w	r8, #0
 8007ba6:	dd9c      	ble.n	8007ae2 <__sflush_r+0x1a>
 8007ba8:	6a21      	ldr	r1, [r4, #32]
 8007baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bac:	4643      	mov	r3, r8
 8007bae:	463a      	mov	r2, r7
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b0      	blx	r6
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	dc06      	bgt.n	8007bc6 <__sflush_r+0xfe>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	e78e      	b.n	8007ae4 <__sflush_r+0x1c>
 8007bc6:	4407      	add	r7, r0
 8007bc8:	eba8 0800 	sub.w	r8, r8, r0
 8007bcc:	e7e9      	b.n	8007ba2 <__sflush_r+0xda>
 8007bce:	bf00      	nop
 8007bd0:	20400001 	.word	0x20400001

08007bd4 <_fflush_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	690b      	ldr	r3, [r1, #16]
 8007bd8:	4605      	mov	r5, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	b913      	cbnz	r3, 8007be4 <_fflush_r+0x10>
 8007bde:	2500      	movs	r5, #0
 8007be0:	4628      	mov	r0, r5
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	b118      	cbz	r0, 8007bee <_fflush_r+0x1a>
 8007be6:	6983      	ldr	r3, [r0, #24]
 8007be8:	b90b      	cbnz	r3, 8007bee <_fflush_r+0x1a>
 8007bea:	f000 f887 	bl	8007cfc <__sinit>
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <_fflush_r+0x6c>)
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	d11b      	bne.n	8007c2c <_fflush_r+0x58>
 8007bf4:	686c      	ldr	r4, [r5, #4]
 8007bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0ef      	beq.n	8007bde <_fflush_r+0xa>
 8007bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c00:	07d0      	lsls	r0, r2, #31
 8007c02:	d404      	bmi.n	8007c0e <_fflush_r+0x3a>
 8007c04:	0599      	lsls	r1, r3, #22
 8007c06:	d402      	bmi.n	8007c0e <_fflush_r+0x3a>
 8007c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0a:	f000 f915 	bl	8007e38 <__retarget_lock_acquire_recursive>
 8007c0e:	4628      	mov	r0, r5
 8007c10:	4621      	mov	r1, r4
 8007c12:	f7ff ff59 	bl	8007ac8 <__sflush_r>
 8007c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c18:	07da      	lsls	r2, r3, #31
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	d4e0      	bmi.n	8007be0 <_fflush_r+0xc>
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	059b      	lsls	r3, r3, #22
 8007c22:	d4dd      	bmi.n	8007be0 <_fflush_r+0xc>
 8007c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c26:	f000 f908 	bl	8007e3a <__retarget_lock_release_recursive>
 8007c2a:	e7d9      	b.n	8007be0 <_fflush_r+0xc>
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <_fflush_r+0x70>)
 8007c2e:	429c      	cmp	r4, r3
 8007c30:	d101      	bne.n	8007c36 <_fflush_r+0x62>
 8007c32:	68ac      	ldr	r4, [r5, #8]
 8007c34:	e7df      	b.n	8007bf6 <_fflush_r+0x22>
 8007c36:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <_fflush_r+0x74>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	bf08      	it	eq
 8007c3c:	68ec      	ldreq	r4, [r5, #12]
 8007c3e:	e7da      	b.n	8007bf6 <_fflush_r+0x22>
 8007c40:	08008524 	.word	0x08008524
 8007c44:	08008544 	.word	0x08008544
 8007c48:	08008504 	.word	0x08008504

08007c4c <std>:
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	4604      	mov	r4, r0
 8007c52:	e9c0 3300 	strd	r3, r3, [r0]
 8007c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c5a:	6083      	str	r3, [r0, #8]
 8007c5c:	8181      	strh	r1, [r0, #12]
 8007c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c60:	81c2      	strh	r2, [r0, #14]
 8007c62:	6183      	str	r3, [r0, #24]
 8007c64:	4619      	mov	r1, r3
 8007c66:	2208      	movs	r2, #8
 8007c68:	305c      	adds	r0, #92	; 0x5c
 8007c6a:	f7fd fb59 	bl	8005320 <memset>
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <std+0x38>)
 8007c70:	6263      	str	r3, [r4, #36]	; 0x24
 8007c72:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <std+0x3c>)
 8007c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <std+0x40>)
 8007c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <std+0x44>)
 8007c7c:	6224      	str	r4, [r4, #32]
 8007c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	bf00      	nop
 8007c84:	08007fa1 	.word	0x08007fa1
 8007c88:	08007fc3 	.word	0x08007fc3
 8007c8c:	08007ffb 	.word	0x08007ffb
 8007c90:	0800801f 	.word	0x0800801f

08007c94 <_cleanup_r>:
 8007c94:	4901      	ldr	r1, [pc, #4]	; (8007c9c <_cleanup_r+0x8>)
 8007c96:	f000 b8af 	b.w	8007df8 <_fwalk_reent>
 8007c9a:	bf00      	nop
 8007c9c:	08007bd5 	.word	0x08007bd5

08007ca0 <__sfmoreglue>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	2268      	movs	r2, #104	; 0x68
 8007ca4:	1e4d      	subs	r5, r1, #1
 8007ca6:	4355      	muls	r5, r2
 8007ca8:	460e      	mov	r6, r1
 8007caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cae:	f7ff fa65 	bl	800717c <_malloc_r>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	b140      	cbz	r0, 8007cc8 <__sfmoreglue+0x28>
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8007cbc:	300c      	adds	r0, #12
 8007cbe:	60a0      	str	r0, [r4, #8]
 8007cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cc4:	f7fd fb2c 	bl	8005320 <memset>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	bd70      	pop	{r4, r5, r6, pc}

08007ccc <__sfp_lock_acquire>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__sfp_lock_acquire+0x8>)
 8007cce:	f000 b8b3 	b.w	8007e38 <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	2000037d 	.word	0x2000037d

08007cd8 <__sfp_lock_release>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sfp_lock_release+0x8>)
 8007cda:	f000 b8ae 	b.w	8007e3a <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	2000037d 	.word	0x2000037d

08007ce4 <__sinit_lock_acquire>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__sinit_lock_acquire+0x8>)
 8007ce6:	f000 b8a7 	b.w	8007e38 <__retarget_lock_acquire_recursive>
 8007cea:	bf00      	nop
 8007cec:	2000037e 	.word	0x2000037e

08007cf0 <__sinit_lock_release>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__sinit_lock_release+0x8>)
 8007cf2:	f000 b8a2 	b.w	8007e3a <__retarget_lock_release_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	2000037e 	.word	0x2000037e

08007cfc <__sinit>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4604      	mov	r4, r0
 8007d00:	f7ff fff0 	bl	8007ce4 <__sinit_lock_acquire>
 8007d04:	69a3      	ldr	r3, [r4, #24]
 8007d06:	b11b      	cbz	r3, 8007d10 <__sinit+0x14>
 8007d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d0c:	f7ff bff0 	b.w	8007cf0 <__sinit_lock_release>
 8007d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d14:	6523      	str	r3, [r4, #80]	; 0x50
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <__sinit+0x68>)
 8007d18:	4a13      	ldr	r2, [pc, #76]	; (8007d68 <__sinit+0x6c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	bf04      	itt	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	61a3      	streq	r3, [r4, #24]
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 f820 	bl	8007d6c <__sfp>
 8007d2c:	6060      	str	r0, [r4, #4]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 f81c 	bl	8007d6c <__sfp>
 8007d34:	60a0      	str	r0, [r4, #8]
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 f818 	bl	8007d6c <__sfp>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	60e0      	str	r0, [r4, #12]
 8007d40:	2104      	movs	r1, #4
 8007d42:	6860      	ldr	r0, [r4, #4]
 8007d44:	f7ff ff82 	bl	8007c4c <std>
 8007d48:	68a0      	ldr	r0, [r4, #8]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	2109      	movs	r1, #9
 8007d4e:	f7ff ff7d 	bl	8007c4c <std>
 8007d52:	68e0      	ldr	r0, [r4, #12]
 8007d54:	2202      	movs	r2, #2
 8007d56:	2112      	movs	r1, #18
 8007d58:	f7ff ff78 	bl	8007c4c <std>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	61a3      	str	r3, [r4, #24]
 8007d60:	e7d2      	b.n	8007d08 <__sinit+0xc>
 8007d62:	bf00      	nop
 8007d64:	0800818c 	.word	0x0800818c
 8007d68:	08007c95 	.word	0x08007c95

08007d6c <__sfp>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	4607      	mov	r7, r0
 8007d70:	f7ff ffac 	bl	8007ccc <__sfp_lock_acquire>
 8007d74:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <__sfp+0x84>)
 8007d76:	681e      	ldr	r6, [r3, #0]
 8007d78:	69b3      	ldr	r3, [r6, #24]
 8007d7a:	b913      	cbnz	r3, 8007d82 <__sfp+0x16>
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff ffbd 	bl	8007cfc <__sinit>
 8007d82:	3648      	adds	r6, #72	; 0x48
 8007d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	d503      	bpl.n	8007d94 <__sfp+0x28>
 8007d8c:	6833      	ldr	r3, [r6, #0]
 8007d8e:	b30b      	cbz	r3, 8007dd4 <__sfp+0x68>
 8007d90:	6836      	ldr	r6, [r6, #0]
 8007d92:	e7f7      	b.n	8007d84 <__sfp+0x18>
 8007d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d98:	b9d5      	cbnz	r5, 8007dd0 <__sfp+0x64>
 8007d9a:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <__sfp+0x88>)
 8007d9c:	60e3      	str	r3, [r4, #12]
 8007d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007da2:	6665      	str	r5, [r4, #100]	; 0x64
 8007da4:	f000 f847 	bl	8007e36 <__retarget_lock_init_recursive>
 8007da8:	f7ff ff96 	bl	8007cd8 <__sfp_lock_release>
 8007dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007db4:	6025      	str	r5, [r4, #0]
 8007db6:	61a5      	str	r5, [r4, #24]
 8007db8:	2208      	movs	r2, #8
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dc0:	f7fd faae 	bl	8005320 <memset>
 8007dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dcc:	4620      	mov	r0, r4
 8007dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd0:	3468      	adds	r4, #104	; 0x68
 8007dd2:	e7d9      	b.n	8007d88 <__sfp+0x1c>
 8007dd4:	2104      	movs	r1, #4
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f7ff ff62 	bl	8007ca0 <__sfmoreglue>
 8007ddc:	4604      	mov	r4, r0
 8007dde:	6030      	str	r0, [r6, #0]
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d1d5      	bne.n	8007d90 <__sfp+0x24>
 8007de4:	f7ff ff78 	bl	8007cd8 <__sfp_lock_release>
 8007de8:	230c      	movs	r3, #12
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	e7ee      	b.n	8007dcc <__sfp+0x60>
 8007dee:	bf00      	nop
 8007df0:	0800818c 	.word	0x0800818c
 8007df4:	ffff0001 	.word	0xffff0001

08007df8 <_fwalk_reent>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	4688      	mov	r8, r1
 8007e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e04:	2700      	movs	r7, #0
 8007e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8007e0e:	d505      	bpl.n	8007e1c <_fwalk_reent+0x24>
 8007e10:	6824      	ldr	r4, [r4, #0]
 8007e12:	2c00      	cmp	r4, #0
 8007e14:	d1f7      	bne.n	8007e06 <_fwalk_reent+0xe>
 8007e16:	4638      	mov	r0, r7
 8007e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1c:	89ab      	ldrh	r3, [r5, #12]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d907      	bls.n	8007e32 <_fwalk_reent+0x3a>
 8007e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e26:	3301      	adds	r3, #1
 8007e28:	d003      	beq.n	8007e32 <_fwalk_reent+0x3a>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	47c0      	blx	r8
 8007e30:	4307      	orrs	r7, r0
 8007e32:	3568      	adds	r5, #104	; 0x68
 8007e34:	e7e9      	b.n	8007e0a <_fwalk_reent+0x12>

08007e36 <__retarget_lock_init_recursive>:
 8007e36:	4770      	bx	lr

08007e38 <__retarget_lock_acquire_recursive>:
 8007e38:	4770      	bx	lr

08007e3a <__retarget_lock_release_recursive>:
 8007e3a:	4770      	bx	lr

08007e3c <__swhatbuf_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	460e      	mov	r6, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	2900      	cmp	r1, #0
 8007e46:	b096      	sub	sp, #88	; 0x58
 8007e48:	4614      	mov	r4, r2
 8007e4a:	461d      	mov	r5, r3
 8007e4c:	da08      	bge.n	8007e60 <__swhatbuf_r+0x24>
 8007e4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	061a      	lsls	r2, r3, #24
 8007e58:	d410      	bmi.n	8007e7c <__swhatbuf_r+0x40>
 8007e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e5e:	e00e      	b.n	8007e7e <__swhatbuf_r+0x42>
 8007e60:	466a      	mov	r2, sp
 8007e62:	f000 f903 	bl	800806c <_fstat_r>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	dbf1      	blt.n	8007e4e <__swhatbuf_r+0x12>
 8007e6a:	9a01      	ldr	r2, [sp, #4]
 8007e6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e74:	425a      	negs	r2, r3
 8007e76:	415a      	adcs	r2, r3
 8007e78:	602a      	str	r2, [r5, #0]
 8007e7a:	e7ee      	b.n	8007e5a <__swhatbuf_r+0x1e>
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	2000      	movs	r0, #0
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	b016      	add	sp, #88	; 0x58
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e88 <__smakebuf_r>:
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e8c:	079d      	lsls	r5, r3, #30
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	d507      	bpl.n	8007ea4 <__smakebuf_r+0x1c>
 8007e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	6123      	str	r3, [r4, #16]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	6163      	str	r3, [r4, #20]
 8007ea0:	b002      	add	sp, #8
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}
 8007ea4:	ab01      	add	r3, sp, #4
 8007ea6:	466a      	mov	r2, sp
 8007ea8:	f7ff ffc8 	bl	8007e3c <__swhatbuf_r>
 8007eac:	9900      	ldr	r1, [sp, #0]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff f963 	bl	800717c <_malloc_r>
 8007eb6:	b948      	cbnz	r0, 8007ecc <__smakebuf_r+0x44>
 8007eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebc:	059a      	lsls	r2, r3, #22
 8007ebe:	d4ef      	bmi.n	8007ea0 <__smakebuf_r+0x18>
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	f043 0302 	orr.w	r3, r3, #2
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	e7e3      	b.n	8007e94 <__smakebuf_r+0xc>
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <__smakebuf_r+0x7c>)
 8007ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	6020      	str	r0, [r4, #0]
 8007ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed8:	81a3      	strh	r3, [r4, #12]
 8007eda:	9b00      	ldr	r3, [sp, #0]
 8007edc:	6163      	str	r3, [r4, #20]
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	6120      	str	r0, [r4, #16]
 8007ee2:	b15b      	cbz	r3, 8007efc <__smakebuf_r+0x74>
 8007ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f000 f8d1 	bl	8008090 <_isatty_r>
 8007eee:	b128      	cbz	r0, 8007efc <__smakebuf_r+0x74>
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	81a3      	strh	r3, [r4, #12]
 8007efc:	89a0      	ldrh	r0, [r4, #12]
 8007efe:	4305      	orrs	r5, r0
 8007f00:	81a5      	strh	r5, [r4, #12]
 8007f02:	e7cd      	b.n	8007ea0 <__smakebuf_r+0x18>
 8007f04:	08007c95 	.word	0x08007c95

08007f08 <_malloc_usable_size_r>:
 8007f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f0c:	1f18      	subs	r0, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bfbc      	itt	lt
 8007f12:	580b      	ldrlt	r3, [r1, r0]
 8007f14:	18c0      	addlt	r0, r0, r3
 8007f16:	4770      	bx	lr

08007f18 <_raise_r>:
 8007f18:	291f      	cmp	r1, #31
 8007f1a:	b538      	push	{r3, r4, r5, lr}
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	460d      	mov	r5, r1
 8007f20:	d904      	bls.n	8007f2c <_raise_r+0x14>
 8007f22:	2316      	movs	r3, #22
 8007f24:	6003      	str	r3, [r0, #0]
 8007f26:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f2e:	b112      	cbz	r2, 8007f36 <_raise_r+0x1e>
 8007f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f34:	b94b      	cbnz	r3, 8007f4a <_raise_r+0x32>
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 f830 	bl	8007f9c <_getpid_r>
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	4601      	mov	r1, r0
 8007f40:	4620      	mov	r0, r4
 8007f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f46:	f000 b817 	b.w	8007f78 <_kill_r>
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d00a      	beq.n	8007f64 <_raise_r+0x4c>
 8007f4e:	1c59      	adds	r1, r3, #1
 8007f50:	d103      	bne.n	8007f5a <_raise_r+0x42>
 8007f52:	2316      	movs	r3, #22
 8007f54:	6003      	str	r3, [r0, #0]
 8007f56:	2001      	movs	r0, #1
 8007f58:	e7e7      	b.n	8007f2a <_raise_r+0x12>
 8007f5a:	2400      	movs	r4, #0
 8007f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f60:	4628      	mov	r0, r5
 8007f62:	4798      	blx	r3
 8007f64:	2000      	movs	r0, #0
 8007f66:	e7e0      	b.n	8007f2a <_raise_r+0x12>

08007f68 <raise>:
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <raise+0xc>)
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	f7ff bfd3 	b.w	8007f18 <_raise_r>
 8007f72:	bf00      	nop
 8007f74:	20000010 	.word	0x20000010

08007f78 <_kill_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	; (8007f98 <_kill_r+0x20>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	602b      	str	r3, [r5, #0]
 8007f86:	f7f9 fbc7 	bl	8001718 <_kill>
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	d102      	bne.n	8007f94 <_kill_r+0x1c>
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	b103      	cbz	r3, 8007f94 <_kill_r+0x1c>
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	bd38      	pop	{r3, r4, r5, pc}
 8007f96:	bf00      	nop
 8007f98:	20000378 	.word	0x20000378

08007f9c <_getpid_r>:
 8007f9c:	f7f9 bbb4 	b.w	8001708 <_getpid>

08007fa0 <__sread>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa8:	f000 f894 	bl	80080d4 <_read_r>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	bfab      	itete	ge
 8007fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fb4:	181b      	addge	r3, r3, r0
 8007fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fba:	bfac      	ite	ge
 8007fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fbe:	81a3      	strhlt	r3, [r4, #12]
 8007fc0:	bd10      	pop	{r4, pc}

08007fc2 <__swrite>:
 8007fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	898b      	ldrh	r3, [r1, #12]
 8007fca:	05db      	lsls	r3, r3, #23
 8007fcc:	4605      	mov	r5, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	d505      	bpl.n	8007fe0 <__swrite+0x1e>
 8007fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd8:	2302      	movs	r3, #2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f000 f868 	bl	80080b0 <_lseek_r>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	4632      	mov	r2, r6
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff6:	f000 b817 	b.w	8008028 <_write_r>

08007ffa <__sseek>:
 8007ffa:	b510      	push	{r4, lr}
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008002:	f000 f855 	bl	80080b0 <_lseek_r>
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	bf15      	itete	ne
 800800c:	6560      	strne	r0, [r4, #84]	; 0x54
 800800e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008016:	81a3      	strheq	r3, [r4, #12]
 8008018:	bf18      	it	ne
 800801a:	81a3      	strhne	r3, [r4, #12]
 800801c:	bd10      	pop	{r4, pc}

0800801e <__sclose>:
 800801e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008022:	f000 b813 	b.w	800804c <_close_r>
	...

08008028 <_write_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d07      	ldr	r5, [pc, #28]	; (8008048 <_write_r+0x20>)
 800802c:	4604      	mov	r4, r0
 800802e:	4608      	mov	r0, r1
 8008030:	4611      	mov	r1, r2
 8008032:	2200      	movs	r2, #0
 8008034:	602a      	str	r2, [r5, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	f7f9 fba5 	bl	8001786 <_write>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_write_r+0x1e>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	b103      	cbz	r3, 8008046 <_write_r+0x1e>
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	20000378 	.word	0x20000378

0800804c <_close_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d06      	ldr	r5, [pc, #24]	; (8008068 <_close_r+0x1c>)
 8008050:	2300      	movs	r3, #0
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7f9 fbb1 	bl	80017be <_close>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_close_r+0x1a>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_close_r+0x1a>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	20000378 	.word	0x20000378

0800806c <_fstat_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	; (800808c <_fstat_r+0x20>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	f7f9 fbac 	bl	80017d6 <_fstat>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d102      	bne.n	8008088 <_fstat_r+0x1c>
 8008082:	682b      	ldr	r3, [r5, #0]
 8008084:	b103      	cbz	r3, 8008088 <_fstat_r+0x1c>
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	bf00      	nop
 800808c:	20000378 	.word	0x20000378

08008090 <_isatty_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	; (80080ac <_isatty_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7f9 fbab 	bl	80017f6 <_isatty>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_isatty_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_isatty_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20000378 	.word	0x20000378

080080b0 <_lseek_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	; (80080d0 <_lseek_r+0x20>)
 80080b4:	4604      	mov	r4, r0
 80080b6:	4608      	mov	r0, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7f9 fba4 	bl	800180c <_lseek>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_lseek_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_lseek_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20000378 	.word	0x20000378

080080d4 <_read_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	; (80080f4 <_read_r+0x20>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7f9 fb32 	bl	800174c <_read>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_read_r+0x1e>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_read_r+0x1e>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	20000378 	.word	0x20000378

080080f8 <_init>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr

08008104 <_fini>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	bf00      	nop
 8008108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810a:	bc08      	pop	{r3}
 800810c:	469e      	mov	lr, r3
 800810e:	4770      	bx	lr
